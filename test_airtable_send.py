"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ Airtable (EVOPOLIKI).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
"""

import asyncio
import os
import logging
from dotenv import load_dotenv
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_airtable_send():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ Airtable."""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_path = Path(__file__).parent / ".env"
    load_dotenv(dotenv_path=env_path)

    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    # –ü–æ–ª—É—á–∞–µ–º Airtable credentials
    airtable_api_key = os.getenv("AIRTABLE_API_KEY")
    airtable_base_id = os.getenv("AIRTABLE_BASE_ID")
    airtable_table_name = os.getenv("AIRTABLE_TABLE_NAME", "–ó–∞—è–≤–∫–∏ —Å –±–æ—Ç–æ–≤")

    if not airtable_api_key or not airtable_base_id:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Airtable!")
        logger.error(f"   AIRTABLE_API_KEY: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if airtable_api_key else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        logger.error(f"   AIRTABLE_BASE_ID: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if airtable_base_id else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        return

    logger.info(f"‚úÖ API Key: {airtable_api_key[:10]}...")
    logger.info(f"‚úÖ Base ID: {airtable_base_id}")
    logger.info(f"‚úÖ Table Name: {airtable_table_name}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AirtableService
    from packages.core.services.airtable_service import AirtableService

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å
    logger.info("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ AirtableService...")
    service = AirtableService(
        api_key=airtable_api_key,
        base_id=airtable_base_id,
        table_name=airtable_table_name
    )

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    # –í–ê–ñ–ù–û: "source" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ Airtable
    test_data = {
        "client_name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (–∏–∑ —Å–∫—Ä–∏–ø—Ç–∞)",
        "client_phone": "+996777999888",
        "source": "WhatsApp",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        "product_category": "üîπ EVA-–∫–æ–≤—Ä–∏–∫–∏",
        "car": "Toyota Camry 2020",
        "options": "‚úÖ –° –±–æ—Ä—Ç–∞–º–∏ 5 —Å–º\n‚úÖ –¶–≤–µ—Ç: –ß–µ—Ä–Ω—ã–π",
        "price": 2800,
        "application_type": "–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞"
    }

    logger.info("\nüì¶ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    for key, value in test_data.items():
        logger.info(f"   {key}: {value}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    logger.info("\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ Airtable...")
    record_id = await service.create_application(test_data)

    if record_id:
        logger.info("\n" + "="*70)
        logger.info("‚úÖ ‚úÖ ‚úÖ –¢–ï–°–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–ê! ‚úÖ ‚úÖ ‚úÖ")
        logger.info(f"üìã Record ID: {record_id}")
        logger.info("="*70)
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Airtable, –∑–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ!")
    else:
        logger.error("\n" + "="*70)
        logger.error("‚ùå ‚ùå ‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò! ‚ùå ‚ùå ‚ùå")
        logger.error("="*70)
        logger.error("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏.")


if __name__ == "__main__":
    asyncio.run(test_airtable_send())
