"""
WhatsApp UI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–µ–Ω—é –¥–ª—è WhatsApp.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Telegram Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ
—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ–Ω—é –¥–ª—è WhatsApp, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç—É –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ callback_data.
"""

from typing import Dict, List, Tuple
from ..config import I18nInstance


def digit_to_emoji(digit: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–∏—Ñ—Ä—É –≤ —ç–º–æ–¥–∑–∏.
    
    Args:
        digit: –¶–∏—Ñ—Ä–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ ("1", "2", "00", "99" –∏ —Ç.–¥.)
        
    Returns:
        str: –≠–º–æ–¥–∑–∏ —Ü–∏—Ñ—Ä–∞ (1Ô∏è‚É£, 2Ô∏è‚É£, –∏ —Ç.–¥.)
    """
    emoji_map = {
        "0": "0Ô∏è‚É£",
        "1": "1Ô∏è‚É£",
        "2": "2Ô∏è‚É£",
        "3": "3Ô∏è‚É£",
        "4": "4Ô∏è‚É£",
        "5": "5Ô∏è‚É£",
        "6": "6Ô∏è‚É£",
        "7": "7Ô∏è‚É£",
        "8": "8Ô∏è‚É£",
        "9": "9Ô∏è‚É£",
        "00": "‚è™",  # –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–∑–∞–¥
        "99": "‚è©",  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø–µ—Ä–µ–¥
    }
    return emoji_map.get(digit, digit)


def get_whatsapp_main_menu(i18n: I18nInstance) -> Tuple[str, Dict[str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è WhatsApp.

    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –∏–∑ buttons.catalog_categories!
    –ù–∏–∫–∞–∫–∏—Ö –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! –ö–∞–∂–¥—ã–π tenant –∏–º–µ–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä.

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_–º–µ–Ω—é, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)

    Example:
        text, mapping = get_whatsapp_main_menu(i18n)
        # text: "1 - üíé 5D-–∫–æ–≤—Ä–∏–∫–∏ Deluxe\n2 - üëë –ü—Ä–µ–º–∏—É–º-—á–µ—Ö–ª—ã\n..."
        # mapping: {"1": "category:5d_mats", "2": "category:premium_covers", ...}
    """
    import logging
    logger = logging.getLogger(__name__)

    # –ü–æ–ª—É—á–∞–µ–º catalog_categories –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    catalog_categories = i18n.get("buttons.catalog_categories")

    logger.info(f"üîç [MENU_GEN] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    logger.info(f"üîç [MENU_GEN] catalog_categories type: {type(catalog_categories)}")
    logger.info(f"üîç [MENU_GEN] catalog_categories: {catalog_categories}")

    if not catalog_categories or not isinstance(catalog_categories, list):
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: catalog_categories –Ω–µ –Ω–∞–π–¥–µ–Ω!
        logger.error(f"‚ùå [MENU_GEN] catalog_categories –ù–ï –ù–ê–ô–î–ï–ù –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞!")
        logger.error(f"‚ùå [MENU_GEN] –í—ã–∑—ã–≤–∞—é fallback —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ")
        return get_whatsapp_main_menu_fallback(i18n)

    if len(catalog_categories) == 0:
        logger.error(f"‚ùå [MENU_GEN] catalog_categories –ü–£–°–¢–û–ô!")
        return get_whatsapp_main_menu_fallback(i18n)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
    menu_items = []
    callback_mapping = {}

    intro_text = i18n.get("menu.catalog")
    menu_items.append(intro_text)

    logger.info(f"‚úÖ [MENU_GEN] –ì–µ–Ω–µ—Ä–∏—Ä—É—é {len(catalog_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    for idx, category in enumerate(catalog_categories, start=1):
        text = category.get("text", "")
        callback_data = category.get("callback_data", "")

        logger.info(f"  [{idx}] text='{text}', callback='{callback_data}'")

        menu_items.append(f"{digit_to_emoji(str(idx))} {text}")
        callback_mapping[str(idx)] = callback_data

    menu_text = "\n".join(menu_items)

    logger.info(f"‚úÖ [MENU_GEN] –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(callback_mapping)} –∫–Ω–æ–ø–æ–∫)")

    return menu_text, callback_mapping


def get_whatsapp_main_menu_fallback(i18n: I18nInstance) -> Tuple[str, Dict[str, str]]:
    """
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –î–û–õ–ñ–ù–ê –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!
    –í—Å–µ tenant'—ã –û–ë–Ø–ó–ê–ù–´ –∏–º–µ—Ç—å buttons.catalog_categories –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏!

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_–º–µ–Ω—é, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)

    Raises:
        RuntimeError: –ï—Å–ª–∏ catalog_categories –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    """
    # ‚ùå –£–î–ê–õ–Å–ù –ñ–ï–°–¢–ö–û –ó–ê–î–ê–ù–ù–´–ô FALLBACK –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò EVOPOLIKI!
    # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –û–®–ò–ë–ö–£, –µ—Å–ª–∏ catalog_categories –Ω–µ –Ω–∞–π–¥–µ–Ω

    error_text = (
        "‚ö†Ô∏è –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò\n\n"
        "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n\n"
        f"üìû {i18n.get('buttons.actions.contact_manager')}"
    )

    callback_mapping = {
        "1": "action:contact_manager"
    }

    return error_text, callback_mapping


def get_whatsapp_options_menu(i18n: I18nInstance, category: str, individual_order: bool = False) -> Tuple[str, Dict[str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π –¥–ª—è EVA/5D-–∫–æ–≤—Ä–∏–∫–æ–≤.

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        category: –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (eva_mats, 5d_mats, –∏ —Ç.–¥.)
        individual_order: –ï—Å–ª–∏ True, –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_–º–µ–Ω—é, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)
    """
    menu_items = [
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        f"{digit_to_emoji('1')} {i18n.get('buttons.options.with_borders')}",
        f"{digit_to_emoji('2')} {i18n.get('buttons.options.without_borders')}",
    ]

    callback_mapping = {
        "1": f"eva_option:{category}:with_borders",
        "2": f"eva_option:{category}:without_borders",
    }

    # –í —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    if individual_order:
        menu_items.append(f"{digit_to_emoji('3')} {i18n.get('buttons.actions.back_to_menu')}")
        callback_mapping["3"] = "action:back_to_menu"
    else:
        menu_items.append(f"{digit_to_emoji('3')} {i18n.get('buttons.options.need_consultation')}")
        callback_mapping["3"] = f"eva_option:{category}:consultation"

    return "\n".join(menu_items), callback_mapping


def get_whatsapp_confirmation_menu(i18n: I18nInstance) -> Tuple[str, Dict[str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_–º–µ–Ω—é, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)
    """
    menu_items = [
        f"{digit_to_emoji('1')} {i18n.get('buttons.actions.confirm_order')}",
        f"{digit_to_emoji('2')} {i18n.get('buttons.actions.back_to_menu')}"
    ]

    callback_mapping = {
        "1": "order:confirm",
        "2": "action:back_to_menu"
    }

    return "\n".join(menu_items), callback_mapping


def get_whatsapp_brand_selection_text(brands: List[str], page: int, total_pages: int, i18n: I18nInstance) -> Tuple[str, Dict[str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        brands: –°–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_–º–µ–Ω—é, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)
    """
    menu_items = [
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):"
    ]

    callback_mapping = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–∏
    for idx, brand in enumerate(brands, start=1):
        menu_items.append(f"{digit_to_emoji(str(idx))} {brand}")
        callback_mapping[str(idx)] = f"brand:{brand}"

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if total_pages > 1:
        nav_parts = []
        if page > 1:
            nav_parts.append(f"0Ô∏è‚É£0Ô∏è‚É£ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            callback_mapping["00"] = f"brands_page:{page-1}"
        if page < total_pages:
            nav_parts.append(f"9Ô∏è‚É£9Ô∏è‚É£ - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            callback_mapping["99"] = f"brands_page:{page+1}"
        
        if nav_parts:
            menu_items.append("\n" + "\n".join(nav_parts))
    
    # –£–º–Ω—ã–π –≤–≤–æ–¥: –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–º
    menu_items.append("\nüí° –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏")

    return "\n".join(menu_items), callback_mapping


def get_whatsapp_model_selection_text(models: List[str], page: int, total_pages: int, brand_name: str, i18n: I18nInstance) -> Tuple[str, Dict[str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        brand_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_–º–µ–Ω—é, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)
    """
    menu_items = [
        f"–ú–∞—Ä–∫–∞: {brand_name}\n",
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):"
    ]

    callback_mapping = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏
    for idx, model in enumerate(models, start=1):
        menu_items.append(f"{digit_to_emoji(str(idx))} {model}")
        callback_mapping[str(idx)] = f"model:{model}"

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if total_pages > 1:
        nav_parts = []
        if page > 1:
            nav_parts.append(f"0Ô∏è‚É£0Ô∏è‚É£ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            callback_mapping["00"] = f"models_page:{page-1}"
        if page < total_pages:
            nav_parts.append(f"9Ô∏è‚É£9Ô∏è‚É£ - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            callback_mapping["99"] = f"models_page:{page+1}"
        
        if nav_parts:
            menu_items.append("\n" + "\n".join(nav_parts))
    
    # –£–º–Ω—ã–π –≤–≤–æ–¥: –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
    menu_items.append("\nüí° –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")

    return "\n".join(menu_items), callback_mapping


def get_whatsapp_fuzzy_suggestion_text(original_input: str, suggested: str, i18n: I18nInstance) -> Tuple[str, Dict[str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.

    Args:
        original_input: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        suggested: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ë–î
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)
    """
    text = f"–í—ã –≤–≤–µ–ª–∏: '{original_input}'\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: '{suggested}'?\n\n{digit_to_emoji('1')} {i18n.get('buttons.suggestion.yes')}\n{digit_to_emoji('2')} {i18n.get('buttons.suggestion.no')}"

    callback_mapping = {
        "1": f"use_suggestion:{suggested}",
        "2": "reject_suggestion"
    }

    return text, callback_mapping


def get_whatsapp_back_to_menu_text(i18n: I18nInstance) -> Tuple[str, Dict[str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é".

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance

    Returns:
        Tuple[str, Dict[str, str]]: (—Ç–µ–∫—Å—Ç_–º–µ–Ω—é, –º–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–∞->callback_data)
    """
    text = f"\n{digit_to_emoji('0')} {i18n.get('buttons.actions.back_to_menu')}"

    callback_mapping = {
        "0": "action:back_to_menu"
    }

    return text, callback_mapping


def format_whatsapp_message(text: str, menu_text: str = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WhatsApp, –æ–±—ä–µ–¥–∏–Ω—è—è —Ç–µ–∫—Å—Ç –∏ –º–µ–Ω—é.

    Args:
        text: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        menu_text: –¢–µ–∫—Å—Ç –º–µ–Ω—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if menu_text:
        return f"{text}\n\n{menu_text}"
    return text
