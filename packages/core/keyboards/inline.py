"""
Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞.
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..constants import (
    CALLBACK_INPUT_MODEL,
    CALLBACK_USE_SUGGESTION
)
from ..config import I18nInstance


def get_language_keyboard(i18n: I18nInstance) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.language.russian"),
            callback_data="lang:ru"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.language.kyrgyz"),
            callback_data="lang:ky"
        )
    )

    return builder.as_markup()


def get_main_menu_keyboard(i18n: I18nInstance) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –∏–∑ buttons.catalog_categories!
    –ù–∏–∫–∞–∫–∏—Ö –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! –ö–∞–∂–¥—ã–π tenant –∏–º–µ–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä.

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    Raises:
        ValueError: –ï—Å–ª–∏ catalog_categories –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    """
    import logging
    logger = logging.getLogger(__name__)

    builder = InlineKeyboardBuilder()

    # –ü–æ–ª—É—á–∞–µ–º catalog_categories –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    catalog_categories = i18n.get("buttons.catalog_categories")

    logger.info(f"üîç [INLINE_KEYBOARD] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é Telegram")
    logger.info(f"üîç [INLINE_KEYBOARD] catalog_categories type: {type(catalog_categories)}")
    logger.info(f"üîç [INLINE_KEYBOARD] catalog_categories: {catalog_categories}")

    if not catalog_categories or not isinstance(catalog_categories, list):
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: catalog_categories –Ω–µ –Ω–∞–π–¥–µ–Ω!
        logger.error(f"‚ùå [INLINE_KEYBOARD] catalog_categories –ù–ï –ù–ê–ô–î–ï–ù –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞!")
        logger.error(f"‚ùå [INLINE_KEYBOARD] –í–°–ï tenant'—ã –û–ë–Ø–ó–ê–ù–´ –∏–º–µ—Ç—å buttons.catalog_categories!")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        builder.row(
            InlineKeyboardButton(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                callback_data="action:contact_manager"
            )
        )
        return builder.as_markup()

    if len(catalog_categories) == 0:
        logger.error(f"‚ùå [INLINE_KEYBOARD] catalog_categories –ü–£–°–¢–û–ô!")
        builder.row(
            InlineKeyboardButton(
                text="‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                callback_data="action:contact_manager"
            )
        )
        return builder.as_markup()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ catalog_categories
    logger.info(f"‚úÖ [INLINE_KEYBOARD] –ì–µ–Ω–µ—Ä–∏—Ä—É—é {len(catalog_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    for idx, category in enumerate(catalog_categories, start=1):
        text = category.get("text", "")
        callback_data = category.get("callback_data", "")

        logger.info(f"  [{idx}] text='{text}', callback='{callback_data}'")

        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=callback_data
            )
        )

    logger.info(f"‚úÖ [INLINE_KEYBOARD] –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(catalog_categories)} –∫–Ω–æ–ø–æ–∫)")

    return builder.as_markup()


def get_back_to_menu_keyboard(i18n: I18nInstance) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é".

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.back_to_menu"),
            callback_data="action:back_to_menu"
        )
    )

    return builder.as_markup()


def get_category_keyboard(category: str, i18n: I18nInstance) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞—è–≤–∫–∏.

    Args:
        category: –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.leave_request"),
            callback_data=f"request:{category}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.back_to_menu"),
            callback_data="action:back_to_menu"
        )
    )

    return builder.as_markup()


def get_popular_brands_keyboard(i18n: I18nInstance) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
    –ú–∞—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ –¥–≤–µ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏.

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–∞—Ä–∫–∞–º–∏
    """
    from core.constants import POPULAR_BRANDS, CALLBACK_BRAND_PREFIX, CALLBACK_INPUT_BRAND

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–æ–∫
    for brand in POPULAR_BRANDS:
        builder.button(
            text=f"{i18n.get('buttons.brands.brand_prefix')}{brand}",
            callback_data=f"{CALLBACK_BRAND_PREFIX}{brand}"
        )

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    builder.adjust(2)

    # –ö–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –º–∞—Ä–∫—É" (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.brands.input_other"),
            callback_data=CALLBACK_INPUT_BRAND
        )
    )

    return builder.as_markup()


def get_popular_models_keyboard(brand: str, i18n: I18nInstance) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏.
    –ú–æ–¥–µ–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ –¥–≤–µ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏.

    Args:
        brand: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    """
    from core.constants import POPULAR_MODELS, CALLBACK_MODEL_PREFIX, CALLBACK_INPUT_MODEL

    builder = InlineKeyboardBuilder()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
    models = POPULAR_MODELS.get(brand, [])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    for model in models:
        builder.button(
            text=f"{i18n.get('buttons.models.model_prefix')}{model}",
            callback_data=f"{CALLBACK_MODEL_PREFIX}{model}"
        )

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    builder.adjust(2)

    # –ö–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å" (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.models.input_other"),
            callback_data=CALLBACK_INPUT_MODEL
        )
    )

    return builder.as_markup()


def get_suggestion_keyboard(suggested_model: str, i18n: I18nInstance) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å.

    Args:
        suggested_model: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    from core.constants import CALLBACK_USE_SUGGESTION

    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [–º–æ–¥–µ–ª—å]"
    builder.row(
        InlineKeyboardButton(
            text=f"{i18n.get('buttons.suggestion.yes')} '{suggested_model}'",
            callback_data=f"{CALLBACK_USE_SUGGESTION}{suggested_model}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.suggestion.no"),
            callback_data=CALLBACK_INPUT_MODEL
        )
    )

    return builder.as_markup()


def get_brands_keyboard_paginated(
    brands_list: list[str],
    page: int = 1,
    page_size: int = 8,
    i18n: I18nInstance = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç 8 –º–∞—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (4 —Ä—è–¥–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∏) —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω–∏–∑—É.

    Args:
        brands_list: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ä–æ–∫
        page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
        page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8)
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    builder = InlineKeyboardBuilder()

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_brands = len(brands_list)
    total_pages = (total_brands + page_size - 1) // page_size  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * page_size
    end_idx = min(start_idx + page_size, total_brands)

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page_brands = brands_list[start_idx:end_idx]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –º–∞—Ä–∫–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    for brand in current_page_brands:
        builder.button(
            text=brand,
            callback_data=f"brand_select:{brand}"
        )

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    builder.adjust(2)

    # === –ö–ù–û–ü–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ===
    navigation_row = []

    # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    if page > 1:
        navigation_row.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"brands_page:{page - 1}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è)
    navigation_row.append(
        InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data=f"page_info:{page}"  # –ë—É–¥–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç callback
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    if page < total_pages:
        navigation_row.append(
            InlineKeyboardButton(
                text="–î–∞–ª–µ–µ ‚û°Ô∏è",
                callback_data=f"brands_page:{page + 1}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.row(*navigation_row)

    # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω i18n)
    if i18n:
        builder.row(
            InlineKeyboardButton(
                text=i18n.get("buttons.actions.back_to_menu"),
                callback_data="action:back_to_menu"
            )
        )

    return builder.as_markup()
