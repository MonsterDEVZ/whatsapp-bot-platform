"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Airtable API.

–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Airtable —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π tenant-specific –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.
"""

import os
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


async def create_lead(lead_data: Dict[str, Any], tenant_slug: str = "evopoliki") -> Optional[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É (–ª–∏–¥) –≤ Airtable.

    Args:
        lead_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏:
            - name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            - phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            - username: Username –∏–∑ WhatsApp (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - car_brand: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - car_model: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - options: –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - price: –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        tenant_slug: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–Ω–∞–Ω—Ç–∞ (evopoliki, five_deluxe)

    Returns:
        str: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ Airtable, –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ

    Example:
        >>> lead_data = {
        ...     "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        ...     "phone": "+996777123456",
        ...     "username": "ivan_ivanov",
        ...     "category": "EVA-–∫–æ–≤—Ä–∏–∫–∏",
        ...     "car_brand": "Toyota",
        ...     "car_model": "Camry",
        ...     "options": "–° –±–æ—Ä—Ç–∞–º–∏ 5 —Å–º, –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç",
        ...     "price": 2800
        ... }
        >>> record_id = await create_lead(lead_data, "evopoliki")
    """
    try:
        from pyairtable import Api

        # –ü–æ–ª—É—á–∞–µ–º tenant-specific credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        tenant_upper = tenant_slug.upper()
        api_token = os.getenv(f"{tenant_upper}_AIRTABLE_API_TOKEN")
        base_id = os.getenv(f"{tenant_upper}_AIRTABLE_BASE_ID")
        table_id = os.getenv(f"{tenant_upper}_AIRTABLE_TABLE_ID")

        # Fallback –Ω–∞ –æ–±—â–∏–µ credentials (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if not api_token:
            api_token = os.getenv("AIRTABLE_API_KEY")
        if not base_id:
            base_id = os.getenv("AIRTABLE_BASE_ID")
        if not table_id:
            # –î–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å table_name, –ø—Ä–æ–±—É–µ–º –µ–≥–æ
            table_id = os.getenv("AIRTABLE_TABLE_NAME")

        if not all([api_token, base_id, table_id]):
            logger.error(f"‚ùå [AIRTABLE] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç credentials –¥–ª—è {tenant_slug}")
            logger.error(f"   API Token: {'‚úÖ' if api_token else '‚ùå'}")
            logger.error(f"   Base ID: {'‚úÖ' if base_id else '‚ùå'}")
            logger.error(f"   Table ID: {'‚úÖ' if table_id else '‚ùå'}")
            return None

        logger.info(f"üîÑ [AIRTABLE] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥ –≤ Airtable –¥–ª—è {tenant_slug}...")
        logger.info(f"üîÑ [AIRTABLE] Base: {base_id}, Table: {table_id}")
        logger.info(f"üîÑ [AIRTABLE] –î–∞–Ω–Ω—ã–µ: {lead_data}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API Airtable
        api = Api(api_token)
        table = api.table(base_id, table_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Airtable —Å–æ–≥–ª–∞—Å–Ω–æ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–æ–ª–µ–π
        airtable_data = {}

        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø (—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
        airtable_data["–°—Ç–∞—Ç—É—Å"] = "–ù–æ–≤–∞—è"
        airtable_data["–ò—Å—Ç–æ—á–Ω–∏–∫"] = "WhatsApp"
        airtable_data["–¢–∏–ø –∑–∞—è–≤–∫–∏"] = "–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞"

        # –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï
        if lead_data.get("name"):
            airtable_data["–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"] = lead_data["name"]

        if lead_data.get("phone"):
            airtable_data["–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"] = lead_data["phone"]

        if lead_data.get("username"):
            airtable_data["Username"] = lead_data["username"]

        # –î–ê–ù–ù–´–ï –û –¢–û–í–ê–†–ï
        if lead_data.get("category"):
            airtable_data["–¢–æ–≤–∞—Ä"] = lead_data["category"]

        # –î–ê–ù–ù–´–ï –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï (–æ–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å)
        car_brand = lead_data.get("car_brand", "")
        car_model = lead_data.get("car_model", "")

        if car_brand or car_model:
            car_full = f"{car_brand} {car_model}".strip()
            if car_full:
                airtable_data["–ê–≤—Ç–æ–º–æ–±–∏–ª—å"] = car_full

        # –û–ü–¶–ò–ò/–î–ï–¢–ê–õ–ò
        if lead_data.get("options"):
            airtable_data["–î–µ—Ç–∞–ª–∏ / –û–ø—Ü–∏–∏"] = lead_data["options"]

        # –¶–ï–ù–ê (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 0)
        if lead_data.get("price") and lead_data["price"] > 0:
            airtable_data["–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞"] = lead_data["price"]

        logger.info(f"üì§ [AIRTABLE] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable: {airtable_data}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable
        record = table.create(airtable_data)
        record_id = record["id"]

        logger.info("="*70)
        logger.info(f"‚úÖ [AIRTABLE] –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Airtable —Å ID: {record_id}")
        logger.info(f"‚úÖ [AIRTABLE] –ö–ª–∏–µ–Ω—Ç: {lead_data.get('name')} ({lead_data.get('phone')})")
        logger.info(f"‚úÖ [AIRTABLE] –¢–æ–≤–∞—Ä: {airtable_data.get('–¢–æ–≤–∞—Ä', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        logger.info(f"‚úÖ [AIRTABLE] –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {airtable_data.get('–ê–≤—Ç–æ–º–æ–±–∏–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        if "–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞" in airtable_data:
            logger.info(f"‚úÖ [AIRTABLE] –¶–µ–Ω–∞: {airtable_data['–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞']} —Å–æ–º")
        logger.info("="*70)

        return record_id

    except ImportError:
        logger.error("‚ùå [AIRTABLE] –û–®–ò–ë–ö–ê: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pyairtable –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        logger.error("‚ùå [AIRTABLE] –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install pyairtable")
        return None

    except Exception as e:
        logger.exception("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –õ–ò–î–ê –í AIRTABLE !!!")
        logger.error(f"‚ùå [AIRTABLE] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"‚ùå [AIRTABLE] –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        logger.error(f"‚ùå [AIRTABLE] Base: {base_id}, Table: {table_id}")
        return None
