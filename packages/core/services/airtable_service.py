"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Airtable API.

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ Airtable.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å - –∫–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ—é –±–∞–∑—É.
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class AirtableService:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Airtable.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏–∑ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤ (Telegram –∏ WhatsApp)
    –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã Airtable –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.

    Attributes:
        api_key: Access Token –¥–ª—è Airtable API
        base_id: ID –±–∞–∑—ã –≤ Airtable (–Ω–∞–ø—Ä–∏–º–µ—Ä, app1X2TpPVukeswtK)
        table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã/–ª–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–∞—è–≤–∫–∏ —Å –±–æ—Ç–æ–≤")
    """

    def __init__(self, api_key: str, base_id: str, table_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å Airtable.

        Args:
            api_key: Access Token –¥–ª—è Airtable API
            base_id: ID –±–∞–∑—ã –≤ Airtable
            table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫

        Raises:
            ValueError: –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        """
        if not api_key:
            raise ValueError("AIRTABLE_API_KEY –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not base_id:
            raise ValueError("AIRTABLE_BASE_ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not table_name:
            raise ValueError("AIRTABLE_TABLE_NAME –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        self.api_key = api_key
        self.base_id = base_id
        self.table_name = table_name

        logger.info(f"‚úÖ AirtableService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: base={base_id}, table={table_name}")

    async def create_application(self, data: Dict[str, Any]) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ Airtable.

        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏. –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏:
                - client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
                - client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
                - source: –ò—Å—Ç–æ—á–Ω–∏–∫ (Telegram / WhatsApp)
                - project: –ü—Ä–æ–µ–∫—Ç/–ö–æ–º–ø–∞–Ω–∏—è (EVOPOLIKI / 5DELUXE)
                - product: –¢–æ–≤–∞—Ä (–∫–∞—Ç–µ–≥–æ—Ä–∏—è + –º–∞—Ä–∫–∞ + –º–æ–¥–µ–ª—å)
                - details: –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–æ–ø—Ü–∏–∏, –±–æ—Ä—Ç–∏–∫–∏ –∏ —Ç.–¥.)
                - price: –¶–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - user_id: User ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - username: Username (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            str: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ Airtable, –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ

        Example:
            >>> service = AirtableService(api_key, base_id, table_name)
            >>> record_id = await service.create_application({
            ...     "client_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            ...     "client_phone": "+996555123456",
            ...     "source": "Telegram",
            ...     "project": "EVOPOLIKI",
            ...     "product": "EVA –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è Toyota Camry",
            ...     "details": "–° –±–æ—Ä—Ç–∞–º–∏ 5 —Å–º",
            ...     "price": 4500
            ... })
        """
        try:
            from pyairtable import Api

            logger.info("üîÑ [AIRTABLE] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Airtable...")
            logger.info(f"üîÑ [AIRTABLE] Base: {self.base_id}, Table: {self.table_name}")
            logger.info(f"üîÑ [AIRTABLE] –î–∞–Ω–Ω—ã–µ: {data}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
            api = Api(self.api_key)
            table = api.table(self.base_id, self.table_name)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è Airtable –Ω–∞ –æ—Å–Ω–æ–≤–µ –ü–û–õ–ù–û–ô —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã (13 –∫–æ–ª–æ–Ω–æ–∫)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ Meta API!
            record_fields = {}

            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            # –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï
            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

            record_fields["–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"] = data.get("client_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            if data.get("client_phone"):
                record_fields["–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"] = data["client_phone"]

            if data.get("username"):
                record_fields["Username"] = data["username"]

            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            # –ò–°–¢–û–ß–ù–ò–ö –ò –ú–ï–¢–ê–î–ê–ù–ù–´–ï
            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

            if data.get("source"):
                record_fields["–ò—Å—Ç–æ—á–Ω–∏–∫"] = data["source"]

            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            # –î–ê–ù–ù–´–ï –ó–ê–ö–ê–ó–ê - –†–ê–°–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–û –û–¢–î–ï–õ–¨–ù–´–ú –ö–û–õ–û–ù–ö–ê–ú!
            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

            # 1. "–¢–æ–≤–∞—Ä" - –¢–û–õ–¨–ö–û –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (Eva –∫–æ–≤—Ä–∏–∫–∏, 5D –∫–æ–≤—Ä–∏–∫–∏ –∏ —Ç.–¥.)
            if data.get("product_category"):
                record_fields["–¢–æ–≤–∞—Ä"] = data["product_category"]

            # 2. "–ê–≤—Ç–æ–º–æ–±–∏–ª—å" - –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å
            if data.get("car"):
                record_fields["–ê–≤—Ç–æ–º–æ–±–∏–ª—å"] = data["car"]

            # 3. "–î–µ—Ç–∞–ª–∏ / –û–ø—Ü–∏–∏" - –æ–ø—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ (—Å –±–æ—Ä—Ç–∞–º–∏, –±–µ–∑ –±–æ—Ä—Ç–æ–≤ –∏ —Ç.–¥.)
            if data.get("options"):
                record_fields["–î–µ—Ç–∞–ª–∏ / –û–ø—Ü–∏–∏"] = data["options"]

            # 4. "–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞" - –ß–ò–°–õ–û–í–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è currency –ø–æ–ª—è
            if data.get("price") is not None and data.get("price") > 0:
                record_fields["–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞"] = data["price"]

            # 5. "–¢–∏–ø –∑–∞—è–≤–∫–∏" - —Ç–∏–ø –∑–∞—è–≤–∫–∏ (–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞, –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä)
            if data.get("application_type"):
                record_fields["–¢–∏–ø –∑–∞—è–≤–∫–∏"] = data["application_type"]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            record = table.create(record_fields)
            record_id = record["id"]

            logger.info(f"‚úÖ [AIRTABLE] –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Airtable. Record ID: {record_id}")
            logger.info(f"‚úÖ [AIRTABLE] –ö–ª–∏–µ–Ω—Ç: {data.get('client_name')} ({data.get('client_phone')})")
            logger.info(f"‚úÖ [AIRTABLE] –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source')}")
            logger.info(f"‚úÖ [AIRTABLE] –¢–æ–≤–∞—Ä: {record_fields.get('–¢–æ–≤–∞—Ä', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            logger.info(f"‚úÖ [AIRTABLE] –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {record_fields.get('–ê–≤—Ç–æ–º–æ–±–∏–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            logger.info(f"‚úÖ [AIRTABLE] –î–µ—Ç–∞–ª–∏/–û–ø—Ü–∏–∏: {record_fields.get('–î–µ—Ç–∞–ª–∏ / –û–ø—Ü–∏–∏', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            if record_fields.get('–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞'):
                logger.info(f"‚úÖ [AIRTABLE] –¶–µ–Ω–∞: {record_fields['–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞']} —Å–æ–º")
            logger.info(f"‚úÖ [AIRTABLE] –¢–∏–ø –∑–∞—è–≤–∫–∏: {record_fields.get('–¢–∏–ø –∑–∞—è–≤–∫–∏', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

            return record_id

        except ImportError:
            logger.error("‚ùå [AIRTABLE] –û–®–ò–ë–ö–ê: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pyairtable –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            logger.error("‚ùå [AIRTABLE] –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install pyairtable")
            return None

        except Exception as e:
            logger.exception("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í AIRTABLE !!!")
            logger.error(f"‚ùå [AIRTABLE] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå [AIRTABLE] –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            logger.error(f"‚ùå [AIRTABLE] Base: {self.base_id}, Table: {self.table_name}")
            return None
