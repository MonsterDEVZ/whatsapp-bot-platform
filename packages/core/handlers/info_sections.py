"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –±–æ—Ç–∞:
- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä
- –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã
- –û –Ω–∞—Å
- –ü–æ–º–æ—â—å / FAQ
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.states import OrderFlow
from core.config import Config
from core.keyboards import get_phone_request_keyboard, get_main_menu_keyboard, get_main_menu_button_keyboard

router = Router()


# ============================================================
# –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ó–ê–ú–ï–†
# ============================================================

@router.message(F.text == "üìè –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä")
async def start_individual_measure(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä".
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM-–≤–æ—Ä–æ–Ω–∫—É —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞.
    """
    i18n = config.bot.i18n

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    await state.update_data(
        is_individual_measure=True,
        category_name=i18n.get("individual_measure.order_text")
    )

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    await state.set_state(OrderFlow.waiting_for_name)

    await message.answer(
        text=i18n.get("individual_measure.short_intro"),
        parse_mode="HTML"
    )


# ============================================================
# –ù–ê–®–ò –†–ê–ë–û–¢–´ / –û–¢–ó–´–í–´
# ============================================================

@router.message(F.text == "‚≠êÔ∏è –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã")
async def show_our_works(message: Message, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Instagram.
    """
    i18n = config.bot.i18n

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Instagram
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.open_instagram"),
            url=config.bot.instagram_url
        )
    )

    await message.answer(
        text=i18n.get("info_sections.our_works.text"),
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


# ============================================================
# –û –ù–ê–° / –ö–û–ù–¢–ê–ö–¢–´
# ============================================================

@router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def show_about_us(message: Message, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.
    """
    i18n = config.bot.i18n
    await message.answer(
        text=i18n.get("info_sections.about_us.text"),
        parse_mode="HTML"
    )


# ============================================================
# –ü–û–ú–û–©–¨ / FAQ
# ============================================================

def get_faq_keyboard(i18n) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ FAQ.

    Args:
        i18n: –≠–∫–∑–µ–º–ø–ª—è—Ä I18nInstance –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    faq_keys = ["care", "timing", "delivery", "payment", "return"]
    for faq_key in faq_keys:
        builder.row(
            InlineKeyboardButton(
                text=i18n.get(f"faq.{faq_key}.question"),
                callback_data=f"faq:{faq_key}"
            )
        )

    return builder.as_markup()


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_faq(message: Message, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.
    """
    i18n = config.bot.i18n
    await message.answer(
        text=i18n.get("faq.intro"),
        reply_markup=get_faq_keyboard(i18n),
        parse_mode="HTML"
    )


# ============================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –î–õ–Ø FAQ
# ============================================================

@router.callback_query(F.data.startswith("faq:"))
async def handle_faq_question(callback: CallbackQuery, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ FAQ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    i18n = config.bot.i18n

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –≤–æ–ø—Ä–æ—Å–∞
    faq_key = callback.data.split(":")[1]

    # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π –Ω–∞ –ø—É—Ç–∏ –≤ JSON
    faq_answer_keys = {
        "care": "faq.care.short_answer",
        "timing": "faq.timing.answer",
        "delivery": "faq.delivery.short_answer",
        "payment": "faq.payment.answer",
        "return": "faq.return.answer"
    }

    answer_key = faq_answer_keys.get(faq_key)

    if not answer_key:
        await callback.answer(i18n.get("errors.try_again"), show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await callback.message.answer(
        text=i18n.get(answer_key),
        parse_mode="HTML"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é FAQ —Å–Ω–æ–≤–∞
    await callback.message.answer(
        text=i18n.get("faq.select_question"),
        reply_markup=get_faq_keyboard(i18n)
    )

    await callback.answer()


# ============================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò FSM –î–õ–Ø –°–ë–û–†–ê –ö–û–ù–¢–ê–ö–¢–û–í
# ============================================================

@router.message(OrderFlow.waiting_for_name, F.text)
async def process_name_individual_measure(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞.
    """
    i18n = config.bot.i18n
    
    client_name = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(client_name=client_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(OrderFlow.waiting_for_phone)
    
    await message.answer(
        text=i18n.get("order.contacts.name_received", client_name=client_name),
        reply_markup=get_phone_request_keyboard(i18n),
        parse_mode="HTML"
    )


@router.message(OrderFlow.waiting_for_phone, F.contact)
async def process_phone_individual_measure(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π.
    """
    i18n = config.bot.i18n
    phone = message.contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(client_phone=phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    client_name = data.get("client_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    category_name = data.get("category_name", i18n.get("individual_measure.order_text"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
    from core.handlers.requests import send_detailed_request_card
    
    success = await send_detailed_request_card(
        bot=message.bot,
        user=message.from_user,
        config=config,
        client_name=client_name,
        client_phone=phone,
        brand_name="–ù–µ —É–∫–∞–∑–∞–Ω–∞",
        model_name="–ù–µ —É–∫–∞–∑–∞–Ω–∞",
        category_name=category_name,
        option_details="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä",
        total_price=0
    )
    
    if success:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        await message.answer(
            text=i18n.get("order.confirmation.success"),
            reply_markup=get_main_menu_button_keyboard(i18n),
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            text=i18n.get("menu.main"),
            reply_markup=get_main_menu_keyboard(i18n),
            parse_mode="HTML"
        )
    else:
        # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –∫–æ–Ω—Ç–∞–∫—Ç—ã
        contacts = i18n.get("info_sections.contacts.text")
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:\n\n"
            f"{contacts}"
        )
        await message.answer(
            text=error_text,
            reply_markup=get_main_menu_button_keyboard(i18n),
            parse_mode="HTML"
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
    await state.clear()
