"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ –≥—Ä—É–ø–ø—É.
"""

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, User, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from core.keyboards import get_back_to_menu_keyboard
from core.config import Config

router = Router()


async def send_request_to_group(bot: Bot, callback: CallbackQuery, config: Config, category: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    """
    i18n = config.bot.i18n

    if not config.bot.group_chat_id:
        # –ï—Å–ª–∏ group_chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            i18n.get("errors.request_unavailable")
        )
        return

    user = callback.from_user

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_names = {
        "eva_mats": i18n.get("buttons.categories.eva_mats"),
        "seat_covers": i18n.get("categories.seat_covers.name"),
        "5d_mats": i18n.get("categories.5d_mats.name"),
        "dashboard_covers": i18n.get("categories.dashboard_covers.name")
    }

    category_text = f"{i18n.get('request.notification.category')} {category_names.get(category, i18n.get('values.not_specified'))}\n" if category else ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    message_text = (
        f"{i18n.get('request.notification.new_request_simple')}\n\n"
        f"{i18n.get('request.notification.client')} {user.full_name}\n"
        f"{i18n.get('request.notification.id')} <code>{user.id}</code>\n"
        f"{i18n.get('request.notification.username')} @{user.username if user.username else i18n.get('values.not_set')}\n"
        f"{category_text}"
        f"{i18n.get('request.notification.date')} {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.write_to_client"),
            url=f"tg://user?id={user.id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.take_in_work"),
            callback_data=f"take_order:{user.id}"
        )
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await bot.send_message(
            chat_id=config.bot.group_chat_id,
            text=message_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        return False


async def send_callback_request_to_airtable(
    bot: Bot,
    user: User,
    config: Config,
    client_name: str,
    client_phone: str,
    callback_details: str
) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –≤ Airtable.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        config: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
        client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
        callback_details: –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    import logging
    logger = logging.getLogger(__name__)

    logger.info(f"üîç [CALLBACK_AIRTABLE] === –ù–ê–ß–ê–õ–û –°–û–•–†–ê–ù–ï–ù–ò–Ø CALLBACK REQUEST ===")
    logger.info(f"üîç [CALLBACK_AIRTABLE] Tenant: {config.bot.tenant_slug}")
    logger.info(f"üîç [CALLBACK_AIRTABLE] –ö–ª–∏–µ–Ω—Ç: {client_name} (User ID: {user.id})")
    logger.info(f"üîç [CALLBACK_AIRTABLE] –î–µ—Ç–∞–ª–∏: {callback_details}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Airtable
    if not config.airtable:
        logger.error(f"‚ùå [CALLBACK_AIRTABLE] Airtable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è tenant={config.bot.tenant_slug}")
        return False

    try:
        from core.services import AirtableService

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Airtable
        airtable_service = AirtableService(
            api_key=config.airtable.api_key,
            base_id=config.airtable.base_id,
            table_name=config.airtable.table_name
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Airtable
        product_full_name = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
        details_text = callback_details

        airtable_data = {
            "client_name": client_name,
            "client_phone": client_phone,
            "source": "Telegram",
            "project": config.bot.tenant_slug.upper(),
            "product": product_full_name,
            "details": details_text,
            "user_id": user.id,
            "username": user.username if user.username else None
        }

        logger.info("üîÑ [CALLBACK_AIRTABLE] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å callback request –≤ Airtable...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Airtable
        record_id = await airtable_service.create_application(airtable_data)

        if record_id:
            logger.info(f"‚úÖ [CALLBACK_AIRTABLE] Callback request —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. Record ID: {record_id}")
            logger.info(f"   –ö–ª–∏–µ–Ω—Ç: {client_name} (@{user.username})")
            logger.info(f"   –î–µ—Ç–∞–ª–∏: {details_text}")
            logger.info(f"üîç [CALLBACK_AIRTABLE] === –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø (SUCCESS) ===")
            return True
        else:
            logger.error(f"‚ùå [CALLBACK_AIRTABLE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å callback request")
            logger.error(f"üîç [CALLBACK_AIRTABLE] === –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø (FAILED) ===")
            return False

    except Exception as e:
        logger.exception("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø CALLBACK REQUEST –í AIRTABLE !!!")
        logger.error(f"‚ùå [CALLBACK_AIRTABLE] Tenant: {config.bot.tenant_slug}")
        logger.error(f"‚ùå [CALLBACK_AIRTABLE] User ID: {user.id}")
        logger.error(f"‚ùå [CALLBACK_AIRTABLE] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"‚ùå [CALLBACK_AIRTABLE] –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        logger.error(f"üîç [CALLBACK_AIRTABLE] === –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø (FAILED) ===")
        return False


async def send_detailed_request_card(
    bot: Bot,
    user: User,
    config: Config,
    client_name: str,
    client_phone: str,
    brand_name: str,
    model_name: str,
    category_name: str,
    option_details: str,
    total_price: int
) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –≤ Airtable.
    –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        config: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
        client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
        brand_name: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        model_name: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
        option_details: –î–µ—Ç–∞–ª–∏ –æ–ø—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–° –±–æ—Ä—Ç–∞–º–∏")
        total_price: –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    import logging
    logger = logging.getLogger(__name__)

    # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    logger.info(f"üîç [SEND_REQUEST] === –ù–ê–ß–ê–õ–û –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò ===")
    logger.info(f"üîç [SEND_REQUEST] Tenant: {config.bot.tenant_slug}")
    logger.info(f"üîç [SEND_REQUEST] –ö–ª–∏–µ–Ω—Ç: {client_name} (User ID: {user.id})")
    logger.info(f"üîç [SEND_REQUEST] –ó–∞–∫–∞–∑: {category_name} –¥–ª—è {brand_name} {model_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Airtable
    if not config.airtable:
        logger.error(f"‚ùå [SEND_REQUEST] Airtable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è tenant={config.bot.tenant_slug}")
        return False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    from core.db.connection import get_session
    from core.db.queries import get_tenant_by_slug
    from core.database.models import Application

    application_id = None
    async for session in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º tenant
            tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            application = Application(
                tenant_id=tenant.id,
                customer_id=user.id,
                customer_name=client_name,
                customer_phone=client_phone,
                customer_username=user.username,
                application_details={
                    "brand_name": brand_name,
                    "model_name": model_name,
                    "category_name": category_name,
                    "option_details": option_details,
                    "total_price": total_price,
                    "is_individual_measure": option_details == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"
                },
                status="new"
            )

            session.add(application)
            await session.commit()
            await session.refresh(application)

            application_id = application.id
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î: {e}")
            await session.rollback()
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ application_id

    # ========================================================================
    # –°–û–•–†–ê–ù–ï–ù–ò–ï –í AIRTABLE
    # ========================================================================
    try:
        from core.services import AirtableService

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Airtable
        airtable_service = AirtableService(
            api_key=config.airtable.api_key,
            base_id=config.airtable.base_id,
            table_name=config.airtable.table_name
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Airtable
        product_full_name = f"{category_name} –¥–ª—è {brand_name} {model_name}"
        details_text = f"{option_details}, {total_price} —Å–æ–º"

        airtable_data = {
            "client_name": client_name,
            "client_phone": client_phone,
            "source": "Telegram",
            "project": config.bot.tenant_slug.upper(),
            "product": product_full_name,
            "details": details_text,
            "price": total_price,
            "user_id": user.id,
            "username": user.username if user.username else None
        }

        logger.info("üîÑ [AIRTABLE] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Airtable...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Airtable
        record_id = await airtable_service.create_application(airtable_data)

        if record_id:
            logger.info(f"‚úÖ [SEND_REQUEST] –ó–∞—è–≤–∫–∞ #{application_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Airtable. Record ID: {record_id}")
            logger.info(f"   –ö–ª–∏–µ–Ω—Ç: {client_name} (@{user.username})")
            logger.info(f"   –ó–∞–∫–∞–∑: {product_full_name}")
            logger.info(f"   –î–µ—Ç–∞–ª–∏: {details_text}")
            logger.info(f"üîç [SEND_REQUEST] === –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø (SUCCESS) ===")
            return True
        else:
            logger.error(f"‚ùå [SEND_REQUEST] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Airtable")
            logger.error(f"üîç [SEND_REQUEST] === –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø (FAILED) ===")
            return False

    except Exception as e:
        logger.exception("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í AIRTABLE !!!")
        logger.error(f"‚ùå [SEND_REQUEST] Tenant: {config.bot.tenant_slug}")
        logger.error(f"‚ùå [SEND_REQUEST] User ID: {user.id}")
        logger.error(f"‚ùå [SEND_REQUEST] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"‚ùå [SEND_REQUEST] –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        logger.error(f"üîç [SEND_REQUEST] === –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø (FAILED) ===")
        return False


@router.callback_query(F.data.startswith("request:"))
async def handle_request(callback: CallbackQuery, bot: Bot, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É".

    –§–æ—Ä–º–∞—Ç callback_data: "request:category_code" –∏–ª–∏ "request:contact"
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    request_type = callback.data.split(":")[1]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
    category = request_type if request_type != "contact" else None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
    success = await send_request_to_group(bot, callback, config, category)

    i18n = config.bot.i18n

    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
        await callback.message.edit_text(
            text=i18n.get("request.sent"),
            reply_markup=get_back_to_menu_keyboard(i18n),
            parse_mode="HTML"
        )

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer(i18n.get("notifications.request_sent"), show_alert=False)
    else:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
        await callback.message.edit_text(
            text=i18n.get("request.error"),
            reply_markup=get_back_to_menu_keyboard(i18n),
            parse_mode="HTML"
        )

        await callback.answer(i18n.get("errors.try_again"), show_alert=True)


@router.callback_query(F.data.startswith("take_application:"))
async def handle_take_application(callback: CallbackQuery, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É".
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –ë–î –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    i18n = config.bot.i18n

    # –ò–∑–≤–ª–µ–∫–∞–µ–º application_id –∏–∑ callback_data
    application_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    manager = callback.from_user
    manager_name = manager.full_name
    manager_username = manager.username

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    from core.db.connection import get_session
    from core.database.models import Application
    from sqlalchemy import select

    async for session in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
            stmt = select(Application).where(Application.id == application_id)
            result = await session.execute(stmt)
            application = result.scalar_one_or_none()

            if not application:
                await callback.answer(i18n.get("errors.application_not_found"), show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if application.status != "new":
                # –ó–∞—è–≤–∫—É —É–∂–µ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
                other_manager = application.manager_username or f"ID {application.manager_id}"
                await callback.answer(
                    i18n.get("errors.application_taken").replace("{manager}", other_manager),
                    show_alert=True
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
            application.status = "in_progress"
            application.manager_id = manager.id
            application.manager_username = manager_username

            await session.commit()
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @{manager_username}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î: {e}")
            await session.rollback()
            await callback.answer(i18n.get("errors.application_update_error"), show_alert=True)
            return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await callback.answer(
        i18n.get("notifications.application_taken").replace("{id}", str(application_id)),
        show_alert=False
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        original_text = callback.message.text
        updated_text = (
            f"{original_text}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"{i18n.get('request.notification.in_progress')}\n"
            f"{i18n.get('request.notification.manager')} @{manager_username or manager_name}\n"
            f"{i18n.get('request.notification.taken_at')} {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É"
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton

        # –ü–æ–ª—É—á–∞–µ–º User ID –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        user_id_match = re.search(r'User ID:</b> <code>(\d+)</code>', original_text)
        user_id = int(user_id_match.group(1)) if user_id_match else None

        if user_id:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                    url=f"tg://user?id={user_id}"
                )
            )

            await callback.message.edit_text(
                text=updated_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                text=updated_text,
                parse_mode="HTML"
            )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∑–∞—è–≤–∫–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –±–µ–∑ –ë–î)
@router.callback_query(F.data.startswith("take_order:"))
async def handle_take_order(callback: CallbackQuery):
    """–°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    user_id = callback.data.split(":")[1]
    manager = callback.from_user
    manager_name = manager.full_name

    await callback.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}",
        show_alert=True
    )

    try:
        original_text = callback.message.text
        updated_text = (
            f"{original_text}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚úÖ <b>–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É</b>\n"
            f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

        await callback.message.edit_text(
            text=updated_text,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
