"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI Assistant.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞–ø—Ä—è–º—É—é –æ–±—â–∞—Ç—å—Å—è —Å OpenAI Assistant,
–º–∏–Ω—É—è –≤—Å—é FSM-–ª–æ–≥–∏–∫—É, —á—Ç–æ–±—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É AI –º–æ–¥—É–ª—è.
"""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from core.config import Config
from core.ai.assistant import AssistantManager

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("ask_ai"))
async def handle_ask_ai_telegram(message: Message, config: Config):
    """
    –°–µ–∫—Ä–µ—Ç–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å AI Assistant.
    
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç FSM –∏ –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.
    
    –§–æ—Ä–º–∞—Ç: /ask_ai <–≤–æ–ø—Ä–æ—Å>
    –ü—Ä–∏–º–µ—Ä: /ask_ai –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in config.bot.admin_ids:
        logger.warning(f"[AI_DEBUG] Unauthorized access attempt from user {user_id}")
        return  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–≤—Å—ë –ø–æ—Å–ª–µ "/ask_ai ")
    question = message.text.split(maxsplit=1)
    
    if len(question) < 2:
        await message.answer(
            "‚ùì <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>/ask_ai –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/ask_ai –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</code>",
            parse_mode="HTML"
        )
        return
    
    question_text = question[1].strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    logger.info(f"[AI_DEBUG] Admin {user_id} asking: '{question_text[:50]}...'")
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssistantManager
        assistant = AssistantManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread_id –¥–ª—è –∞–¥–º–∏–Ω–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ chat_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ thread
        thread_id = assistant.create_thread()
        
        logger.info(f"[AI_DEBUG] Created thread: {thread_id}")
        
        # –ù–ê–ü–†–Ø–ú–£–Æ –≤—ã–∑—ã–≤–∞–µ–º AI Assistant (–±–µ–∑ FSM, –±–µ–∑ state_manager)
        response, _ = await assistant.get_response(
            thread_id=thread_id,
            user_message=question_text,
            chat_id=str(user_id),
            timeout=30
        )
        
        logger.info(f"[AI_DEBUG] AI response received: {len(response)} chars")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
        await message.answer(
            f"ü§ñ <b>AI Assistant Response:</b>\n\n{response}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        error_message = (
            f"‚ùå <b>AI Module Error:</b>\n\n"
            f"<code>{type(e).__name__}: {str(e)}</code>\n\n"
            f"<b>Details:</b>\n"
            f"<pre>{repr(e)}</pre>"
        )
        
        logger.error(f"[AI_DEBUG] Error: {e}", exc_info=True)
        
        await message.answer(
            error_message,
            parse_mode="HTML"
        )
