"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI Assistant.

–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI Assistants API –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ FAQ.
"""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from core.config import Config
from core.ai.assistant import AssistantManager, get_or_create_thread
from core.ai.response_parser import (
    detect_response_type,
    extract_order_data,
    format_response_for_platform
)
from core.utils.category_mapper import get_category_name
from core.keyboards import get_main_menu_keyboard
from core.db import get_session
from core.db.queries import search_patterns, get_tenant_by_slug
from core.states import OrderFlow

logger = logging.getLogger(__name__)

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AssistantManager (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞)
assistant_manager: AssistantManager = None


def init_assistant_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π AssistantManager."""
    global assistant_manager
    try:
        assistant_manager = AssistantManager()
        logger.info("‚úÖ Telegram: AssistantManager initialized")
    except Exception as e:
        logger.error(f"‚ùå Telegram: Failed to initialize AssistantManager: {e}")
        raise


@router.message(F.text & ~F.text.startswith('/'))
async def handle_text_message_with_ai(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI Assistant.

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    - –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    - –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
    - –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
    """
    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"üîç [AI_HANDLER] Caught text message: '{message.text[:50]}...' from user {message.from_user.id}")

    # –ò–ó–û–õ–Ø–¶–ò–Ø: –î–ª—è five_deluxe AI –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ FSM
    if config.bot.tenant_slug == "five_deluxe":
        logger.info(f"‚è≠Ô∏è  [AI_HANDLER] Skipping - five_deluxe uses FSM-only mode (no AI)")
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    logger.info(f"üîç [AI_HANDLER] Current FSM state: {current_state}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ä–∞–±–æ—Ç–∞—é—Ç)
    if current_state is not None:
        logger.info(f"‚è≠Ô∏è  [AI_HANDLER] Skipping - user has active FSM state: {current_state}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ AssistantManager
    if assistant_manager is None:
        logger.error("‚ùå AssistantManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        await message.answer(
            text="ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(config.bot.i18n)
        )
        return

    user_text = message.text
    user_id = str(message.from_user.id)

    logger.info(f"ü§ñ AI Assistant: Processing message from user {user_id}: {user_text[:50]}...")

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    thread_id = get_or_create_thread(user_id, assistant_manager)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        response, ai_command = await assistant_manager.get_response(thread_id, user_text, chat_id=user_id)

        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")

        # ============================================================
        # –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –ö–û–ú–ê–ù–î –û–¢ AI
        # ============================================================
        if ai_command:
            intent = ai_command.get("intent")
            logger.info(f"üéØ [AI_COMMAND] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç AI: {intent}")

            if intent == "SHOW_CATALOG":
                logger.info("üìñ [AI_COMMAND] –ü–æ–∫–∞–∑—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)")
                await message.answer(
                    text="üìñ –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
                    reply_markup=get_main_menu_keyboard(config.bot.i18n)
                )
                return

            elif intent == "SHOW_MAIN_MENU":
                logger.info("üè† [AI_COMMAND] –ü–æ–∫–∞–∑—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                await message.answer(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=get_main_menu_keyboard(config.bot.i18n)
                )
                return

        # ============================================================
        # –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–´–• –û–¢–í–ï–¢–û–í (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –±—ã–ª–æ)
        # ============================================================

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        response_type, parsed_data = detect_response_type(response)

        if response_type == "json" and parsed_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            intent = parsed_data.get("intent", "order").upper()
            logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º: {intent}")

            # ============================================================
            # –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô: CALLBACK_REQUEST (–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫)
            # ============================================================
            if intent == "CALLBACK_REQUEST":
                logger.info(f"üìû [CALLBACK_REQUEST] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
                callback_details = parsed_data.get("details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                logger.info(f"üìù [CALLBACK_REQUEST] –î–µ—Ç–∞–ª–∏: {callback_details}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ FSM state
                await state.update_data(
                    callback_details=callback_details,
                    request_type="callback"
                )

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                await state.set_state(OrderFlow.waiting_for_name)

                await message.answer(
                    text="‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
                         "üìù –®–∞–≥ 1/2: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
                    parse_mode="HTML"
                )
                return

            # ============================================================
            # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –°–¶–ï–ù–ê–†–ò–ô: ORDER (–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞)
            # ============================================================
            # JSON –æ—Ç–≤–µ—Ç —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º FSM —Å—Ü–µ–Ω–∞—Ä–∏–π
            logger.info(f"üõí [ORDER] –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞: {parsed_data}")

            order_data = extract_order_data(parsed_data)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            category = order_data.get("category", "eva_mats")
            brand = order_data.get("brand")
            model = order_data.get("model")

            i18n = config.bot.i18n

            if brand and model:
                # –ï—Å—Ç—å –∏ –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ª–µ–∫–∞–ª
                logger.info(f"üìã –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ª–µ–∫–∞–ª: {brand} {model}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM state
                category_name = get_category_name(category, i18n)
                logger.info(f"üè∑Ô∏è  [CATEGORY_FIX] category={category} -> category_name={category_name}")

                await state.update_data(
                    category=category,
                    category_name=category_name,
                    brand_name=brand,
                    model_name=model
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(OrderFlow.waiting_for_model)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—â–µ–º
                search_msg = await message.answer(
                    "üîç –ò—â—É –ª–µ–∫–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
                    parse_mode="HTML"
                )

                # –ò—â–µ–º –ª–µ–∫–∞–ª–∞ –≤ –ë–î
                async for session in get_session():
                    tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

                    if not tenant:
                        await search_msg.edit_text(
                            i18n.get("errors.configuration"),
                            parse_mode="HTML"
                        )
                        await state.clear()
                        return

                    patterns = await search_patterns(
                        session,
                        brand_name=brand,
                        model_name=model,
                        tenant_id=tenant.id,
                        category_code=category
                    )

                    if patterns:
                        # –õ–µ–∫–∞–ª–∞ –Ω–∞–π–¥–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–µ–º handle_patterns_found –∏–∑ eva_mats
                        from core.handlers.eva_mats import handle_patterns_found
                        await handle_patterns_found(search_msg, state, patterns, brand, model)
                    else:
                        # –õ–µ–∫–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º handle_patterns_not_found –∏–∑ eva_mats
                        from core.handlers.eva_mats import handle_patterns_not_found
                        await handle_patterns_not_found(search_msg, state, brand, model)

            elif brand:
                # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∞ - –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å –º–æ–¥–µ–ª—å
                logger.info(f"üìã –ï—Å—Ç—å –º–∞—Ä–∫–∞ {brand}, –Ω–æ –Ω–µ—Ç –º–æ–¥–µ–ª–∏ - –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å")

                category_name = get_category_name(category, i18n)
                logger.info(f"üè∑Ô∏è  [CATEGORY_FIX] category={category} -> category_name={category_name}")

                await state.update_data(
                    category=category,
                    category_name=category_name,
                    brand_name=brand
                )

                await state.set_state(OrderFlow.waiting_for_model)

                await message.answer(
                    text=f"‚úÖ –ü–æ–Ω—è–ª, –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å EVA-–∫–æ–≤—Ä–∏–∫–∞–º–∏ –¥–ª—è <b>{brand}</b>.\n\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
                         f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: Camry, Land Cruiser, RAV4</i>",
                    parse_mode="HTML"
                )

            else:
                # –ù–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –µ—Å—Ç—å, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                logger.info("‚ö†Ô∏è –ù–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –º–∞—Ä–∫–∏/–º–æ–¥–µ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é")
                await message.answer(
                    text=f"ü§ñ –ü–æ–Ω—è–ª, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å {i18n.get('buttons.categories.eva_mats')}.\n\n"
                         f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é:",
                    reply_markup=get_main_menu_keyboard(i18n)
                )

        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ) - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            logger.info("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ)")
            formatted_response = format_response_for_platform(response, "telegram")
            await message.answer(text=formatted_response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}")

        # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer(
            text="ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu_keyboard(config.bot.i18n)
        )
