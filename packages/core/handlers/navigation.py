"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞.
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from core.keyboards import get_main_menu_keyboard
from core.states import OrderFlow
from core.config import Config

router = Router()


@router.message(F.text == "üóÇÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_catalog(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤".

    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é).
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    i18n = config.bot.i18n
    text = i18n.get("menu.catalog")

    await message.answer(
        text=text,
        reply_markup=get_main_menu_keyboard(i18n),
        parse_mode="HTML"
    )


@router.message(F.text == "üìè –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä")
async def individual_measurement(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä".

    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    i18n = config.bot.i18n

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    await state.update_data(
        request_type="individual_measurement",
        category_name=i18n.get("individual_measure.order_text"),
        brand_name="",
        model_name=""
    )

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–±–æ—Ä –∏–º–µ–Ω–∏
    await state.set_state(OrderFlow.waiting_for_name)

    text = i18n.get("individual_measure.short_intro")

    await message.answer(
        text=text,
        parse_mode="HTML"
    )


@router.message(F.text == "‚≠êÔ∏è –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã")
async def our_works(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã".

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Instagram —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∞–±–æ—Ç.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    i18n = config.bot.i18n
    text = i18n.get("our_works.short_text")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Instagram
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.open_instagram"),
            url=config.bot.instagram_url
        )
    )

    await message.answer(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å".

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    i18n = config.bot.i18n
    text = i18n.get("about_us.short_text")

    await message.answer(
        text=text,
        parse_mode="HTML"
    )


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_menu(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å".

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ —Å —á–∞—Å—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    i18n = config.bot.i18n
    text = i18n.get("faq.intro")

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é FAQ
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("faq.care.question"),
            callback_data="faq:care"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("faq.timing.question"),
            callback_data="faq:timing"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("faq.delivery.question"),
            callback_data="faq:delivery"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("faq.payment.question"),
            callback_data="faq:payment"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("faq.return.question"),
            callback_data="faq:return"
        )
    )

    await message.answer(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("faq:"))
async def faq_answer(callback, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ FAQ –≤–æ–ø—Ä–æ—Å—ã.
    """
    faq_type = callback.data.split(":")[1]

    i18n = config.bot.i18n

    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ FAQ –Ω–∞ –∫–ª—é—á–∏ –≤ JSON
    faq_keys = {
        "care": "faq.care.short_answer",
        "timing": "faq.timing.answer",
        "delivery": "faq.delivery.short_answer",
        "payment": "faq.payment.answer",
        "return": "faq.return.answer"
    }

    answer_key = faq_keys.get(faq_type)
    answer_text = i18n.get(answer_key) if answer_key else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è"

    await callback.message.answer(
        text=answer_text,
        parse_mode="HTML"
    )

    await callback.answer()
