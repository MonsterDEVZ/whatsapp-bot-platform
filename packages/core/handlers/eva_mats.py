"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–∫–∞–∑–∞ EVA-–∫–æ–≤—Ä–∏–∫–æ–≤ —Å FSM.
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from core.states import OrderFlow
from core.keyboards import get_cancel_keyboard, get_back_to_menu_keyboard
from core.db import get_session
from core.db.queries import (
    search_patterns,
    get_tenant_by_slug,
    calculate_total_price,
    get_model_with_body_type
)
from core.config import Config
from core.debug_mode import debug_mode, format_debug_info

router = Router()


@router.callback_query(F.data == "category:eva_mats")
async def start_eva_mats_order(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–∫–∞–∑–∞ EVA-–∫–æ–≤—Ä–∏–∫–æ–≤.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ä–æ–∫ –∏–∑ PostgreSQL.
    """
    from core.keyboards import get_brands_keyboard_paginated
    from core.db.queries import get_unique_brands_from_db, get_tenant_by_slug

    i18n = config.bot.i18n

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ä–æ–∫ –∏–∑ PostgreSQL
    async for session in get_session():
        tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

        if not tenant:
            await callback.message.edit_text(
                i18n.get("errors.configuration"),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        brands_list = await get_unique_brands_from_db(tenant.id, session)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(category="eva_mats", category_name=i18n.get("buttons.categories.eva_mats"))

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(OrderFlow.waiting_for_brand)

    text = i18n.get("categories.eva_mats.intro")

    await callback.message.edit_text(
        text=text,
        reply_markup=get_brands_keyboard_paginated(brands_list, page=1, i18n=i18n),
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data.startswith("brands_page:"), OrderFlow.waiting_for_brand)
async def handle_brands_pagination(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—Ä–∫–∏.
    """
    from core.keyboards import get_brands_keyboard_paginated
    from core.db.queries import get_unique_brands_from_db, get_tenant_by_slug

    i18n = config.bot.i18n

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split(":")[1])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ä–æ–∫ –∏–∑ PostgreSQL
    async for session in get_session():
        tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

        if not tenant:
            await callback.answer("Configuration error", show_alert=True)
            return

        brands_list = await get_unique_brands_from_db(tenant.id, session)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await callback.message.edit_reply_markup(
        reply_markup=get_brands_keyboard_paginated(brands_list, page=page, i18n=i18n)
    )

    await callback.answer()


@router.callback_query(F.data.startswith("brand_select:"), OrderFlow.waiting_for_brand)
async def process_brand_selection(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏ –∏–∑ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    –ò—â–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ –≤ PostgreSQL.
    """
    from core.db.queries import get_models_for_brand_from_db, get_tenant_by_slug
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    i18n = config.bot.i18n

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∏–∑ callback_data
    brand_name = callback.data.split(":", 1)[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫—É
    await state.update_data(brand_name=brand_name)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ –∏–∑ PostgreSQL
    async for session in get_session():
        tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

        if not tenant:
            await callback.message.edit_text(
                i18n.get("errors.configuration"),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        models_list = await get_models_for_brand_from_db(brand_name, tenant.id, session)

    if not models_list:
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –º–∞—Ä–∫–∏ <b>{brand_name}</b> –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ–∫–∞–ª.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                callback_data="action:contact_manager"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text=i18n.get("buttons.actions.back_to_menu"),
                callback_data="action:back_to_menu"
            )
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    await state.set_state(OrderFlow.waiting_for_model)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö
    text = (
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ä–∫—É: <b>{brand_name}</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_list)}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: Camry, Land Cruiser, RAV4</i>"
    )

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ä–∫–∞–º",
            callback_data="category:eva_mats"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=i18n.get("buttons.actions.back_to_menu"),
            callback_data="action:back_to_menu"
        )
    )

    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data.startswith("page_info:"))
async def handle_page_info_click(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞).
    –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫.
    """
    await callback.answer("üìÑ –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=False)


@router.callback_query(F.data == "input:brand", OrderFlow.waiting_for_brand)
async def request_brand_input(callback: CallbackQuery, config: Config):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –º–∞—Ä–∫—É".
    """
    i18n = config.bot.i18n
    text = i18n.get("order.brand.input")

    await callback.message.edit_text(
        text=text,
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data.startswith("brand:"), OrderFlow.waiting_for_brand)
async def process_brand_button(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞—Ä–∫–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.
    """
    from core.keyboards import get_popular_models_keyboard
    from core.constants import CALLBACK_BRAND_PREFIX

    i18n = config.bot.i18n

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∏–∑ callback_data
    brand_name = callback.data.replace(CALLBACK_BRAND_PREFIX, "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫—É
    await state.update_data(brand_name=brand_name)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(OrderFlow.waiting_for_model)

    text = i18n.get("order.brand.selected").replace("{brand_name}", brand_name)

    await callback.message.edit_text(
        text=text,
        reply_markup=get_popular_models_keyboard(brand_name, i18n=i18n),
        parse_mode="HTML"
    )

    await callback.answer()


@router.message(OrderFlow.waiting_for_brand)
async def process_brand(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—Ä—É—á–Ω—É—é.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ä–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.
    """
    from core.keyboards import get_popular_models_keyboard

    i18n = config.bot.i18n
    brand_name = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫—É
    await state.update_data(brand_name=brand_name)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(OrderFlow.waiting_for_model)

    text = i18n.get("order.brand.selected").replace("{brand_name}", brand_name)

    await message.answer(
        text=text,
        reply_markup=get_popular_models_keyboard(brand_name, i18n=i18n),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "input:model", OrderFlow.waiting_for_model)
async def request_model_input(callback: CallbackQuery, config: Config):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å".
    """
    i18n = config.bot.i18n
    text = i18n.get("order.model.input")

    await callback.message.edit_text(
        text=text,
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data.startswith("use_suggestion:"), OrderFlow.waiting_for_model)
async def process_suggestion_confirmation(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ fuzzy search.
    """
    from core.constants import CALLBACK_USE_SUGGESTION
    from core.db.queries import search_patterns, get_tenant_by_slug
    from core.db.session import get_session

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ callback_data
    model_name = callback.data.replace(CALLBACK_USE_SUGGESTION, "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    brand_name = data.get("brand_name")
    category = data.get("category", "eva_mats")

    await callback.message.edit_text(
        "üîç –ò—â—É –ª–µ–∫–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode="HTML"
    )

    # –ü–æ–ª—É—á–∞–µ–º tenant –∏ –∏—â–µ–º –ª–µ–∫–∞–ª–∞
    async for session in get_session():
        tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

        if not tenant:
            i18n = config.bot.i18n
            await callback.message.edit_text(
                i18n.get("errors.configuration"),
                parse_mode="HTML"
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        is_debug = debug_mode.is_enabled(callback.from_user.id)

        # –ò—â–µ–º –ª–µ–∫–∞–ª–∞
        if is_debug:
            patterns, debug_info = await search_patterns(
                session,
                brand_name=brand_name,
                model_name=model_name,
                tenant_id=tenant.id,
                category_code=category,
                return_debug_info=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debug_text = format_debug_info(
                brand=brand_name,
                model=model_name,
                category=category,
                sql_query=debug_info.get('patterns_query', ''),
                result_count=debug_info.get('result_count', 0),
                additional_info=f"Brand ID: {debug_info.get('brand_query', 'N/A')}\nModel ID: {debug_info.get('model_query', 'N/A')}"
            )
            await callback.message.answer(debug_text, parse_mode="HTML")
        else:
            patterns = await search_patterns(
                session,
                brand_name=brand_name,
                model_name=model_name,
                tenant_id=tenant.id,
                category_code=category
            )

        if patterns:
            # –õ–µ–∫–∞–ª–∞ –Ω–∞–π–¥–µ–Ω—ã!
            await handle_patterns_found(callback.message, state, patterns, brand_name, model_name)
        else:
            # –õ–µ–∫–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å, —Ç.–∫. –º–æ–¥–µ–ª—å –±—ã–ª–∞ –≤ –ë–î)
            await handle_patterns_not_found(callback.message, state, brand_name, model_name)

    await callback.answer()


async def handle_patterns_found(message, state: FSMContext, patterns: list, brand_name: str, model_name: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ª–µ–∫–∞–ª–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        model_name=model_name,
        patterns=patterns
    )

    text = (
        f"‚úÖ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>\n\n"
        f"–£ –Ω–∞—Å –µ—Å—Ç—å –ª–µ–∫–∞–ª–∞ –¥–ª—è <b>{brand_name} {model_name}</b>!\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(patterns)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –° –±–æ—Ä—Ç–∞–º–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)",
            callback_data="option:with_borders"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –ë–µ–∑ –±–æ—Ä—Ç–æ–≤",
            callback_data="option:without_borders"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùì –ù–µ –∑–Ω–∞—é, –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            callback_data="option:need_consultation"
        )
    )

    await message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(OrderFlow.selecting_options)


async def handle_patterns_not_found(message, state: FSMContext, brand_name: str, model_name: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ª–µ–∫–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä –∏–ª–∏ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
    """
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    text = (
        f"üí° <b>–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!</b>\n\n"
        f"–ü–æ—Ö–æ–∂–µ, –≥–æ—Ç–æ–≤—ã—Ö –ª–µ–∫–∞–ª –¥–ª—è <b>{brand_name} {model_name}</b> "
        f"—É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.\n\n"
        f"<b>–ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞!</b> üéØ\n\n"
        f"–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ "
        f"—Å–æ–∑–¥–∞–¥–∏–º –∫–æ–≤—Ä–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n\n"
        f"‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞:</b>\n"
        f"‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞ –ø–æ–¥ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n"
        f"‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å–∞–ª–æ–Ω–∞\n"
        f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫–∞–∫ —É –≥–æ—Ç–æ–≤—ã—Ö –ª–µ–∫–∞–ª\n"
        f"‚Ä¢ –í—ã–µ–∑–¥ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ—Ä–æ–≤\n\n"
        f"–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑? üòä"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üìù –ó–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä",
            callback_data="request:individual_measure"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            callback_data="action:contact_manager"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data="action:back_to_menu"
        )
    )

    await message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data.startswith("model:"), OrderFlow.waiting_for_model)
async def process_model_button(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –∫ –ø–æ–∏—Å–∫—É –ª–µ–∫–∞–ª.
    """
    from core.constants import CALLBACK_MODEL_PREFIX

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ callback_data
    model_name = callback.data.replace(CALLBACK_MODEL_PREFIX, "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    await state.update_data(model_name=model_name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    brand_name = data.get("brand_name")
    category = data.get("category", "eva_mats")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—â–µ–º
    await callback.message.edit_text(
        "üîç –ò—â—É –ª–µ–∫–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode="HTML"
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ª–µ–∫–∞–ª (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ process_model)
    async for session in get_session():
        tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

        if not tenant:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            await state.clear()
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        is_debug = debug_mode.is_enabled(callback.from_user.id)

        # –ò—â–µ–º –ª–µ–∫–∞–ª–∞
        if is_debug:
            patterns, debug_info = await search_patterns(
                session,
                brand_name=brand_name,
                model_name=model_name,
                tenant_id=tenant.id,
                category_code=category,
                return_debug_info=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debug_text = format_debug_info(
                brand=brand_name,
                model=model_name,
                category=category,
                sql_query=debug_info.get('patterns_query', ''),
                result_count=debug_info.get('result_count', 0),
                additional_info=f"Brand Query: {debug_info.get('brand_query', 'N/A')}\nModel Query: {debug_info.get('model_query', 'N/A')}"
            )
            await callback.message.answer(debug_text, parse_mode="HTML")
        else:
            patterns = await search_patterns(
                session,
                brand_name=brand_name,
                model_name=model_name,
                tenant_id=tenant.id,
                category_code=category
            )

        if patterns:
            # –õ–µ–∫–∞–ª–∞ –Ω–∞–π–¥–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø—Ü–∏–π
            await handle_patterns_found(callback.message, state, patterns, brand_name, model_name)
        else:
            # –õ–µ–∫–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∑–∞–º–µ—Ä—É
            await handle_patterns_not_found(callback.message, state, brand_name, model_name)

    await callback.answer()


@router.message(OrderFlow.waiting_for_model)
async def process_model(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
    –ò—â–µ—Ç –ª–µ–∫–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    model_name = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    brand_name = data.get("brand_name")
    category = data.get("category", "eva_mats")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—â–µ–º
    search_msg = await message.answer(
        "üîç –ò—â—É –ª–µ–∫–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode="HTML"
    )

    # –ü–æ–ª—É—á–∞–µ–º tenant
    async for session in get_session():
        tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)

        if not tenant:
            await search_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        is_debug = debug_mode.is_enabled(message.from_user.id)

        # –ò—â–µ–º –ª–µ–∫–∞–ª–∞
        if is_debug:
            patterns, debug_info = await search_patterns(
                session,
                brand_name=brand_name,
                model_name=model_name,
                tenant_id=tenant.id,
                category_code=category,
                return_debug_info=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debug_text = format_debug_info(
                brand=brand_name,
                model=model_name,
                category=category,
                sql_query=debug_info.get('patterns_query', ''),
                result_count=debug_info.get('result_count', 0),
                additional_info=f"Brand Query: {debug_info.get('brand_query', 'N/A')}\nModel Query: {debug_info.get('model_query', 'N/A')}"
            )
            await message.answer(debug_text, parse_mode="HTML")
        else:
            patterns = await search_patterns(
                session,
                brand_name=brand_name,
                model_name=model_name,
                tenant_id=tenant.id,
                category_code=category
            )

        if patterns:
            # –õ–µ–∫–∞–ª–∞ –Ω–∞–π–¥–µ–Ω—ã!
            await handle_patterns_found(search_msg, state, patterns, brand_name, model_name)
        else:
            # –õ–µ–∫–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º - –ø–æ–ø—Ä–æ–±—É–µ–º fuzzy search
            from core.db.queries import get_brand_by_name, fuzzy_search_model
            from core.keyboards import get_suggestion_keyboard

            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥ –¥–ª—è fuzzy search
            brand = await get_brand_by_name(session, brand_name)

            if brand:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
                suggested_model, similarity = await fuzzy_search_model(
                    session,
                    brand_id=brand.id,
                    model_name=model_name,
                    threshold=85.0
                )

                if suggested_model:
                    # –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –º–æ–¥–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    text = (
                        f"ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å '<b>{model_name}</b>'.\n\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                        f"<b>{suggested_model}</b> (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.0f}%)\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?"
                    )

                    await search_msg.edit_text(
                        text=text,
                        reply_markup=get_suggestion_keyboard(suggested_model, i18n=config.bot.i18n),
                        parse_mode="HTML"
                    )
                    return

            # Fuzzy search –Ω–µ –ø–æ–º–æ–≥ –∏–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            await handle_patterns_not_found(search_msg, state, brand_name, model_name)


@router.callback_query(F.data.startswith("option:"), OrderFlow.selecting_options)
async def process_option_selection(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    option = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    brand_name = data.get("brand_name")
    model_name = data.get("model_name")
    category_name = data.get("category_name", "EVA-–∫–æ–≤—Ä–∏–∫–∏")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
    await state.update_data(selected_option=option)

    option_names = {
        "with_borders": "–° –±–æ—Ä—Ç–∞–º–∏",
        "without_borders": "–ë–µ–∑ –±–æ—Ä—Ç–æ–≤",
        "need_consultation": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    }

    option_text = option_names.get(option, option)

    if option == "need_consultation":
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        text = (
            f"üìã <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞:</b>\n\n"
            f"‚Ä¢ –¢–æ–≤–∞—Ä: {category_name}\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {brand_name} {model_name}\n"
            f"‚Ä¢ –û–ø—Ü–∏—è: {option_text}\n\n"
            f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º!\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
        )

        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        from handlers.requests import send_request_to_group

        await send_request_to_group(
            callback.bot,
            callback,
            category=f"eva_mats ({brand_name} {model_name}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)",
            config=config
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(i18n=config.bot.i18n),
            parse_mode="HTML"
        )

        await state.clear()

    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –∏–∑ –ë–î
        async for session in get_session():
            tenant = await get_tenant_by_slug(session, config.bot.tenant_slug)
            model, body_type = await get_model_with_body_type(session, brand_name, model_name)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
            selected_options = {
                'with_borders': (option == "with_borders"),
                'third_row': False  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ UI
            }

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É
            total_price, price_breakdown = await calculate_total_price(
                session,
                tenant.id,
                'eva_mats',
                body_type.code if body_type else 'sedan',
                selected_options
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ –¥–µ—Ç–∞–ª–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(
                total_price=int(total_price),
                price_breakdown=price_breakdown
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        text = (
            f"üìã <b>–°–≤–æ–¥–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</b>\n\n"
            f"üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {brand_name} {model_name}\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {category_name}\n"
            f"‚öôÔ∏è <b>–û–ø—Ü–∏—è:</b> {option_text}\n"
            f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_price} —Å–æ–º\n\n"
            f"–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑? üéâ"
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data="confirm:order"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data="action:back_to_menu"
            )
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

        await state.set_state(OrderFlow.confirming_order)

    await callback.answer()


@router.callback_query(F.data == "confirm:order", OrderFlow.confirming_order)
async def confirm_order(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    await state.set_state(OrderFlow.waiting_for_name)

    text = (
        "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è,\n"
        "—á—Ç–æ–±—ã –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n\n"
        "üìù <b>–®–∞–≥ 1/2:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
    )

    await callback.message.edit_text(
        text=text,
        parse_mode="HTML"
    )

    await callback.answer()


@router.message(OrderFlow.waiting_for_name)
async def process_name(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    client_name = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(client_name=client_name)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(OrderFlow.waiting_for_phone)

    from core.keyboards import get_phone_request_keyboard

    text = (
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, <b>{client_name}</b>!\n\n"
        f"üì± <b>–®–∞–≥ 2/2:</b> –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        f"<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</i>\n"
        f"–≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ! üîí"
    )

    await message.answer(
        text=text,
        reply_markup=get_phone_request_keyboard(config.bot.i18n),
        parse_mode="HTML"
    )


@router.message(OrderFlow.waiting_for_phone, F.contact)
async def process_phone(message: Message, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.
    –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
    """
    phone = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(client_phone=phone)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    client_name = data.get("client_name")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    request_type = data.get("request_type", "order")
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"üîç Request type: {request_type}")

    # ============================================================
    # –°–¶–ï–ù–ê–†–ò–ô 1: CALLBACK_REQUEST (–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫)
    # ============================================================
    if request_type == "callback":
        logger.info(f"üìû [CALLBACK] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")

        callback_details = data.get("callback_details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        from core.handlers.requests import send_callback_request_to_airtable

        success = await send_callback_request_to_airtable(
            bot=message.bot,
            user=message.from_user,
            config=config,
            client_name=client_name,
            client_phone=phone,
            callback_details=callback_details
        )

    # ============================================================
    # –°–¶–ï–ù–ê–†–ò–ô 2: ORDER (–û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞)
    # ============================================================
    else:
        logger.info(f"üõí [ORDER] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞")

        brand_name = data.get("brand_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        model_name = data.get("model_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        category_name = data.get("category_name", "EVA-–∫–æ–≤—Ä–∏–∫–∏")
        selected_option = data.get("selected_option")
        total_price = data.get("total_price", 0)
        is_individual_measure = data.get("is_individual_measure", False)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        if is_individual_measure:
            option_text = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"
            total_price = 0  # –¶–µ–Ω–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–º–µ—Ä–∞
        else:
            option_names = {
                "with_borders": "–° –±–æ—Ä—Ç–∞–º–∏",
                "without_borders": "–ë–µ–∑ –±–æ—Ä—Ç–æ–≤"
            }
            option_text = option_names.get(selected_option, selected_option or "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
        from core.handlers.requests import send_detailed_request_card

        success = await send_detailed_request_card(
            bot=message.bot,
            user=message.from_user,
            client_name=client_name,
            client_phone=phone,
            brand_name=brand_name,
            model_name=model_name,
            category_name=category_name,
            option_details=option_text,
            total_price=total_price,
            config=config
        )

    if success:
        from core.keyboards import get_main_menu_button_keyboard, get_main_menu_keyboard

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            text="‚úÖ <b>–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.</b>\n\n"
                 "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
                 "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç. üòä",
            reply_markup=get_main_menu_button_keyboard(config.bot.i18n),
            parse_mode="HTML"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=get_main_menu_keyboard(i18n=config.bot.i18n)
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        contacts = config.bot.i18n.get("info_sections.contacts.text")
        text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:\n\n"
            f"{contacts}"
        )
        await message.answer(text=text, parse_mode="HTML")

    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
    await state.clear()
    
    # –û—á–∏—â–∞–µ–º AI memory (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    try:
        from core.ai.memory import get_memory
        memory = get_memory()
        memory.clear_history(str(message.from_user.id))
    except Exception:
        pass  # AI memory –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_order(message: Message, state: FSMContext, config: Config):
    """
    –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    await state.clear()

    from core.keyboards import get_main_menu_keyboard, get_main_menu_button_keyboard

    await message.answer(
        text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_button_keyboard(config.bot.i18n)
    )

    await message.answer(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=get_main_menu_keyboard(i18n=config.bot.i18n)
    )


@router.callback_query(F.data == "request:individual_measure")
async def request_individual_measure(callback: CallbackQuery, state: FSMContext, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä
    await state.update_data(is_individual_measure=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await state.set_state(OrderFlow.waiting_for_name)

    text = (
        "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä.\n\n"
        "üìù <b>–®–∞–≥ 1/2:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
    )

    await callback.message.edit_text(
        text=text,
        parse_mode="HTML"
    )

    await callback.answer()
