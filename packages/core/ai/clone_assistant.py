"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI Assistant.

–ö–æ–ø–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (instructions, model, tools, files)
–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ tenant.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python packages/core/ai/clone_assistant.py <source_assistant_id> <new_assistant_name>

–ü—Ä–∏–º–µ—Ä:
    python packages/core/ai/clone_assistant.py asst_2BtVGCAEd5UjG4IK3DmVqRcF "5Deluxe Consultant"
"""

import os
import sys
import openai
from typing import Optional
import argparse


def clone_assistant(source_assistant_id: str, new_name: str, api_key: Optional[str] = None) -> str:
    """
    –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ OpenAI Assistant.

    Args:
        source_assistant_id: ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        new_name: –ò–º—è –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        api_key: OpenAI API –∫–ª—é—á (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ OPENAI_API_KEY)

    Returns:
        ID –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

    Raises:
        Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = api_key or os.getenv('OPENAI_API_KEY')

    if not api_key:
        raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
    client = openai.OpenAI(api_key=api_key)

    print(f"üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ: {source_assistant_id}")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ
        source_assistant = client.beta.assistants.retrieve(source_assistant_id)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {source_assistant.name}")
        print(f"üìù Model: {source_assistant.model}")
        print(f"üõ†Ô∏è  Tools: {[tool.type for tool in source_assistant.tools]}")

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        file_ids = []
        if hasattr(source_assistant, 'file_ids') and source_assistant.file_ids:
            file_ids = source_assistant.file_ids
            print(f"üìé –§–∞–π–ª—ã: {len(file_ids)} —Ñ–∞–π–ª–æ–≤")

        # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —Ç–æ–π –∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        print(f"\nüöÄ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {new_name}")

        new_assistant = client.beta.assistants.create(
            name=new_name,
            instructions=source_assistant.instructions,
            model=source_assistant.model,
            tools=source_assistant.tools,
            # –ö–æ–ø–∏—Ä—É–µ–º file_ids –µ—Å–ª–∏ –µ—Å—Ç—å
            file_ids=file_ids if file_ids else None,
            # –ö–æ–ø–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            temperature=source_assistant.temperature if hasattr(source_assistant, 'temperature') else None,
            top_p=source_assistant.top_p if hasattr(source_assistant, 'top_p') else None,
        )

        print(f"‚úÖ –ù–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"\n{'='*60}")
        print(f"üÜî –ù–û–í–´–ô ASSISTANT_ID: {new_assistant.id}")
        print(f"{'='*60}\n")
        print(f"üìù –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ .env —Ñ–∞–π–ª tenant:\n")
        print(f"OPENAI_ASSISTANT_ID={new_assistant.id}")
        print(f"–∏–ª–∏")
        print(f"<TENANT_SLUG>_OPENAI_ASSISTANT_ID={new_assistant.id}")
        print(f"\n{'='*60}\n")

        # 4. –ï—Å–ª–∏ –±—ã–ª–∏ —Ñ–∞–π–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
        if file_ids:
            print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ë—ã–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã {len(file_ids)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
            print(f"   –ï—Å–ª–∏ —É —Ä–∞–∑–Ω—ã—Ö tenants –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π,")
            print(f"   –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n")

        return new_assistant.id

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–ö–ª–æ–Ω–∏—Ä—É–µ—Ç OpenAI Assistant –¥–ª—è –Ω–æ–≤–æ–≥–æ tenant'
    )

    parser.add_argument(
        'source_id',
        type=str,
        help='ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: asst_2BtVGCAEd5UjG4IK3DmVqRcF)'
    )

    parser.add_argument(
        'new_name',
        type=str,
        help='–ò–º—è –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "5Deluxe Consultant")'
    )

    parser.add_argument(
        '--api-key',
        type=str,
        default=None,
        help='OpenAI API –∫–ª—é—á (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ OPENAI_API_KEY)'
    )

    args = parser.parse_args()

    try:
        new_assistant_id = clone_assistant(args.source_id, args.new_name, args.api_key)
        print(f"‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)

    except Exception as e:
        print(f"‚ùå –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
