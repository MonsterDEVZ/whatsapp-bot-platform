"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI Assistant.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–æ–≤:
1. –¢–µ–∫—Å—Ç–æ–≤—ã–µ (FAQ) - –æ—á–∏—Å—Ç–∫–∞ HTML, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
2. JSON (–Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞) - –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–ø—É—Å–∫ FSM-—Å—Ü–µ–Ω–∞—Ä–∏—è
"""

import json
import re
import logging
from typing import Dict, Any, Optional, Tuple

logger = logging.getLogger(__name__)


def clean_html_tags(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è WhatsApp.

    WhatsApp –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É
    –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.

    Args:
        text: –¢–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ HTML-—Ç–µ–≥–∞–º–∏

    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    cleaned = re.sub(r'<[^>]+>', '', text)

    # –ó–∞–º–µ–Ω—è–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    cleaned = cleaned.replace('&nbsp;', ' ')
    cleaned = cleaned.replace('&lt;', '<')
    cleaned = cleaned.replace('&gt;', '>')
    cleaned = cleaned.replace('&amp;', '&')
    cleaned = cleaned.replace('&quot;', '"')
    cleaned = cleaned.replace('&#39;', "'")

    return cleaned.strip()


def clean_text_for_whatsapp(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HTML-—Ç–µ–≥–∏ –≤ Markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è WhatsApp.

    WhatsApp –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Markdown:
    - *text* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    - _text_ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞
    - ~text~ –¥–ª—è –∑–∞—á–µ—Ä–∫–Ω—É—Ç–æ–≥–æ
    - ```text``` –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ

    Args:
        text: –¢–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ HTML-—Ç–µ–≥–∞–º–∏

    Returns:
        –¢–µ–∫—Å—Ç —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è WhatsApp
    """
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML ‚Üí Markdown
    # <b>, <strong> ‚Üí *bold*
    text = re.sub(r'<b>(.*?)</b>', r'*\1*', text, flags=re.IGNORECASE | re.DOTALL)
    text = re.sub(r'<strong>(.*?)</strong>', r'*\1*', text, flags=re.IGNORECASE | re.DOTALL)

    # <i>, <em> ‚Üí _italic_
    text = re.sub(r'<i>(.*?)</i>', r'_\1_', text, flags=re.IGNORECASE | re.DOTALL)
    text = re.sub(r'<em>(.*?)</em>', r'_\1_', text, flags=re.IGNORECASE | re.DOTALL)

    # <s>, <strike>, <del> ‚Üí ~strikethrough~
    text = re.sub(r'<s>(.*?)</s>', r'~\1~', text, flags=re.IGNORECASE | re.DOTALL)
    text = re.sub(r'<strike>(.*?)</strike>', r'~\1~', text, flags=re.IGNORECASE | re.DOTALL)
    text = re.sub(r'<del>(.*?)</del>', r'~\1~', text, flags=re.IGNORECASE | re.DOTALL)

    # <code>, <pre> ‚Üí ```monospace```
    text = re.sub(r'<code>(.*?)</code>', r'```\1```', text, flags=re.IGNORECASE | re.DOTALL)
    text = re.sub(r'<pre>(.*?)</pre>', r'```\1```', text, flags=re.IGNORECASE | re.DOTALL)

    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML-—Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', text)

    # –ó–∞–º–µ–Ω—è–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    text = text.replace('&nbsp;', ' ')
    text = text.replace('&lt;', '<')
    text = text.replace('&gt;', '>')
    text = text.replace('&amp;', '&')
    text = text.replace('&quot;', '"')
    text = text.replace('&#39;', "'")

    return text.strip()


def detect_response_type(response: str) -> Tuple[str, Optional[Dict[str, Any]]]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç Assistant: JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç.

    Args:
        response: –û—Ç–≤–µ—Ç –æ—Ç Assistant

    Returns:
        Tuple –∏–∑ (—Ç–∏–ø, –¥–∞–Ω–Ω—ã–µ):
        - ("json", parsed_data) –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON
        - ("text", None) –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    """
    logger.info(f"üîç [PARSER] –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ (–¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
    logger.info(f"üîç [PARSER] –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {response[:200]}")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ú–ï–¢–û–î 1: –£–±–∏—Ä–∞–µ–º markdown –æ–±–µ—Ä—Ç–∫–∏ ```json ... ```
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    cleaned_response = response
    if '```json' in response or '```JSON' in response:
        logger.info("üîç [PARSER] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ markdown-–æ–±–µ—Ä—Ç–∫–∞, —É–¥–∞–ª—è–µ–º...")
        # –£–¥–∞–ª—è–µ–º ```json –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ ```
        cleaned_response = re.sub(r'```json\s*', '', response, flags=re.IGNORECASE)
        cleaned_response = re.sub(r'```\s*$', '', cleaned_response, flags=re.MULTILINE)
        cleaned_response = cleaned_response.strip()
        logger.info(f"üîç [PARSER] –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è markdown: {cleaned_response[:200]}")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ú–ï–¢–û–î 2: –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    try:
        data = json.loads(cleaned_response)
        if isinstance(data, dict) and any(key in data for key in ['intent', 'category', 'brand', 'model']):
            logger.info(f"‚úÖ [PARSER] –í–µ—Å—å –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {data}")
            return ("json", data)
    except json.JSONDecodeError:
        logger.info("üîç [PARSER] –í–µ—Å—å –æ—Ç–≤–µ—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è JSON, –∏—â–µ–º JSON –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞...")
        pass

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ú–ï–¢–û–î 3: –ò—â–µ–º JSON-–±–ª–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω—ã–π regex)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π pattern –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON
    json_pattern = r'\{(?:[^{}]|(?:\{[^{}]*\}))*\}'

    matches = re.finditer(json_pattern, cleaned_response, re.DOTALL)

    for match in matches:
        json_str = match.group()
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            data = json.loads(json_str)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if isinstance(data, dict) and any(key in data for key in ['intent', 'category', 'brand', 'model']):
                logger.info(f"‚úÖ [PARSER] –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞: {data}")
                return ("json", data)

        except json.JSONDecodeError as e:
            logger.debug(f"üîç [PARSER] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {e}")
            continue

    # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    logger.info("üìù [PARSER] JSON –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    return ("text", None)


def extract_order_data(parsed_json: Dict[str, Any]) -> Dict[str, Optional[str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ JSON.

    Args:
        parsed_json: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON –æ—Ç Assistant

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏:
        - category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (eva, 3d, organizer –∏ —Ç.–¥.)
        - brand: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        - model: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        - options: –û–ø—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å –±–æ—Ä—Ç–∞–º–∏")
    """
    return {
        "category": parsed_json.get("category"),
        "brand": parsed_json.get("brand"),
        "model": parsed_json.get("model"),
        "options": parsed_json.get("options")
    }


def format_response_for_platform(response: str, platform: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

    Args:
        response: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Assistant
        platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ("telegram" –∏–ª–∏ "whatsapp")

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    if platform == "whatsapp":
        # WhatsApp: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ Markdown
        return clean_text_for_whatsapp(response)
    elif platform == "telegram":
        # Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return response
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Markdown
        return clean_text_for_whatsapp(response)
