"""
OpenAI Assistants API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.

–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º OpenAI,
–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (FAQ) –∏ —É–º–µ–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∞–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º.
"""

import os
import time
import logging
import json
import re
from typing import Optional, Dict, Any, Tuple
import openai

from ..memory import DialogMemory, get_memory

logger = logging.getLogger(__name__)


def parse_ai_command(response_text: str) -> Tuple[Optional[Dict[str, Any]], str]:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JSON-–∫–æ–º–∞–Ω–¥.

    JSON-–∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    - {"intent": "SHOW_CATALOG"}
    - {"intent": "SHOW_MAIN_MENU"}

    Args:
        response_text: –û—Ç–≤–µ—Ç –æ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

    Returns:
        Tuple[command_dict, clean_text]:
            - command_dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–∞–Ω–¥–æ–π, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∞—á–µ None
            - clean_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ JSON-–∫–æ–º–∞–Ω–¥—ã
    """
    # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
    json_pattern = r'\{["\']intent["\']\s*:\s*["\'](\w+)["\']\}'
    match = re.search(json_pattern, response_text, re.IGNORECASE)

    if match:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
            json_str = match.group(0)
            command_dict = json.loads(json_str)

            # –£–¥–∞–ª—è–µ–º JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
            clean_text = response_text.replace(json_str, '').strip()

            logger.info(f"üéØ [AI_COMMAND] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command_dict}")
            return command_dict, clean_text

        except json.JSONDecodeError:
            logger.warning(f"‚ö†Ô∏è [AI_COMMAND] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {match.group(0)}")

    return None, response_text


class AssistantManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Assistants API.

    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º threads (—Å–µ—Å—Å–∏–π –¥–∏–∞–ª–æ–≥–æ–≤) –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–æ–≤
    –æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    """

    def __init__(self, api_key: Optional[str] = None, assistant_id: Optional[str] = None,
                 memory: Optional[DialogMemory] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

        Args:
            api_key: OpenAI API –∫–ª—é—á. –ï—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ OPENAI_API_KEY
            assistant_id: ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ OpenAI. –ï—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ OPENAI_ASSISTANT_ID
            memory: DialogMemory –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç get_memory()
        """
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        self.assistant_id = assistant_id or os.getenv('OPENAI_ASSISTANT_ID')

        if not self.api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        if not self.assistant_id:
            raise ValueError("OPENAI_ASSISTANT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        self.client = openai.OpenAI(api_key=self.api_key)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é memory –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—É—é
        self.memory = memory

        logger.info(f"‚úÖ AssistantManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Assistant ID: {self.assistant_id})")

    def create_thread(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –¥–∏–∞–ª–æ–≥–∞ (thread) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            thread_id: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ thread

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å thread
        """
        try:
            thread = self.client.beta.threads.create()
            logger.info(f"üßµ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π thread: {thread.id}")
            return thread.id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ thread: {e}")
            raise

    async def get_response(self, thread_id: str, user_message: str, chat_id: Optional[str] = None,
                          timeout: int = 30) -> Tuple[str, Optional[Dict[str, Any]]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ thread –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

        Args:
            thread_id: ID thread (—Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞)
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ DialogMemory)
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)

        Returns:
            Tuple[response_text, command_dict]:
                - response_text: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–±–µ–∑ JSON-–∫–æ–º–∞–Ω–¥)
                - command_dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–∞–Ω–¥–æ–π, –µ—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª JSON-–∫–æ–º–∞–Ω–¥—É, –∏–Ω–∞—á–µ None

        Raises:
            TimeoutError: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ timeout —Å–µ–∫—É–Ω–¥
            Exception: –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
        """
        try:
            logger.info(f"üí¨ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è thread: {thread_id}")
            logger.info(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ thread {thread_id}: '{user_message[:50]}...'")

            # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ DialogMemory (–µ—Å–ª–∏ chat_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
            context_instructions = ""
            if chat_id and self.memory:
                context_instructions = self.memory.get_formatted_context(chat_id)
                if context_instructions:
                    logger.info(f"üìñ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è {chat_id} ({len(context_instructions)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    logger.info(f"üì≠ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è {chat_id} (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")

            # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è thread
            # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã AI –≤–∏–¥–µ–ª –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            if context_instructions:
                message_with_context = f"{context_instructions}\n\n---\n\n{user_message}"
                logger.info(f"üîó –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Ç–æ–≥–æ: {len(message_with_context)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                message_with_context = user_message

            # 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ thread (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
            self.client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=message_with_context
            )

            # 4. –ó–∞–ø—É—Å–∫–∞–µ–º "run" - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            base_instructions = "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ù–µ –±–æ–ª–µ–µ 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
            run = self.client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=self.assistant_id,
                additional_instructions=base_instructions
            )

            logger.info(f"üèÉ –ó–∞–ø—É—â–µ–Ω run {run.id}, –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

            # 3. –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run (polling)
            start_time = time.time()
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if time.time() - start_time > timeout:
                    logger.error(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ({timeout}s)")
                    raise TimeoutError(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å run
                run_status = self.client.beta.threads.runs.retrieve(
                    thread_id=thread_id,
                    run_id=run.id
                )

                logger.debug(f"Run status: {run_status.status}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                if run_status.status == 'completed':
                    logger.info("‚úÖ Run –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    break
                elif run_status.status == 'failed':
                    logger.error(f"‚ùå Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {run_status.last_error}")
                    raise Exception(f"Run failed: {run_status.last_error}")
                elif run_status.status == 'cancelled':
                    logger.error("‚ùå Run –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
                    raise Exception("Run was cancelled")
                elif run_status.status == 'expired':
                    logger.error("‚ùå Run –∏—Å—Ç–µ–∫")
                    raise Exception("Run expired")

                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(1)

            # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            messages = self.client.beta.threads.messages.list(
                thread_id=thread_id,
                order='desc',
                limit=1
            )

            if not messages.data:
                logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
                raise Exception("No messages received from Assistant")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            assistant_message = messages.data[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if assistant_message.role != 'assistant':
                logger.error(f"‚ùå –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant_message.role}")
                raise Exception("Last message is not from assistant")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ content
            response_text = ""
            for content_block in assistant_message.content:
                if content_block.type == 'text':
                    response_text += content_block.text.value

            logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ({len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤)")

            # 5. –ü–∞—Ä—Å–∏–º JSON-–∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            command_dict, clean_text = parse_ai_command(response_text)

            if command_dict:
                logger.info(f"üéØ [AI_COMMAND] AI –≤–µ—Ä–Ω—É–ª –∫–æ–º–∞–Ω–¥—É: {command_dict['intent']}")
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ clean_text (–±–µ–∑ JSON)
                response_to_save = clean_text if clean_text else "[–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞]"
            else:
                response_to_save = response_text

            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ chat_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
            if chat_id and self.memory:
                self.memory.add_message(chat_id, "user", user_message)
                self.memory.add_message(chat_id, "assistant", response_to_save)
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å –¥–ª—è {chat_id}")

            return clean_text if command_dict else response_text, command_dict

        except TimeoutError:
            raise
        except Exception as e:
            logger.exception("!!! CRITICAL ERROR IN ASSISTANT MANAGER !!!")
            logger.error(f"‚ùå The exact error was: {type(e).__name__}: {e}")
            logger.error(f"‚ùå Thread ID: {thread_id}")
            logger.error(f"‚ùå Assistant ID: {self.assistant_id}")
            raise


# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ thread_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –§–æ—Ä–º–∞—Ç: {chat_id: thread_id}
# TODO: –í –±—É–¥—É—â–µ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ Redis –∏–ª–∏ –ë–î –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
_user_threads = {}


def get_or_create_thread(chat_id: str, assistant_manager: AssistantManager) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thread_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram user_id –∏–ª–∏ WhatsApp chat_id)
        assistant_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä AssistantManager

    Returns:
        thread_id: ID thread –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    global _user_threads

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞ threads
    logger.info(f"üîç [THREAD_CACHE] –í—Å–µ–≥–æ threads –≤ –∫–µ—à–µ: {len(_user_threads)}")
    logger.info(f"üîç [THREAD_CACHE] –ò—â—É thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ thread –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in _user_threads:
        thread_id = _user_threads[chat_id]
        logger.info(f"‚úÖ [THREAD_CACHE] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thread {thread_id} –¥–ª—è {chat_id}")
        return thread_id

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread
    logger.warning(f"‚ö†Ô∏è [THREAD_CACHE] Thread –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ! –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π thread –¥–ª—è {chat_id}")
    thread_id = assistant_manager.create_thread()
    _user_threads[chat_id] = thread_id

    logger.info(f"üÜï [THREAD_CACHE] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π thread {thread_id} –¥–ª—è {chat_id}")
    logger.info(f"üìä [THREAD_CACHE] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à: {len(_user_threads)} threads")

    return thread_id


def clear_thread(chat_id: str):
    """
    –£–¥–∞–ª—è–µ—Ç thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start).
    –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ DialogMemory.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    global _user_threads

    if chat_id in _user_threads:
        thread_id = _user_threads[chat_id]
        del _user_threads[chat_id]
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω thread {thread_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ DialogMemory
    try:
        memory = get_memory()
        memory.clear_history(chat_id)
    except RuntimeError:
        # DialogMemory –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞–µ–≤
        logger.debug("DialogMemory –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")


# –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio

    async def test():
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = AssistantManager()

        # –°–æ–∑–¥–∞–µ–º thread
        thread_id = manager.create_thread()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_messages = [
            "–ö–∞–∫–∞—è —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏—è?",
            "–•–æ—á—É –µ–≤–∞ –∫–æ–≤—Ä–∏–∫–∏ –Ω–∞ —Ç–æ–π–æ—Ç—É –∫–∞–º—Ä–∏",
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?"
        ]

        for message in test_messages:
            print(f"\n{'='*60}")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")

            response = await manager.get_response(thread_id, message)

            print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
            print(f"{'='*60}\n")

    asyncio.run(test())
