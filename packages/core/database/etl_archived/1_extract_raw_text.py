#!/usr/bin/env python3
"""
ETL Pipeline - Step 1: EXTRACT
================================
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞ –ë–î_–º–∞—à–∏–Ω—ã.pdf
–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ output/raw_text.txt

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python 1_extract_raw_text.py

–†–µ–∑—É–ª—å—Ç–∞—Ç:
    –°–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª ../output/raw_text.txt —Å–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–º –∏–∑ PDF
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    import pdfplumber
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pdfplumber")
    sys.exit(1)


def extract_text_from_pdf(pdf_path: Path, output_path: Path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞.

    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    """
    print("=" * 70)
    print("üìÑ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ò–ó PDF")
    print("=" * 70)
    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {pdf_path}")
    print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {output_path}\n")

    if not pdf_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    output_path.parent.mkdir(parents=True, exist_ok=True)

    all_text = []
    page_count = 0

    try:
        with pdfplumber.open(pdf_path) as pdf:
            total_pages = len(pdf.pages)
            print(f"üìñ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ PDF: {total_pages}\n")

            for page_num, page in enumerate(pdf.pages, start=1):
                print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}/{total_pages}...", end="\r")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                text = page.extract_text()

                if text:
                    all_text.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {page_num} ===\n")
                    all_text.append(text)
                    all_text.append("\n\n")
                    page_count += 1

            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page_count}/{total_pages}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
        full_text = "".join(all_text)

        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(full_text)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        lines_count = len(full_text.split('\n'))
        chars_count = len(full_text)

        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –°—Ç—Ä–æ–∫: {lines_count:,}")
        print(f"   –°–∏–º–≤–æ–ª–æ–≤: {chars_count:,}")
        print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {chars_count / 1024:.1f} KB")

        print("\n" + "=" * 70)
        print(f"‚úÖ –£–°–ü–ï–®–ù–û: –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    script_dir = Path(__file__).parent
    project_root = script_dir.parent

    pdf_path = project_root / "–ë–î_–º–∞—à–∏–Ω—ã.pdf"
    output_path = project_root / "output" / "raw_text.txt"

    extract_text_from_pdf(pdf_path, output_path)


if __name__ == "__main__":
    main()
