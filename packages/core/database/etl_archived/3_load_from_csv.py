#!/usr/bin/env python3
"""
ETL Pipeline - Step 3: LOAD
============================
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ output/patterns_clean.csv –≤ PostgreSQL.
–í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã patterns, models, brands!

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python 3_load_from_csv.py              # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    python 3_load_from_csv.py --force      # –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

–†–µ–∑—É–ª—å—Ç–∞—Ç:
    - –¢–∞–±–ª–∏—Ü—ã patterns, models, brands –æ—á–∏—â–µ–Ω—ã
    - –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
"""

import sys
import csv
import asyncio
import argparse
from pathlib import Path
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select, delete, text
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker

from models import Brand, Model, ProductCategory, Pattern, Tenant
from config import config as db_config


class DataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î."""

    def __init__(self, session: AsyncSession, tenant_id: int):
        self.session = session
        self.tenant_id = tenant_id
        self.brand_cache = {}  # brand_name -> Brand
        self.model_cache = {}  # (brand_id, model_name) -> Model
        self.category_cache = {}  # category_code -> ProductCategory

    async def clear_tables(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã patterns, models, brands."""
        print("\nüóëÔ∏è  –û–ß–ò–°–¢–ö–ê –¢–ê–ë–õ–ò–¶")
        print("=" * 70)

        try:
            # –û—á–∏—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ foreign keys)

            # 1. Patterns
            result = await self.session.execute(
                delete(Pattern).where(Pattern.tenant_id == self.tenant_id)
            )
            patterns_deleted = result.rowcount
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π patterns: {patterns_deleted}")

            # 2. Models (—É–¥–∞–ª—è–µ–º –≤—Å–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–±—â–∏–µ)
            result = await self.session.execute(delete(Model))
            models_deleted = result.rowcount
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π models: {models_deleted}")

            # 3. Brands (—É–¥–∞–ª—è–µ–º –≤—Å–µ)
            result = await self.session.execute(delete(Brand))
            brands_deleted = result.rowcount
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π brands: {brands_deleted}")

            await self.session.commit()
            print("\n‚úÖ –¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã")

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            await self.session.rollback()
            raise

    async def get_or_create_brand(self, brand_name: str) -> Brand:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –±—Ä–µ–Ω–¥."""
        if brand_name in self.brand_cache:
            return self.brand_cache[brand_name]

        # –ò—â–µ–º –≤ –ë–î
        stmt = select(Brand).where(Brand.name == brand_name)
        result = await self.session.execute(stmt)
        brand = result.scalar_one_or_none()

        if not brand:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –∏–º–µ–Ω–∏ (URL-friendly –≤–µ—Ä—Å–∏—è)
            slug = brand_name.lower().replace(' ', '-').replace('_', '-')
            brand = Brand(name=brand_name, slug=slug)
            self.session.add(brand)
            await self.session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID

        self.brand_cache[brand_name] = brand
        return brand

    async def get_or_create_model(self, brand: Brand, model_name: str) -> Model:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å."""
        cache_key = (brand.id, model_name)

        if cache_key in self.model_cache:
            return self.model_cache[cache_key]

        # –ò—â–µ–º –≤ –ë–î
        stmt = select(Model).where(
            Model.brand_id == brand.id,
            Model.name == model_name
        )
        result = await self.session.execute(stmt)
        model = result.scalar_one_or_none()

        if not model:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
            model = Model(
                brand_id=brand.id,
                name=model_name
            )
            self.session.add(model)
            await self.session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID

        self.model_cache[cache_key] = model
        return model

    async def get_category(self, category_code: str) -> ProductCategory:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
        if category_code in self.category_cache:
            return self.category_cache[category_code]

        stmt = select(ProductCategory).where(ProductCategory.code == category_code)
        result = await self.session.execute(stmt)
        category = result.scalar_one_or_none()

        if not category:
            raise ValueError(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!")

        self.category_cache[category_code] = category
        return category

    async def load_patterns(self, patterns_data: List[Dict[str, str]]):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–µ–∫–∞–ª–∞ –∏–∑ CSV –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
        print("=" * 70)

        total = len(patterns_data)
        loaded = 0
        errors = 0

        for i, row in enumerate(patterns_data, 1):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥
                brand = await self.get_or_create_brand(row['brand'])

                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
                model = await self.get_or_create_model(brand, row['model'])

                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = await self.get_category(row.get('category', 'eva_mats'))

                # –°–æ–∑–¥–∞–µ–º pattern
                pattern = Pattern(
                    tenant_id=self.tenant_id,
                    model_id=model.id,
                    category_id=category.id,
                    available=row.get('available', 'true').lower() == 'true'
                )

                self.session.add(pattern)
                loaded += 1

                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                if i % 100 == 0:
                    await self.session.commit()
                    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {loaded}/{total} ({loaded/total*100:.1f}%)", end="\r")

            except Exception as e:
                errors += 1
                print(f"\n   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {e}")
                continue

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        await self.session.commit()

        print(f"\n\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   - –£—Å–ø–µ—à–Ω–æ: {loaded}")
        print(f"   - –û—à–∏–±–æ–∫: {errors}")
        print(f"   - –í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {len(self.brand_cache)}")
        print(f"   - –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(self.model_cache)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –≤ PostgreSQL"
    )
    parser.add_argument(
        '--force',
        action='store_true',
        help='–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–ø–∞—Å–Ω–æ!)'
    )

    args = parser.parse_args()

    print("=" * 70)
    print("üì• ETL PIPELINE - STEP 3: LOAD")
    print("=" * 70)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    script_dir = Path(__file__).parent
    project_root = script_dir.parent

    input_path = project_root / "output" / "patterns_clean.csv"

    if not input_path.exists():
        print(f"\n‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python 2_transform_to_csv.py")
        sys.exit(1)

    # –ß–∏—Ç–∞–µ–º CSV
    print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ: {input_path}")
    patterns_data = []
    with open(input_path, 'r', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        patterns_data = list(reader)

    print(f"   –ó–∞–ø–∏—Å–µ–π –≤ CSV: {len(patterns_data)}")

    if not patterns_data:
        print("\n‚ö†Ô∏è  CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π!")
        sys.exit(1)

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if not args.force:
        print("\n" + "‚ö†Ô∏è  " * 20)
        print("   –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è:")
        print("   1. –ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–°–¢–ò–¢ —Ç–∞–±–ª–∏—Ü—ã patterns, models, brands")
        print("   2. –ó–∞–≥—Ä—É–∑–∏—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV")
        print("   3. –≠–¢–û –ù–ï–û–ë–†–ê–¢–ò–ú–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!")
        print("‚ö†Ô∏è  " * 20 + "\n")

        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        if response.lower() not in ['yes', 'y']:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            sys.exit(0)

    # –°–æ–∑–¥–∞–µ–º engine –∏ session
    engine = create_async_engine(db_config.async_database_url, echo=False)
    async_session_factory = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    async with async_session_factory() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º tenant
            stmt = select(Tenant).where(Tenant.slug == "evopoliki")
            result = await session.execute(stmt)
            tenant = result.scalar_one_or_none()

            if not tenant:
                print("\n‚ùå Tenant 'evopoliki' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
                sys.exit(1)

            print(f"\n‚úÖ Tenant: {tenant.name} (id={tenant.id})")

            # –°–æ–∑–¥–∞–µ–º loader
            loader = DataLoader(session, tenant.id)

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await loader.clear_tables()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await loader.load_patterns(patterns_data)

            print("\n" + "=" * 70)
            print("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            print("=" * 70)
            print("\nüéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î!")
            print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç.")

        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
            await session.rollback()
            sys.exit(1)
        finally:
            await engine.dispose()


if __name__ == "__main__":
    asyncio.run(main())
