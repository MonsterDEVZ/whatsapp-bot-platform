#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ PostgreSQL.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é, —á–∏—Å—Ç—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ –ª–µ–∫–∞–ª–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
–≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–∞ Railway.

Author: Claude
Date: 2025-10-17
"""

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Set
import asyncio
try:
    from slugify import slugify
except ImportError:
    # Fallback: –ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug
    def slugify(text: str) -> str:
        return text.lower().replace(" ", "-").replace("_", "-")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker

from core.database.models import (
    Base, Brand, Model, Pattern, ProductCategory, Tenant, BodyType
)


# ============================================================================
# CONFIGURATION
# ============================================================================

# –ü—É—Ç–∏ –∫ JSON —Ñ–∞–π–ª–∞–º
JSON_DIR = Path("/Users/new/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/CarChatbot/xlsx -> json")
JSON_FILES = [
    JSON_DIR / "car_polik_database.json",
    JSON_DIR / "car_polik_database-2.json"
]

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é EVA-–∫–æ–≤—Ä–∏–∫–∏)
DEFAULT_CATEGORY_CODE = "eva_mats"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql+asyncpg://postgres:stispeCxzTCLVnCvVGfoDFPRlBZlKpaL@gondola.proxy.rlwy.net:54660/railway"
)


# ============================================================================
# DATABASE CONNECTION
# ============================================================================

engine = create_async_engine(
    DATABASE_URL,
    echo=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
    pool_pre_ping=True,
)

async_session_maker = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)


# ============================================================================
# DATA LOADING FUNCTIONS
# ============================================================================

def load_json_files() -> List[Dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–æ–∏—Ö JSON —Ñ–∞–π–ª–æ–≤.

    Returns:
        –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤
    """
    all_data = []

    for json_file in JSON_FILES:
        if not json_file.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
            continue

        print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é {json_file.name}...")

        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            all_data.extend(data)
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")

    print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(JSON_FILES)} —Ñ–∞–π–ª–æ–≤\n")

    return all_data


async def clear_database(session: AsyncSession):
    """
    –ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–©–ê–ï–¢ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.

    –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π:
    1. patterns (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç models, categories, tenants)
    2. models (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç brands)
    3. brands
    """
    print("üóëÔ∏è  –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•...")
    print("=" * 60)

    # –£–¥–∞–ª—è–µ–º patterns (–ø–µ—Ä–≤—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—Å–µ–≥–æ)
    result = await session.execute(delete(Pattern))
    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {result.rowcount} –∑–∞–ø–∏—Å–µ–π –∏–∑ patterns")

    # –£–¥–∞–ª—è–µ–º models (–∑–∞–≤–∏—Å—è—Ç –æ—Ç brands)
    result = await session.execute(delete(Model))
    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {result.rowcount} –∑–∞–ø–∏—Å–µ–π –∏–∑ models")

    # –£–¥–∞–ª—è–µ–º brands (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ)
    result = await session.execute(delete(Brand))
    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {result.rowcount} –∑–∞–ø–∏—Å–µ–π –∏–∑ brands")

    await session.commit()
    print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞\n")


async def get_or_create_category(session: AsyncSession) -> ProductCategory:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é EVA-–∫–æ–≤—Ä–∏–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

    Returns:
        ProductCategory –¥–ª—è EVA-–∫–æ–≤—Ä–∏–∫–æ–≤
    """
    stmt = select(ProductCategory).where(ProductCategory.code == DEFAULT_CATEGORY_CODE)
    result = await session.execute(stmt)
    category = result.scalar_one_or_none()

    if not category:
        print(f"‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{DEFAULT_CATEGORY_CODE}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é...")
        category = ProductCategory(
            code=DEFAULT_CATEGORY_CODE,
            name_ru="EVA-–∫–æ–≤—Ä–∏–∫–∏",
            name_kg="EVA-–∫–∏–ª–µ–º—á–µ–ª–µ—Ä",
            sort_order=1,
            active=True
        )
        session.add(category)
        await session.commit()
        await session.refresh(category)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name_ru} (id={category.id})")

    return category


async def get_tenants(session: AsyncSession) -> List[Tenant]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        –°–ø–∏—Å–æ–∫ Tenant –æ–±—ä–µ–∫—Ç–æ–≤
    """
    stmt = select(Tenant).where(Tenant.active == True)
    result = await session.execute(stmt)
    tenants = result.scalars().all()

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tenants)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:")
    for tenant in tenants:
        print(f"   ‚Ä¢ {tenant.name} (slug: {tenant.slug}, id: {tenant.id})")
    print()

    return list(tenants)


async def load_data_to_database(data: List[Dict], session: AsyncSession):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π.

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ brands –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏
    2. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–µ—Ç model
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ tenant —Å–æ–∑–¥–∞–µ—Ç pattern

    Args:
        data: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ JSON
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –í POSTGRESQL...")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤
    category = await get_or_create_category(session)
    tenants = await get_tenants(session)

    if not tenants:
        print("‚ùå –û–®–ò–ë–ö–ê: –í –±–∞–∑–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤!")
        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ tenant –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º brands
    print("üè≠ –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–∏
    unique_brands: Set[str] = set()
    for record in data:
        brand_name = record.get("brand", "").strip()
        if brand_name:
            unique_brands.add(brand_name)

    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(unique_brands)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫")

    # –°–æ–∑–¥–∞–µ–º Brand –∑–∞–ø–∏—Å–∏
    brand_map: Dict[str, Brand] = {}

    for brand_name in sorted(unique_brands):
        brand = Brand(
            name=brand_name,
            name_ru=brand_name,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ
            slug=slugify(brand_name)
        )
        session.add(brand)
        brand_map[brand_name] = brand

    await session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º brand_map —Å ID –∏–∑ –±–∞–∑—ã
    for brand_name, brand in brand_map.items():
        await session.refresh(brand)

    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(brand_map)} –º–∞—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ brands\n")

    # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º models –∏ patterns
    print("üöó –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –ª–µ–∫–∞–ª...")

    models_created = 0
    patterns_created = 0

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö models (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    # –ö–ª—é—á: (brand_id, model_name, year_from, year_to)
    model_cache: Dict[tuple, Model] = {}

    for record in data:
        brand_name = record.get("brand", "").strip() if record.get("brand") else ""
        model_name = record.get("model", "").strip() if record.get("model") else ""
        years = record.get("years")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å null –∏–ª–∏ —Å–ø–∏—Å–æ–∫
        description = record.get("description", "").strip() if record.get("description") else ""

        if not brand_name or not model_name:
            print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –ø—É—Å—Ç—ã–º brand –∏–ª–∏ model: {record}")
            continue

        brand = brand_map.get(brand_name)
        if not brand:
            print(f"   ‚ö†Ô∏è  –ú–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {brand_name}")
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º year_from –∏ year_to –∏–∑ —Å–ø–∏—Å–∫–∞ years
        year_from = None
        year_to = None

        if years and isinstance(years, list) and len(years) > 0:
            try:
                years_int = [int(y) for y in years if y]
                if years_int:
                    year_from = min(years_int)
                    year_to = max(years_int) if len(years_int) > 1 else year_from
            except (ValueError, TypeError):
                pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
        cache_key = (brand.id, model_name, year_from, year_to)

        if cache_key not in model_cache:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Model
            model = Model(
                brand_id=brand.id,
                name=model_name,
                name_ru=model_name,
                year_from=year_from,
                year_to=year_to,
                model_metadata={"description": description} if description else None
            )
            session.add(model)
            models_created += 1

            # –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å model, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è patterns
            await session.flush()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            model_cache[cache_key] = model
        else:
            # –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            model = model_cache[cache_key]

        # –°–æ–∑–¥–∞–µ–º Pattern –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tenant
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ pattern –µ—â–µ –Ω–µ—Ç
        for tenant in tenants:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π pattern
            stmt = select(Pattern).where(
                Pattern.tenant_id == tenant.id,
                Pattern.category_id == category.id,
                Pattern.model_id == model.id
            )
            result = await session.execute(stmt)
            existing_pattern = result.scalar_one_or_none()

            if not existing_pattern:
                pattern = Pattern(
                    tenant_id=tenant.id,
                    category_id=category.id,
                    model_id=model.id,
                    available=True,
                    notes=description if description else None
                )
                session.add(pattern)
                patterns_created += 1

    await session.commit()

    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {models_created} –º–æ–¥–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ models")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {patterns_created} –ª–µ–∫–∞–ª –≤ —Ç–∞–±–ª–∏—Ü–µ patterns")
    print(f"      ({patterns_created // len(tenants)} –ª–µ–∫–∞–ª –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ {len(tenants)} –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤)\n")


async def verify_data(session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
    """
    print("‚úÖ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –î–ê–ù–ù–´–•...")
    print("=" * 60)

    # –°—á–∏—Ç–∞–µ–º brands
    stmt = select(Brand)
    result = await session.execute(stmt)
    brands_count = len(result.scalars().all())
    print(f"   üìä Brands:   {brands_count}")

    # –°—á–∏—Ç–∞–µ–º models
    stmt = select(Model)
    result = await session.execute(stmt)
    models_count = len(result.scalars().all())
    print(f"   üìä Models:   {models_count}")

    # –°—á–∏—Ç–∞–µ–º patterns
    stmt = select(Pattern)
    result = await session.execute(stmt)
    patterns_count = len(result.scalars().all())
    print(f"   üìä Patterns: {patterns_count}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –º–∞—Ä–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–¥–µ–ª–µ–π
    print("\n   üìà –¢–æ–ø-5 –º–∞—Ä–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–¥–µ–ª–µ–π:")

    stmt = select(Brand).join(Model).group_by(Brand.id).order_by(Brand.name)
    result = await session.execute(stmt)
    brands = result.scalars().all()

    brand_stats = []
    for brand in brands:
        stmt = select(Model).where(Model.brand_id == brand.id)
        result = await session.execute(stmt)
        models = result.scalars().all()
        brand_stats.append((brand.name, len(models)))

    brand_stats.sort(key=lambda x: x[1], reverse=True)

    for i, (brand_name, count) in enumerate(brand_stats[:5], 1):
        print(f"      {i}. {brand_name}: {count} –º–æ–¥–µ–ª–µ–π")

    print("\n   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


# ============================================================================
# MAIN FUNCTION
# ============================================================================

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.
    """
    print("\n" + "=" * 60)
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø: JSON ‚Üí PostgreSQL")
    print("=" * 60)
    print(f"üìç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL.split('@')[1]}")  # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    print(f"üìÇ JSON —Ñ–∞–π–ª—ã: {JSON_DIR}")
    print("=" * 60 + "\n")

    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        data = load_json_files()

        if not data:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
            return

        # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with async_session_maker() as session:
            # 3. –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await clear_database(session)

            # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await load_data_to_database(data, session)

            # 5. –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await verify_data(session)

        print("\n" + "=" * 60)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏ –∑–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub")
        print("   2. –î–æ–∂–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ Railway")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ\n")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        await engine.dispose()


if __name__ == "__main__":
    asyncio.run(main())
