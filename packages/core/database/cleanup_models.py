#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ models.
–£–¥–∞–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è.

–ü—Ä–∏–º–µ—Ä: "Kia –†–ò–û" -> "–†–ò–û"

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python cleanup_models.py --dry-run    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    python cleanup_models.py              # –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
"""

import sys
import asyncio
import argparse
from pathlib import Path
from sqlalchemy import select, update, func
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent))

from models import Brand, Model
from config import config as db_config


async def find_models_with_brand_prefix(session: AsyncSession):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (brand, model, cleaned_name)
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã
    brands_stmt = select(Brand)
    brands_result = await session.execute(brands_stmt)
    brands = brands_result.scalars().all()

    models_to_clean = []

    for brand in brands:
        # –ò—â–µ–º –º–æ–¥–µ–ª–∏ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        models_stmt = select(Model).where(Model.brand_id == brand.id)
        models_result = await session.execute(models_stmt)
        models = models_result.scalars().all()

        for model in models:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–µ—Ñ–∏–∫—Å–∞
            prefixes_to_check = [
                f"{brand.name} ",     # "Toyota Camry"
                f"{brand.name}-",     # "Toyota-Camry"
                f"{brand.name}_",     # "Toyota_Camry"
            ]

            for prefix in prefixes_to_check:
                if model.name.startswith(prefix):
                    cleaned_name = model.name[len(prefix):].strip()
                    if cleaned_name:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å —á—Ç–æ-—Ç–æ
                        models_to_clean.append((brand, model, cleaned_name))
                    break

    return models_to_clean


async def cleanup_models(dry_run: bool = True):
    """
    –û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞.

    Args:
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º engine –∏ session
    engine = create_async_engine(db_config.async_database_url, echo=False)
    async_session_factory = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    async with async_session_factory() as session:
        try:
            print("=" * 70)
            print("üîç –ü–û–ò–°–ö –ú–û–î–ï–õ–ï–ô –° –ü–†–ï–§–ò–ö–°–û–ú –ë–†–ï–ù–î–ê")
            print("=" * 70)

            models_to_clean = await find_models_with_brand_prefix(session)

            if not models_to_clean:
                print("\n‚úÖ –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã! –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return

            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(models_to_clean)} –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:\n")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥–∞–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            models_by_brand = {}
            for brand, model, cleaned_name in models_to_clean:
                if brand.name not in models_by_brand:
                    models_by_brand[brand.name] = []
                models_by_brand[brand.name].append((model, cleaned_name))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for brand_name in sorted(models_by_brand.keys()):
                print(f"\nüöó –ë—Ä–µ–Ω–¥: {brand_name}")
                for model, cleaned_name in models_by_brand[brand_name]:
                    print(f"   ‚ùå '{model.name}' ‚Üí ‚úÖ '{cleaned_name}' (id={model.id})")

            if dry_run:
                print("\n" + "=" * 70)
                print("‚ö†Ô∏è  –†–ï–ñ–ò–ú –°–ò–ú–£–õ–Ø–¶–ò–ò (dry-run)")
                print("   –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                print("   –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run")
                print("=" * 70)
                return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            print("\n" + "=" * 70)
            print("‚úèÔ∏è  –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô")
            print("=" * 70)

            updated_count = 0
            for brand, model, cleaned_name in models_to_clean:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
                    stmt = (
                        update(Model)
                        .where(Model.id == model.id)
                        .values(name=cleaned_name)
                    )
                    await session.execute(stmt)
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {brand.name} '{model.name}' ‚Üí '{cleaned_name}'")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ id={model.id}: {e}")

            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()

            print("\n" + "=" * 70)
            print(f"‚úÖ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–û: {updated_count} –∏–∑ {len(models_to_clean)} –º–æ–¥–µ–ª–µ–π")
            print("=" * 70)

        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            await session.rollback()
            raise
        finally:
            await engine.dispose()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞"
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (—Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏)'
    )

    args = parser.parse_args()

    if args.dry_run:
        print("\nüîç –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –°–ò–ú–£–õ–Ø–¶–ò–ò (dry-run)...")
        print("   –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã, –Ω–æ –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n")
    else:
        print("\n‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        print("   –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        if response.lower() not in ['yes', 'y']:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return

    await cleanup_models(dry_run=args.dry_run)


if __name__ == "__main__":
    asyncio.run(main())
