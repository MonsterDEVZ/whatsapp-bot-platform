#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ cleaned_vehicle_data.csv –≤ PostgreSQL:
- –ë—Ä–µ–Ω–¥—ã (brands)
- –¢–∏–ø—ã –∫—É–∑–æ–≤–∞ (body_types)
- –ú–æ–¥–µ–ª–∏ (models)
- –õ–µ–∫–∞–ª–∞ (patterns)
"""

import sys
import argparse
from pathlib import Path
from typing import Dict, Optional
import pandas as pd
from sqlalchemy import create_engine, select
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError

# –î–æ–±–∞–≤–ª—è–µ–º parent directory –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

try:
    from database.models import Base, Brand, BodyType, Model, Tenant, ProductCategory, Pattern
    from database.config import DatabaseConfig
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


def get_or_create_brand(session: Session, name: str) -> Brand:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–µ–Ω–¥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞

    Returns:
        –û–±—ä–µ–∫—Ç Brand
    """
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    stmt = select(Brand).where(Brand.name == name)
    brand = session.scalar(stmt)

    if brand:
        return brand

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    brand = Brand(name=name)
    session.add(brand)
    session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID

    return brand


def get_or_create_body_type(session: Session, slug: str, name: str) -> BodyType:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –∫—É–∑–æ–≤–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        slug: Slug —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞
        name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞

    Returns:
        –û–±—ä–µ–∫—Ç BodyType
    """
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    stmt = select(BodyType).where(BodyType.slug == slug)
    body_type = session.scalar(stmt)

    if body_type:
        return body_type

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    body_type = BodyType(slug=slug, name=name)
    session.add(body_type)
    session.flush()

    return body_type


def import_brands(df: pd.DataFrame, session: Session) -> Dict[str, int]:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∏–∑ DataFrame.

    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        session: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞: brand_id}
    """
    print("\nüè¢ –ò–º–ø–æ—Ä—Ç –±—Ä–µ–Ω–¥–æ–≤...")

    unique_brands = df['brand'].dropna().unique()
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(unique_brands)}")

    brand_map = {}

    for brand_name in sorted(unique_brands):
        brand = get_or_create_brand(session, brand_name)
        brand_map[brand_name] = brand.id

    session.commit()
    print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(brand_map)}")

    return brand_map


def import_body_types(session: Session) -> Dict[Optional[str], int]:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã –∫—É–∑–æ–≤–∞.

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        –°–ª–æ–≤–∞—Ä—å {slug: body_type_id}
    """
    print("\nüöô –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞...")

    body_types_data = [
        ("sedan", "–°–µ–¥–∞–Ω"),
        ("suv", "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫/–ö—Ä–æ—Å—Å–æ–≤–µ—Ä"),
        ("minivan", "–ú–∏–Ω–∏–≤—ç–Ω"),
        ("hatchback", "–•—ç—Ç—á–±–µ–∫"),
        ("wagon", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª"),
        ("coupe", "–ö—É–ø–µ"),
        ("convertible", "–ö–∞–±—Ä–∏–æ–ª–µ—Ç"),
        ("pickup", "–ü–∏–∫–∞–ø"),
        ("unknown", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
    ]

    body_type_map = {}

    for slug, name in body_types_data:
        body_type = get_or_create_body_type(session, slug, name)
        body_type_map[slug] = body_type.id

    # –î–æ–±–∞–≤–ª—è–µ–º None -> unknown –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–µ–∑ —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞
    body_type_map[None] = body_type_map["unknown"]

    session.commit()
    print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞: {len(body_types_data)}")

    return body_type_map


def import_models(
    df: pd.DataFrame,
    session: Session,
    brand_map: Dict[str, int],
    body_type_map: Dict[Optional[str], int]
) -> Dict[tuple, int]:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        session: –°–µ—Å—Å–∏—è –ë–î
        brand_map: –ú–∞–ø–ø–∏–Ω–≥ –±—Ä–µ–Ω–¥–æ–≤
        body_type_map: –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å {(brand, model, year_from, year_to): model_id}
    """
    print("\nüöó –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")

    model_map = {}
    imported = 0
    skipped = 0

    for idx, row in df.iterrows():
        brand_name = row['brand']
        model_name = row['model']
        year_from = int(row['year_from']) if pd.notna(row['year_from']) else None
        year_to = int(row['year_to']) if pd.notna(row['year_to']) else None
        body_type_slug = row['body_type'] if pd.notna(row['body_type']) else None

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if pd.isna(brand_name) or pd.isna(model_name):
            skipped += 1
            continue

        # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–µ–Ω–¥–∞ –∏ —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞
        brand_id = brand_map.get(brand_name)
        body_type_id = body_type_map.get(body_type_slug)

        if not brand_id:
            print(f"   ‚ö†Ô∏è  –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {brand_name}")
            skipped += 1
            continue

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        try:
            model = Model(
                brand_id=brand_id,
                name=model_name,
                year_from=year_from,
                year_to=year_to,
                body_type_id=body_type_id
            )
            session.add(model)
            session.flush()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞–ø–ø–∏–Ω–≥
            key = (brand_name, model_name, year_from, year_to)
            model_map[key] = model.id

            imported += 1

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
            if imported % 100 == 0:
                print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported}...", end='\r')

        except IntegrityError:
            session.rollback()
            # –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
            stmt = select(Model).where(
                Model.brand_id == brand_id,
                Model.name == model_name,
                Model.year_from == year_from,
                Model.year_to == year_to
            )
            existing_model = session.scalar(stmt)
            if existing_model:
                key = (brand_name, model_name, year_from, year_to)
                model_map[key] = existing_model.id
            skipped += 1

    session.commit()
    print(f"\n   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {imported}")
    if skipped > 0:
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {skipped}")

    return model_map


def import_patterns(
    df: pd.DataFrame,
    session: Session,
    tenant_slug: str,
    category_slug: str,
    model_map: Dict[tuple, int]
) -> int:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª–µ–∫–∞–ª–∞ (patterns) –¥–ª—è –º–æ–¥–µ–ª–µ–π.

    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        session: –°–µ—Å—Å–∏—è –ë–î
        tenant_slug: Slug –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
        category_slug: Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        model_map: –ú–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–µ–∫–∞–ª
    """
    print(f"\nüìê –ò–º–ø–æ—Ä—Ç –ª–µ–∫–∞–ª –¥–ª—è tenant={tenant_slug}, category={category_slug}...")

    # –ü–æ–ª—É—á–∞–µ–º tenant
    stmt = select(Tenant).where(Tenant.slug == tenant_slug)
    tenant = session.scalar(stmt)

    if not tenant:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: Tenant '{tenant_slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/seed_data.py")
        return 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    stmt = select(ProductCategory).where(ProductCategory.slug == category_slug)
    category = session.scalar(stmt)

    if not category:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/seed_data.py")
        return 0

    imported = 0
    skipped = 0

    for idx, row in df.iterrows():
        brand_name = row['brand']
        model_name = row['model']
        year_from = int(row['year_from']) if pd.notna(row['year_from']) else None
        year_to = int(row['year_to']) if pd.notna(row['year_to']) else None

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if pd.isna(brand_name) or pd.isna(model_name):
            skipped += 1
            continue

        # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–∏
        key = (brand_name, model_name, year_from, year_to)
        model_id = model_map.get(key)

        if not model_id:
            skipped += 1
            continue

        # –°–æ–∑–¥–∞–µ–º –ª–µ–∫–∞–ª–æ
        try:
            pattern = Pattern(
                tenant_id=tenant.id,
                category_id=category.id,
                model_id=model_id,
                available=True,
                notes=f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ë–î_–º–∞—à–∏–Ω—ã.pdf"
            )
            session.add(pattern)
            imported += 1

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
            if imported % 100 == 0:
                print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported}...", end='\r')

        except IntegrityError:
            session.rollback()
            skipped += 1

    session.commit()
    print(f"\n   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ª–µ–∫–∞–ª: {imported}")
    if skipped > 0:
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {skipped}")

    return imported


def run_full_import(csv_path: str, tenant_slug: str, category_slug: str = "eva_mats"):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö.

    Args:
        csv_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        tenant_slug: Slug –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
        category_slug: Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    print("=" * 60)
    print("üì• –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –í –ë–ê–ó–£")
    print("=" * 60)

    print(f"\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑: {csv_path}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv(csv_path, encoding='utf-8-sig')
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_config = DatabaseConfig()
    engine = create_engine(db_config.sync_database_url, echo=False)

    print(f"\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_config.host}:{db_config.port}/{db_config.database}")

    with Session(engine) as session:
        # –≠—Ç–∞–ø 1: –ò–º–ø–æ—Ä—Ç –±—Ä–µ–Ω–¥–æ–≤
        brand_map = import_brands(df, session)

        # –≠—Ç–∞–ø 2: –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞
        body_type_map = import_body_types(session)

        # –≠—Ç–∞–ø 3: –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
        model_map = import_models(df, session, brand_map, body_type_map)

        # –≠—Ç–∞–ø 4: –ò–º–ø–æ—Ä—Ç –ª–µ–∫–∞–ª
        patterns_count = import_patterns(df, session, tenant_slug, category_slug, model_map)

    print("\n" + "=" * 60)
    print("‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
    print("=" * 60)

    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ë—Ä–µ–Ω–¥–æ–≤:       {len(brand_map)}")
    print(f"   –¢–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞:  {len(body_type_map) - 1}")  # -1 –¥–ª—è None
    print(f"   –ú–æ–¥–µ–ª–µ–π:       {len(model_map)}")
    print(f"   –õ–µ–∫–∞–ª:         {patterns_count}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    parser = argparse.ArgumentParser(
        description="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    )
    parser.add_argument(
        "--tenant",
        type=str,
        default="evopoliki",
        help="Slug –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: evopoliki)"
    )
    parser.add_argument(
        "--category",
        type=str,
        default="eva_mats",
        help="Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: eva_mats)"
    )
    parser.add_argument(
        "--csv",
        type=str,
        help="–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    )

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ CSV
    if args.csv:
        csv_path = Path(args.csv)
    else:
        project_root = Path(__file__).parent.parent.parent
        csv_path = project_root / "database" / "data" / "cleaned_vehicle_data.csv"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not csv_path.exists():
        print(f"\n‚ùå –û—à–∏–±–∫–∞: CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {csv_path}")
        print(f"\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/clean_data.py")
        sys.exit(1)

    try:
        run_full_import(str(csv_path), args.tenant, args.category)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
