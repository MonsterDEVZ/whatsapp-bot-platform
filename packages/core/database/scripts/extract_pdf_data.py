#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ PDF —Ñ–∞–π–ª–∞.

–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î_–º–∞—à–∏–Ω—ã.pdf –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç pdfplumber –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü.
"""

import sys
import os
from pathlib import Path
from typing import List, Dict, Any
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º parent directory –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

try:
    import pdfplumber
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pdfplumber")
    sys.exit(1)


def extract_tables_from_pdf(pdf_path: str) -> pd.DataFrame:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF —Ñ–∞–π–ª–∞.

    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É

    Returns:
        DataFrame —Å–æ –≤—Å–µ–º–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    all_data: List[Dict[str, Any]] = []

    print(f"üìÑ –û—Ç–∫—Ä—ã–≤–∞—é PDF —Ñ–∞–π–ª: {pdf_path}")

    with pdfplumber.open(pdf_path) as pdf:
        total_pages = len(pdf.pages)
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")

        for page_num, page in enumerate(pdf.pages, start=1):
            print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}/{total_pages}...", end="\r")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            table = page.extract_table()

            if not table:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            start_row = 1 if page_num == 1 else 0

            for row in table[start_row:]:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏
                if not row or not row[0] or row[0].strip().lower() in ['‚Ññ', '–ø/–ø', '']:
                    continue

                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç None –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                cleaned_row = [cell.strip() if cell else '' for cell in row]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –º–æ–¥–µ–ª–∏
                if len(cleaned_row) < 3 or not cleaned_row[2]:
                    continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                record = {
                    'id': cleaned_row[0] if len(cleaned_row) > 0 else '',
                    'brand': cleaned_row[1] if len(cleaned_row) > 1 else '',
                    'model': cleaned_row[2] if len(cleaned_row) > 2 else '',
                    'year': cleaned_row[3] if len(cleaned_row) > 3 else '',
                    'description': cleaned_row[4] if len(cleaned_row) > 4 else ''
                }

                all_data.append(record)

        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    df = pd.DataFrame(all_data)
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")

    return df


def validate_data(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π DataFrame
    """
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")

    initial_count = len(df)

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df = df.dropna(how='all')

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = df.duplicated(subset=['brand', 'model', 'year'], keep='first').sum()
    if duplicates > 0:
        print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
        df = df.drop_duplicates(subset=['brand', 'model', 'year'], keep='first')

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –º–æ–¥–µ–ª–∏
    df = df[df['model'].str.strip() != '']

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
    brands_count = df['brand'].nunique()
    print(f"  üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {brands_count}")

    # –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–¥–µ–ª–µ–π
    top_brands = df['brand'].value_counts().head(5)
    print("\n  üèÜ –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤:")
    for brand, count in top_brands.items():
        print(f"     {brand}: {count} –º–æ–¥–µ–ª–µ–π")

    removed = initial_count - len(df)
    if removed > 0:
        print(f"\n  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {removed}")

    print(f"  ‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {len(df)}")

    return df


def save_to_csv(df: pd.DataFrame, output_path: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ CSV —Ñ–∞–π–ª.

    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å UTF-8 BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
    df.to_csv(output_path, index=False, encoding='utf-8-sig')

    print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
    print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(output_path) / 1024:.1f} KB")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    print("=" * 60)
    print("üöó –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ú–û–î–ï–õ–Ø–• –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô –ò–ó PDF")
    print("=" * 60)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    project_root = Path(__file__).parent.parent.parent
    pdf_path = project_root / "–¢–ó" / "–ë–î_–º–∞—à–∏–Ω—ã.pdf"
    output_path = project_root / "database" / "data" / "raw_vehicle_data.csv"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–∞
    if not pdf_path.exists():
        print(f"\n‚ùå –û—à–∏–±–∫–∞: PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {pdf_path}")
        sys.exit(1)

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = extract_tables_from_pdf(str(pdf_path))

        if df.empty:
            print("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF")
            sys.exit(1)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        df = validate_data(df)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        save_to_csv(df, str(output_path))

        print("\n" + "=" * 60)
        print("‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        print("=" * 60)
        print(f"\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python scripts/clean_data.py")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
