#!/usr/bin/env python3
"""
–ú–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.

–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
1. –°–æ–∑–¥–∞–Ω–∏–µ seed data (tenants, categories, options)
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF
3. –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
4. –ò–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

–£–¥–æ–±–µ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∞.
"""

import sys
import argparse
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º parent directory –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))


def run_command(module_name: str, description: str) -> bool:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Python –º–æ–¥—É–ª—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏.

    Args:
        module_name: –ò–º—è –º–æ–¥—É–ª—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    print("\n" + "=" * 70)
    print(f"‚ñ∂Ô∏è  {description}")
    print("=" * 70)

    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
        module = __import__(f"scripts.{module_name}", fromlist=['main'])

        # –ó–∞–ø—É—Å–∫–∞–µ–º main() —Ñ—É–Ω–∫—Ü–∏—é
        module.main()

        print(f"\n‚úÖ {description} - –ó–ê–í–ï–†–®–ï–ù–û\n")
        return True

    except Exception as e:
        print(f"\n‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"   {e}")
        import traceback
        traceback.print_exc()
        return False


def check_prerequisites() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.

    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –û–ö, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...\n")

    project_root = Path(__file__).parent.parent.parent
    issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        from database.config import DatabaseConfig
        from sqlalchemy import create_engine, text

        db_config = DatabaseConfig()
        engine = create_engine(db_config.sync_database_url, echo=False)

        with engine.connect() as conn:
            result = conn.execute(text("SELECT version()"))
            version = result.scalar()
            print(f"   ‚úÖ PostgreSQL: {version[:50]}...")

    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
    try:
        from database.config import DatabaseConfig
        from sqlalchemy import create_engine, text, inspect

        db_config = DatabaseConfig()
        engine = create_engine(db_config.sync_database_url, echo=False)

        inspector = inspect(engine)
        tables = inspector.get_table_names()

        expected_tables = [
            'tenants', 'brands', 'body_types', 'models',
            'product_categories', 'product_options', 'patterns', 'prices'
        ]

        missing_tables = [t for t in expected_tables if t not in tables]

        if missing_tables:
            issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            issues.append("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: alembic upgrade head")
        else:
            print(f"   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏: –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã ({len(tables)} —Ç–∞–±–ª–∏—Ü)")

    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: PDF —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    pdf_path = project_root / "–¢–ó" / "–ë–î_–º–∞—à–∏–Ω—ã.pdf"
    if pdf_path.exists():
        size_mb = pdf_path.stat().st_size / 1024 / 1024
        print(f"   ‚úÖ PDF —Ñ–∞–π–ª: –Ω–∞–π–¥–µ–Ω ({size_mb:.1f} MB)")
    else:
        issues.append(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
    required_packages = [
        'sqlalchemy', 'alembic', 'pandas', 'pdfplumber',
        'psycopg2', 'asyncpg', 'pydantic'
    ]

    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)

    if missing_packages:
        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        issues.append("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
    else:
        print(f"   ‚úÖ Python –ø–∞–∫–µ—Ç—ã: –í—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ({len(required_packages)} –ø–∞–∫–µ—Ç–æ–≤)")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print()

    if issues:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n")
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")
        print("\n–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        return False

    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    parser = argparse.ArgumentParser(
        description="–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è evopoliki
  python scripts/run_full_import.py --tenant evopoliki

  # –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è five_deluxe
  python scripts/run_full_import.py --tenant five_deluxe

  # –¢–æ–ª—å–∫–æ seed data (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π)
  python scripts/run_full_import.py --seed-only

  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å seed data (–µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω)
  python scripts/run_full_import.py --skip-seed --tenant evopoliki

  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF (–µ—Å–ª–∏ CSV —É–∂–µ –µ—Å—Ç—å)
  python scripts/run_full_import.py --skip-extract --tenant evopoliki
        """
    )

    parser.add_argument(
        "--tenant",
        type=str,
        default="evopoliki",
        help="Slug –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: evopoliki)"
    )

    parser.add_argument(
        "--category",
        type=str,
        default="eva_mats",
        help="Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: eva_mats)"
    )

    parser.add_argument(
        "--skip-seed",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ seed data"
    )

    parser.add_argument(
        "--skip-extract",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ PDF (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CSV)"
    )

    parser.add_argument(
        "--skip-clean",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π cleaned CSV)"
    )

    parser.add_argument(
        "--seed-only",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å seed data (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π)"
    )

    parser.add_argument(
        "--no-check",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
    )

    args = parser.parse_args()

    print("=" * 70)
    print("üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –í –ë–ê–ó–£")
    print("=" * 70)
    print(f"\nTenant:   {args.tenant}")
    print(f"Category: {args.category}\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    if not args.no_check:
        if not check_prerequisites():
            sys.exit(1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã sys.argv
    original_argv = sys.argv.copy()

    success = True

    # –≠—Ç–∞–ø 1: Seed data
    if not args.skip_seed:
        sys.argv = [original_argv[0]]  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not run_command("seed_data", "–≠—Ç–∞–ø 1/4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Seed Data)"):
            success = False

        if args.seed_only:
            print("\n" + "=" * 70)
            print("‚úÖ SEED DATA –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û")
            print("=" * 70)
            print("\n–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print(f"  python scripts/run_full_import.py --skip-seed --tenant {args.tenant}")
            return

    else:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –°–æ–∑–¥–∞–Ω–∏–µ seed data (--skip-seed)")

    if not success:
        print("\n‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ")
        sys.exit(1)

    # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ PDF
    if not args.skip_extract:
        sys.argv = [original_argv[0]]
        if not run_command("extract_pdf_data", "–≠—Ç–∞–ø 2/4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF"):
            success = False
    else:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ PDF (--skip-extract)")

    if not success:
        print("\n‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ")
        sys.exit(1)

    # –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not args.skip_clean:
        sys.argv = [original_argv[0]]
        if not run_command("clean_data", "–≠—Ç–∞–ø 3/4: –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"):
            success = False
    else:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (--skip-clean)")

    if not success:
        print("\n‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ")
        sys.exit(1)

    # –≠—Ç–∞–ø 4: –ò–º–ø–æ—Ä—Ç –≤ –ë–î
    sys.argv = [original_argv[0], "--tenant", args.tenant, "--category", args.category]

    if not run_command("import_to_database", f"–≠—Ç–∞–ø 4/4: –ò–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (tenant={args.tenant})"):
        success = False

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sys.argv
    sys.argv = original_argv

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    if success:
        print("üéâ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 70)

        print("\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:")
        if not args.skip_seed:
            print("   1. ‚úÖ Seed data —Å–æ–∑–¥–∞–Ω")
        if not args.skip_extract:
            print("   2. ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ PDF")
        if not args.skip_clean:
            print("   3. ‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("   4. ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑—É")

        print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("   psql -U postgres -d car_chatbot")
        print("   SELECT COUNT(*) FROM models;")
        print("   SELECT COUNT(*) FROM patterns WHERE tenant_id = (SELECT id FROM tenants WHERE slug = '" + args.tenant + "');")

        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ tenant:")
        print(f"      python scripts/run_full_import.py --skip-seed --skip-extract --skip-clean --tenant five_deluxe")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ API –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ fuzzy search –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")

    else:
        print("‚ùå –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
        print("=" * 70)
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–æ–∫")

    print()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
