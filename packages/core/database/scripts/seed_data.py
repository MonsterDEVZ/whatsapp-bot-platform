#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (seed data) –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–°–æ–∑–¥–∞–µ—Ç:
- Tenants (–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã): evopoliki, five_deluxe
- ProductCategories (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
- ProductOptions (–æ–ø—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
- BotTexts (—Ç–µ–∫—Å—Ç—ã –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tenant)
"""

import sys
from pathlib import Path
from sqlalchemy import create_engine, select
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError

# –î–æ–±–∞–≤–ª—è–µ–º parent directory –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

try:
    from database.models import Base, Tenant, ProductCategory, ProductOption, BotText
    from database.config import DatabaseConfig
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


def create_tenants(session: Session) -> dict[str, int]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤.

    Returns:
        –°–ª–æ–≤–∞—Ä—å {slug: tenant_id}
    """
    print("\nüè¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤...")

    tenants_data = [
        {
            "slug": "evopoliki",
            "name": "EVOPOLIKI",
            "contacts": {
                "phone": "+996 555 123 456",
                "telegram": "@evopoliki",
                "instagram": "@evopoliki"
            },
            "settings": {
                "language": "ru",
                "currency": "KGS",
                "timezone": "Asia/Bishkek"
            }
        },
        {
            "slug": "five_deluxe",
            "name": "5Deluxe",
            "contacts": {
                "phone": "+996 555 789 012",
                "telegram": "@5deluxe",
                "instagram": "@5deluxe"
            },
            "settings": {
                "language": "ru",
                "currency": "KGS",
                "timezone": "Asia/Bishkek"
            }
        }
    ]

    tenant_map = {}

    for data in tenants_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        stmt = select(Tenant).where(Tenant.slug == data["slug"])
        existing = session.scalar(stmt)

        if existing:
            print(f"   ‚ö†Ô∏è  Tenant '{data['slug']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing.id})")
            tenant_map[data["slug"]] = existing.id
            continue

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        tenant = Tenant(**data)
        session.add(tenant)
        session.flush()

        tenant_map[data["slug"]] = tenant.id
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω tenant: {data['name']} (ID: {tenant.id})")

    session.commit()
    print(f"   –í—Å–µ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤: {len(tenant_map)}")

    return tenant_map


def create_product_categories(session: Session) -> dict[str, int]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

    Returns:
        –°–ª–æ–≤–∞—Ä—å {slug: category_id}
    """
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")

    categories_data = [
        {
            "code": "eva_mats",
            "name_ru": "EVA –∫–æ–≤—Ä–∏–∫–∏",
            "description_ru": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ EVA –∫–æ–≤—Ä–∏–∫–∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞"
        },
        {
            "code": "seat_covers",
            "name_ru": "–ß–µ—Ö–ª—ã –∏–∑ —ç–∫–æ–∫–æ–∂–∏",
            "description_ru": "–ß–µ—Ö–ª—ã –Ω–∞ —Å–∏–¥–µ–Ω—å—è –∏–∑ —ç–∫–æ–∫–æ–∂–∏"
        },
        {
            "code": "5d_mats",
            "name_ru": "5D –∫–æ–≤—Ä–∏–∫–∏",
            "description_ru": "–û–±—ä–µ–º–Ω—ã–µ 5D –∫–æ–≤—Ä–∏–∫–∏"
        },
        {
            "code": "trunk_mats",
            "name_ru": "–ö–æ–≤—Ä–∏–∫–∏ –≤ –±–∞–≥–∞–∂–Ω–∏–∫",
            "description_ru": "–ó–∞—â–∏—Ç–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è –±–∞–≥–∞–∂–Ω–∏–∫–∞"
        }
    ]

    category_map = {}

    for data in categories_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        stmt = select(ProductCategory).where(ProductCategory.code == data["code"])
        existing = session.scalar(stmt)

        if existing:
            print(f"   ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{data['code']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing.id})")
            category_map[data["code"]] = existing.id
            continue

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        category = ProductCategory(**data)
        session.add(category)
        session.flush()

        category_map[data["code"]] = category.id
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {data['name_ru']} (ID: {category.id})")

    session.commit()
    print(f"   –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_map)}")

    return category_map


def create_product_options(session: Session, category_map: dict[str, int]) -> int:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

    Args:
        category_map: –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
    """
    print("\n‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")

    options_data = [
        # –û–ø—Ü–∏–∏ –¥–ª—è EVA –∫–æ–≤—Ä–∏–∫–æ–≤
        {
            "category_id": category_map.get("eva_mats"),
            "slug": "with_borders",
            "name": "–° –±–æ—Ä—Ç–∞–º–∏",
            "description": "EVA –∫–æ–≤—Ä–∏–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ –±–æ—Ä—Ç–∞–º–∏"
        },
        {
            "category_id": category_map.get("eva_mats"),
            "slug": "third_row",
            "name": "3-–π —Ä—è–¥",
            "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è 3-–≥–æ —Ä—è–¥–∞ —Å–∏–¥–µ–Ω–∏–π"
        },
        {
            "category_id": category_map.get("eva_mats"),
            "slug": "tunnel",
            "name": "–ü–µ—Ä–µ–º—ã—á–∫–∞ (—Ç–æ–Ω–Ω–µ–ª—å)",
            "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º—ã—á–∫–∞ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω–Ω–µ–ª—å"
        },
        # –û–ø—Ü–∏–∏ –¥–ª—è —á–µ—Ö–ª–æ–≤
        {
            "category_id": category_map.get("seat_covers"),
            "slug": "eco_leather_standard",
            "name": "–≠–∫–æ–∫–æ–∂–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç",
            "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —ç–∫–æ–∫–æ–∂–∞"
        },
        {
            "category_id": category_map.get("seat_covers"),
            "slug": "eco_leather_premium",
            "name": "–≠–∫–æ–∫–æ–∂–∞ –ø—Ä–µ–º–∏—É–º",
            "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–∫–æ–∂–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"
        },
        {
            "category_id": category_map.get("seat_covers"),
            "slug": "perforated",
            "name": "–ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è",
            "description": "–ß–µ—Ö–ª—ã —Å –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–µ–π –¥–ª—è –ª—É—á—à–µ–π –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏"
        },
        {
            "category_id": category_map.get("seat_covers"),
            "slug": "heating",
            "name": "–° –ø–æ–¥–æ–≥—Ä–µ–≤–æ–º",
            "description": "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–¥–æ–≥—Ä–µ–≤ —Å–∏–¥–µ–Ω–∏–π"
        },
        # –û–ø—Ü–∏–∏ –¥–ª—è 5D –∫–æ–≤—Ä–∏–∫–æ–≤
        {
            "category_id": category_map.get("5d_mats"),
            "slug": "beige_color",
            "name": "–¶–≤–µ—Ç: –±–µ–∂–µ–≤—ã–π",
            "description": "5D –∫–æ–≤—Ä–∏–∫–∏ –±–µ–∂–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞"
        },
        {
            "category_id": category_map.get("5d_mats"),
            "slug": "black_color",
            "name": "–¶–≤–µ—Ç: —á–µ—Ä–Ω—ã–π",
            "description": "5D –∫–æ–≤—Ä–∏–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞"
        },
        {
            "category_id": category_map.get("5d_mats"),
            "slug": "gray_color",
            "name": "–¶–≤–µ—Ç: —Å–µ—Ä—ã–π",
            "description": "5D –∫–æ–≤—Ä–∏–∫–∏ —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞"
        },
    ]

    created = 0

    for data in options_data:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if not data["category_id"]:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        stmt = select(ProductOption).where(
            ProductOption.category_id == data["category_id"],
            ProductOption.slug == data["slug"]
        )
        existing = session.scalar(stmt)

        if existing:
            print(f"   ‚ö†Ô∏è  –û–ø—Ü–∏—è '{data['slug']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            continue

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        option = ProductOption(**data)
        session.add(option)
        created += 1

    session.commit()
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–ø—Ü–∏–π: {created}")

    return created


def create_bot_texts(session: Session, tenant_map: dict[str, int]) -> int:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tenant.

    Args:
        tenant_map: –ú–∞–ø–ø–∏–Ω–≥ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    """
    print("\nüí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞...")

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è EVOPOLIKI
    evopoliki_texts = [
        {
            "tenant_id": tenant_map.get("evopoliki"),
            "key": "welcome",
            "language": "ru",
            "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EVOPOLIKI! üöó\n\n–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö EVA –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ —á–µ—Ö–ª–æ–≤ –∏–∑ —ç–∫–æ–∫–æ–∂–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        },
        {
            "tenant_id": tenant_map.get("evopoliki"),
            "key": "ask_brand",
            "language": "ru",
            "text": "–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
        },
        {
            "tenant_id": tenant_map.get("evopoliki"),
            "key": "ask_model",
            "language": "ru",
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"
        },
        {
            "tenant_id": tenant_map.get("evopoliki"),
            "key": "ask_year",
            "language": "ru",
            "text": "–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:"
        },
        {
            "tenant_id": tenant_map.get("evopoliki"),
            "key": "pattern_available",
            "language": "ru",
            "text": "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –õ–µ–∫–∞–ª–æ –Ω–∞ –≤–∞—à—É –º–æ–¥–µ–ª—å –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:"
        },
        {
            "tenant_id": tenant_map.get("evopoliki"),
            "key": "pattern_not_available",
            "language": "ru",
            "text": "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–µ–∫–∞–ª–æ –Ω–∞ –≤–∞—à—É –º–æ–¥–µ–ª—å –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–æ–≥–¥–∞ –ª–µ–∫–∞–ª–æ –ø–æ—è–≤–∏—Ç—Å—è."
        },
    ]

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è 5Deluxe
    five_deluxe_texts = [
        {
            "tenant_id": tenant_map.get("five_deluxe"),
            "key": "welcome",
            "language": "ru",
            "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 5Deluxe! üåü\n\n–ü—Ä–µ–º–∏—É–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n‚Ä¢ EVA –∫–æ–≤—Ä–∏–∫–∏\n‚Ä¢ 5D –∫–æ–≤—Ä–∏–∫–∏\n‚Ä¢ –ß–µ—Ö–ª—ã –∏–∑ —ç–∫–æ–∫–æ–∂–∏\n\n–ù–∞—á–Ω–µ–º –ø–æ–¥–±–æ—Ä?"
        },
        {
            "tenant_id": tenant_map.get("five_deluxe"),
            "key": "ask_brand",
            "language": "ru",
            "text": "–ö–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å? –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É:"
        },
        {
            "tenant_id": tenant_map.get("five_deluxe"),
            "key": "ask_model",
            "language": "ru",
            "text": "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"
        },
    ]

    created = 0

    for texts_list in [evopoliki_texts, five_deluxe_texts]:
        for data in texts_list:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ tenant –Ω–µ –Ω–∞–π–¥–µ–Ω
            if not data["tenant_id"]:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            stmt = select(BotText).where(
                BotText.tenant_id == data["tenant_id"],
                BotText.key == data["key"],
                BotText.language == data["language"]
            )
            existing = session.scalar(stmt)

            if existing:
                continue

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            bot_text = BotText(**data)
            session.add(bot_text)
            created += 1

    session.commit()
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {created}")

    return created


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    print("=" * 60)
    print("üå± –°–û–ó–î–ê–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• (SEED DATA)")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_config = DatabaseConfig()
    engine = create_engine(db_config.sync_database_url, echo=False)

    print(f"\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_config.host}:{db_config.port}/{db_config.database}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        with engine.connect() as conn:
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print("2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        print("3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("4. –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (alembic upgrade head)")
        sys.exit(1)

    with Session(engine) as session:
        # –°–æ–∑–¥–∞–µ–º –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤
        tenant_map = create_tenants(session)

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        category_map = create_product_categories(session)

        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        # TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É (code, name_ru)
        # options_count = create_product_options(session, category_map)
        options_count = 0

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—ã –±–æ—Ç–∞
        # TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É
        # texts_count = create_bot_texts(session, tenant_map)
        texts_count = 0

    print("\n" + "=" * 60)
    print("‚úÖ SEED DATA –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û")
    print("=" * 60)

    print(f"\nüìä –ò—Ç–æ–≥–æ:")
    print(f"   –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:        {len(tenant_map)}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π:          {len(category_map)}")
    print(f"   –û–ø—Ü–∏–π:              {options_count}")
    print(f"   –¢–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞:       {texts_count}")

    print(f"\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö:")
    print(f"  python scripts/import_to_database.py --tenant evopoliki")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
