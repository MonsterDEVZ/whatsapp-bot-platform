"""
WhatsApp Gateway - FastAPI –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç GreenAPI.

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WhatsApp –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö,
–∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â–µ–µ —è–¥—Ä–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Config, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional
import logging
from contextlib import asynccontextmanager

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ core (–í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–µ—Ä–≤—ã–º!)
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.responses import JSONResponse
import httpx
from dotenv import load_dotenv

from sqlalchemy.ext.asyncio import AsyncSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª—ã –∏–∑ tenant-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
# –í production (Railway) –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ UI
apps_dir = project_root / "apps"
for tenant_dir in ["telegram/evopoliki", "telegram/five_deluxe"]:
    env_path = apps_dir / tenant_dir / ".env"
    if env_path.exists():
        load_dotenv(env_path)
        logger.info(f"Loaded .env from {env_path}")
    else:
        logger.info(f".env file not found at {env_path}, using environment variables")

from packages.core.config import Config
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession as SQLAsyncSession
from sqlalchemy import text
from packages.core.memory import init_memory, get_memory
from packages.core.ai.assistant import AssistantManager, get_or_create_thread
from packages.core.ai.response_parser import (
    detect_response_type,
    extract_order_data,
    format_response_for_platform,
    clean_text_for_whatsapp
)
from packages.core.utils.category_mapper import get_category_name

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from .state_manager import get_state, get_user_data, WhatsAppState, set_state, update_user_data
from . import whatsapp_handlers

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
from .tenant_handlers import evopoliki_handler, five_deluxe_handler

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å AssistantManager –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tenant
# –§–æ—Ä–º–∞—Ç: {tenant_slug: AssistantManager}
tenant_assistant_managers: Dict[str, AssistantManager] = {}

# ============================================================================
# TENANT HANDLERS DISPATCHER
# ============================================================================

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
# –ö–ª—é—á: tenant_slug, –ó–Ω–∞—á–µ–Ω–∏–µ: —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
TENANT_MENU_HANDLERS = {
    'evopoliki': evopoliki_handler.handle_evopoliki_menu,
    'five_deluxe': five_deluxe_handler.handle_5deluxe_menu,
}

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
TENANT_MESSAGE_HANDLERS = {
    'evopoliki': None,  # evopoliki –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    'five_deluxe': five_deluxe_handler.handle_5deluxe_message,
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ë–î (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ lifespan)
db_engine = None
db_session_factory = None


# ============================================================================
# LIFESPAN MANAGER
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.
    """
    global db_engine, db_session_factory

    # Startup
    logger.info("üöÄ Starting WhatsApp Gateway...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ DATABASE_URL
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º postgresql:// –≤ postgresql+asyncpg:// –¥–ª—è async engine
    if database_url.startswith("postgresql://"):
        database_url = database_url.replace("postgresql://", "postgresql+asyncpg://", 1)

    # –°–æ–∑–¥–∞–µ–º async engine
    db_engine = create_async_engine(
        database_url,
        echo=False,  # –û—Ç–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è production
        pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        pool_size=5,
        max_overflow=10
    )

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
    db_session_factory = async_sessionmaker(
        db_engine,
        class_=SQLAsyncSession,
        expire_on_commit=False
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        async with db_engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DialogMemory (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö tenant)
    dialog_memory = init_memory(max_messages=6)
    logger.info("‚úÖ DialogMemory initialized")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ tenant –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö AssistantManager
    load_tenant_configs()
    logger.info("‚úÖ WhatsApp Gateway is ready!")

    yield

    # Shutdown
    logger.info("üõë Shutting down WhatsApp Gateway...")
    if db_engine:
        await db_engine.dispose()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title="WhatsApp Gateway",
    description="Multi-tenant WhatsApp bot gateway using GreenAPI",
    version="1.0.0",
    lifespan=lifespan
)


# ============================================================================
# DATABASE SESSION DEPENDENCY
# ============================================================================

async def get_session():
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ FastAPI endpoints —á–µ—Ä–µ–∑ Depends(get_session).
    """
    if db_session_factory is None:
        raise RuntimeError(
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. "
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ."
        )

    async with db_session_factory() as session:
        yield session


# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–ù–ê–ù–¢–û–í
# ============================================================================

class TenantConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WhatsApp –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ tenant."""

    def __init__(self, tenant_slug: str):
        self.tenant_slug = tenant_slug

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å –∑–∞–º–µ–Ω–æ–π –¥–µ—Ñ–∏—Å–∞ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        tenant_prefix = tenant_slug.upper().replace("-", "_")

        # WhatsApp –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.instance_id = os.getenv(f"{tenant_prefix}_WHATSAPP_INSTANCE_ID")
        self.api_token = os.getenv(f"{tenant_prefix}_WHATSAPP_API_TOKEN")
        self.phone_number = os.getenv(f"{tenant_prefix}_WHATSAPP_PHONE_NUMBER")
        self.api_url = os.getenv(f"{tenant_prefix}_WHATSAPP_API_URL", "https://7107.api.green-api.com")

        # OpenAI credentials –¥–ª—è —ç—Ç–æ–≥–æ tenant
        self.openai_api_key = (
            os.getenv(f"{tenant_prefix}_OPENAI_API_KEY") or
            os.getenv("OPENAI_API_KEY")
        )
        self.openai_assistant_id = (
            os.getenv(f"{tenant_prefix}_OPENAI_ASSISTANT_ID") or
            os.getenv("OPENAI_ASSISTANT_ID")
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Telegram Config)
        enable_dialog_mode_str = (
            os.getenv(f"{tenant_prefix}_ENABLE_DIALOG_MODE") or
            os.getenv("ENABLE_DIALOG_MODE") or
            "false"
        )
        self.enable_dialog_mode = str(enable_dialog_mode_str).strip().lower() in ("true", "1", "yes")

        # –°–æ–∑–¥–∞–µ–º i18n —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        from packages.core.config import I18nInstance
        try:
            self.i18n = I18nInstance(tenant_slug=tenant_slug, language="ru")
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è  Localization file not found for {tenant_slug}, using default")
            self.i18n = None

    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã."""
        # phone_number –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π - GreenAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–µ–≥–æ
        return all([self.instance_id, self.api_token])


# –ú–∞–ø–ø–∏–Ω–≥ instance_id -> tenant_slug
TENANT_INSTANCES: Dict[str, str] = {}


def load_tenant_configs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–µ–Ω–∞–Ω—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    tenants = ["evopoliki", "five_deluxe"]  

    for tenant_slug in tenants:
        try:
            tenant_config = TenantConfig(tenant_slug)

            if tenant_config.is_valid():
                TENANT_INSTANCES[tenant_config.instance_id] = tenant_slug
                logger.info(f"‚úÖ Loaded WhatsApp config for {tenant_slug} (instance: {tenant_config.instance_id})")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ phone_number –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è GreenAPI)
                if not tenant_config.phone_number:
                    logger.warning(f"‚ö†Ô∏è  {tenant_slug}: WHATSAPP_PHONE_NUMBER not set (optional)")
                
                # –°–æ–∑–¥–∞–µ–º AssistantManager –¥–ª—è —ç—Ç–æ–≥–æ tenant
                if tenant_config.openai_api_key and tenant_config.openai_assistant_id:
                    try:
                        memory = get_memory()
                        assistant_manager = AssistantManager(
                            api_key=tenant_config.openai_api_key,
                            assistant_id=tenant_config.openai_assistant_id,
                            memory=memory
                        )
                        tenant_assistant_managers[tenant_slug] = assistant_manager
                        logger.info(f"‚úÖ AssistantManager initialized for {tenant_slug} (Assistant ID: {tenant_config.openai_assistant_id})")
                    except Exception as e:
                        logger.error(f"‚ùå Failed to initialize AssistantManager for {tenant_slug}: {e}")
                else:
                    logger.warning(f"‚ö†Ô∏è  Missing OpenAI credentials for {tenant_slug}")
            else:
                logger.warning(f"‚ö†Ô∏è  Missing WhatsApp config for {tenant_slug}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {tenant_slug}: {e}")

    logger.info(f"üì± Total active WhatsApp instances: {len(TENANT_INSTANCES)}")
    logger.info(f"ü§ñ Total active AI Assistants: {len(tenant_assistant_managers)}")


# ============================================================================
# GREENAPI CLIENT
# ============================================================================

class GreenAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GreenAPI."""

    def __init__(self, tenant_config: TenantConfig):
        self.tenant_config = tenant_config
        self.base_url = f"{tenant_config.api_url}/waInstance{tenant_config.instance_id}"

    async def send_message(self, chat_id: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp.

        –í–ê–ñ–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç HTML-—Ç–µ–≥–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ WhatsApp Markdown.

        Args:
            chat_id: ID —á–∞—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001234567@c.us)
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        # üîí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô "–¢–ê–ú–û–ñ–ï–ù–ù–´–ô –ö–û–ù–¢–†–û–õ–¨":
        # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ—á–∏—Å—Ç–∫—É HTML ‚Üí WhatsApp Markdown
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –¥–ª—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
        cleaned_message = clean_text_for_whatsapp(message)

        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ HTML-—Ç–µ–≥–∏
        if cleaned_message != message:
            logger.debug(f"[HTML_CLEANUP] Original: {message[:100]}...")
            logger.debug(f"[HTML_CLEANUP] Cleaned:  {cleaned_message[:100]}...")

        url = f"{self.base_url}/sendMessage/{self.tenant_config.api_token}"

        payload = {
            "chatId": chat_id,
            "message": cleaned_message  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
        }

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=payload, timeout=10.0)

                if response.status_code == 200:
                    logger.info(f"‚úÖ Message sent to {chat_id}: {message[:50]}...")
                    return True
                else:
                    logger.error(f"‚ùå Failed to send message: {response.status_code} - {response.text}")
                    return False

        except Exception as e:
            logger.error(f"‚ùå Exception while sending message: {e}")
            return False

    async def send_interactive_list(
        self,
        chat_id: str,
        header: str,
        body: str,
        footer: str,
        button_text: str,
        sections: list
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ WhatsApp —á–µ—Ä–µ–∑ GreenAPI.

        Args:
            chat_id: ID —á–∞—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001234567@c.us)
            header: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            body: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            footer: –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç (footer)
            button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
            sections: –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ [{"title": "...", "rows": [...]}]

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        url = f"{self.base_url}/sendMessage/{self.tenant_config.api_token}"

        payload = {
            "chatId": chat_id,
            "message": {
                "text": body
            },
            "quotedMessageId": None,
            "linkPreview": False
        }

        # GreenAPI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ (buttons) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sections –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        # –¢–∞–∫ –∫–∞–∫ GreenAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç interactive lists –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        message_parts = [f"*{header}*", "", body, ""]

        for section in sections:
            section_title = section.get("title", "")
            rows = section.get("rows", [])

            message_parts.append(f"*{section_title}*")

            for idx, row in enumerate(rows, 1):
                title = row.get("title", "")
                description = row.get("description", "")
                message_parts.append(f"{idx}Ô∏è‚É£ {title}")
                if description:
                    message_parts.append(f"   _{description}_")

            message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏

        if footer:
            message_parts.append(f"_{footer}_")

        formatted_message = "\n".join(message_parts)

        payload["message"]["text"] = formatted_message

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=payload, timeout=10.0)

                if response.status_code == 200:
                    logger.info(f"‚úÖ Interactive list sent to {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to send interactive list: {response.status_code} - {response.text}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return await self.send_message(chat_id, formatted_message)

        except Exception as e:
            logger.error(f"‚ùå Exception while sending interactive list: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.send_message(chat_id, formatted_message)

    async def send_menu_response(self, chat_id: str, menu_data: Dict[str, Any]) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –º–µ–Ω—é.

        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥.

        Args:
            chat_id: ID —á–∞—Ç–∞ WhatsApp
            menu_data: –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (dict —Å type –∏ –¥–∞–Ω–Ω—ã–º–∏)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        message_type = menu_data.get("type", "text")

        if message_type == "interactive_list":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
            return await self.send_interactive_list(
                chat_id=chat_id,
                header=menu_data.get("header", ""),
                body=menu_data.get("body", ""),
                footer=menu_data.get("footer", ""),
                button_text=menu_data.get("button_text", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
                sections=menu_data.get("sections", [])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.send_message(chat_id, menu_data.get("message", ""))


# ============================================================================
# WEBHOOK HANDLERS
# ============================================================================

@app.post("/webhook")
async def webhook_handler(
    request: Request,
    session: AsyncSession = Depends(get_session)
):
    """
    –ì–ª–∞–≤–Ω—ã–π endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç GreenAPI.

    GreenAPI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()

        logger.info(f"üì® Received webhook: {body}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±—Ö—É–∫–∞
        webhook_type = body.get("typeWebhook")
        instance_data = body.get("instanceData", {})
        message_data = body.get("messageData")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º instance_id
        instance_id = instance_data.get("idInstance")

        if not instance_id:
            logger.warning("‚ö†Ô∏è  No instance_id in webhook")
            return JSONResponse({"status": "error", "message": "No instance_id"}, status_code=400)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º tenant –ø–æ instance_id
        tenant_slug = TENANT_INSTANCES.get(str(instance_id))

        if not tenant_slug:
            logger.warning(f"‚ö†Ô∏è  Unknown instance_id: {instance_id}")
            return JSONResponse({"status": "error", "message": "Unknown instance"}, status_code=400)

        logger.info(f"üè¢ Tenant identified: {tenant_slug}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if webhook_type == "incomingMessageReceived":
            sender_data = body.get("senderData", {})
            await handle_incoming_message(tenant_slug, message_data, sender_data, session)

        return JSONResponse({"status": "ok"})

    except Exception as e:
        logger.error(f"‚ùå Error in webhook handler: {e}", exc_info=True)
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)


async def handle_incoming_message(
    tenant_slug: str,
    message_data: Dict[str, Any],
    sender_data: Dict[str, Any],
    session: AsyncSession
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WhatsApp.
    –†–æ—É—Ç–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç tenant –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        tenant_slug: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä tenant (evopoliki, five_deluxe)
        message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–µ–±—Ö—É–∫–∞
        sender_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –≤–µ–±—Ö—É–∫–∞
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        type_message = message_data.get("typeMessage")
        text_message = message_data.get("textMessageData", {}).get("textMessage", "")
        chat_id = sender_data.get("chatId")
        sender_name = sender_data.get("senderName", "–ì–æ—Å—Ç—å")

        logger.info(f"üí¨ Message from {sender_name} ({chat_id}): {text_message}")

        # ====================================================================
        # üîç –ü–†–û–í–ï–†–ö–ê #1: –°–ï–ö–†–ï–¢–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ö–û–ú–ê–ù–î–ê (–í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        # ====================================================================
        if text_message.lower().startswith("ask_ai:"):
            logger.info(f"üîç [AI_DEBUG] Detected ask_ai command from {chat_id}")
            logger.warning("‚ö†Ô∏è [AI_DEBUG] ask_ai command is deprecated and disabled for security")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            tenant_config = TenantConfig(tenant_slug)
            if tenant_config.is_valid():
                client = GreenAPIClient(tenant_config)
                await client.send_message(
                    chat_id,
                    "‚ö†Ô∏è –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ask_ai –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é."
                )

            return  # –í—ã—Ö–æ–¥–∏–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –¥–∞–ª—å—à–µ

        # ====================================================================
        # ‚è±Ô∏è  –ü–†–û–í–ï–†–ö–ê –¢–ê–ô–ú–ê–£–¢–ê –°–ï–°–°–ò–ò (15 –ú–ò–ù–£–¢)
        # ====================================================================
        try:
            memory = get_memory()
            session_timed_out = memory.check_timeout(chat_id, timeout_seconds=900)

            logger.info(f"‚è±Ô∏è  [TIMEOUT_CHECK] User: {chat_id}")
            logger.info(f"‚è±Ô∏è  [TIMEOUT_CHECK] Session timed out: {session_timed_out}")

            if session_timed_out:
                # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–∞–º—è—Ç—å
                from state_manager import clear_state
                clear_state(chat_id)
                memory.clear_history(chat_id)

                logger.critical(f"üî• [TIMEOUT] –°–µ—Å—Å–∏—è –¥–ª—è {sender_name} ({chat_id}) –°–ë–†–û–®–ï–ù–ê –ø–æ —Ç–∞–π–º–∞—É—Ç—É!")
                logger.info(f"üóëÔ∏è  [TIMEOUT] –û—á–∏—â–µ–Ω—ã: FSM state + AI memory")

                # ====================================================================
                # üéØ –£–ú–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ü–û–°–õ–ï –¢–ê–ô–ú–ê–£–¢–ê
                #
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê:
                # - –ï—Å–ª–∏ enable_dialog_mode=True ‚Üí –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ AI
                # - –ï—Å–ª–∏ enable_dialog_mode=False ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                # ====================================================================
                if is_greeting(text_message):
                    logger.info(f"üëã [TIMEOUT] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç {sender_name}")

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é tenant
                    tenant_config = TenantConfig(tenant_slug)
                    if tenant_config.is_valid():
                        enable_ai = tenant_config.enable_dialog_mode

                        logger.info(f"üéØ [TIMEOUT] enable_dialog_mode = {enable_ai}")

                        if enable_ai:
                            # AI –†–ï–ñ–ò–ú: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã AI –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                            logger.info(f"ü§ñ [TIMEOUT] AI —Ä–µ–∂–∏–º ‚Üí –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ AI Assistant")
                            # –ù–ï –¥–µ–ª–∞–µ–º return - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ AI-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                        else:
                            # IVR –†–ï–ñ–ò–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                            logger.info(f"üìã [TIMEOUT] IVR —Ä–µ–∂–∏–º ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é")

                            greeting_response = await whatsapp_handlers.handle_start_message(chat_id, tenant_config)
                            personalized_greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {sender_name}! –°–Ω–æ–≤–∞ —Ä–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å. üòä\n\n{greeting_response}"

                            client = GreenAPIClient(tenant_config)
                            await client.send_message(chat_id, personalized_greeting)
                            logger.info(f"‚úÖ [TIMEOUT] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ IVR-–º–µ–Ω—é –¥–ª—è {sender_name}")

                            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º - –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ

        except Exception as e:
            logger.error(f"‚ùå [TIMEOUT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–π–º–∞—É—Ç–∞: {e}", exc_info=True)

        # ====================================================================
        # ‚úÖ WHITELIST –û–¢–ö–õ–Æ–ß–ï–ù - –ë–û–¢ –û–¢–í–ï–ß–ê–ï–¢ –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú
        # ====================================================================
        logger.info(f"‚úÖ Processing message from {chat_id} (whitelist disabled)")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é tenant
        tenant_config = TenantConfig(tenant_slug)

        if not tenant_config.is_valid():
            logger.error(f"‚ùå Invalid tenant config for {tenant_slug}")
            return

        # ====================================================================
        # –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –†–û–£–¢–ò–ù–ì: –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï AI/IVR
        # ====================================================================
        enable_ai = tenant_config.enable_dialog_mode

        logger.debug(f"[ROUTING] tenant={tenant_slug} enable_dialog_mode={enable_ai}")
        logger.info(f"üîÄ [ROUTING] {tenant_slug}: {'AI mode' if enable_ai else 'IVR mode'}")

        if enable_ai:
            # ========== –†–ï–ñ–ò–ú AI –í–ö–õ–Æ–ß–ï–ù ==========
            logger.info(f"ü§ñ [ROUTING] Dialog mode ENABLED -> AI Assistant flow")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–µ–Ω—é" - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if text_message.lower() in ["–º–µ–Ω—é", "menu", "/start", "start"]:
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                try:
                    memory = get_memory()
                    memory.clear_history(chat_id)
                    logger.info(f"üóëÔ∏è [MEMORY] –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è {chat_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [MEMORY] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
                menu_handler = TENANT_MENU_HANDLERS.get(tenant_slug)
                if menu_handler:
                    logger.info(f"üìã [MENU] Using tenant handler for {tenant_slug}")
                    menu_data = await menu_handler(chat_id, tenant_config, sender_name)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    client = GreenAPIClient(tenant_config)
                    await client.send_menu_response(chat_id, menu_data)
                    logger.info(f"‚úÖ [MENU] Menu sent to {sender_name}")

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    set_state(chat_id, WhatsAppState.WAITING_FOR_CATEGORY_CHOICE)
                    logger.info(f"üîÑ [STATE] User {chat_id} state changed to WAITING_FOR_CATEGORY_CHOICE")
                    return
                else:
                    logger.warning(f"‚ö†Ô∏è [MENU] No handler found for {tenant_slug}, using fallback")
                    response = await whatsapp_handlers.handle_start_message(chat_id, tenant_config)
            else:
                # –†–æ—É—Ç–∏–º —á–µ—Ä–µ–∑ AI Assistant
                response = await route_message_by_state(chat_id, text_message, tenant_config, tenant_slug, session)

        else:
            # ========== –†–ï–ñ–ò–ú IVR ONLY ==========
            logger.info(f"üìã [ROUTING] Dialog mode DISABLED -> IVR menu flow ONLY")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            message_handler = TENANT_MESSAGE_HANDLERS.get(tenant_slug)

            if message_handler:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
                logger.info(f"üìã [IVR] Using tenant message handler for {tenant_slug}")
                response = await message_handler(chat_id, text_message, tenant_config, session, sender_name)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–º–µ–Ω—é"
                if text_message.lower() in ["–º–µ–Ω—é", "menu", "/start", "start"]:
                    menu_handler = TENANT_MENU_HANDLERS.get(tenant_slug)
                    if menu_handler:
                        menu_data = await menu_handler(chat_id, tenant_config, sender_name)
                        client = GreenAPIClient(tenant_config)
                        await client.send_menu_response(chat_id, menu_data)
                        logger.info(f"‚úÖ [IVR] Menu sent to {sender_name}")

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        set_state(chat_id, WhatsAppState.WAITING_FOR_CATEGORY_CHOICE)
                        logger.info(f"üîÑ [STATE] User {chat_id} state changed to WAITING_FOR_CATEGORY_CHOICE")
                        return

                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ evopoliki
                logger.warning(f"‚ö†Ô∏è [IVR] No handler for {tenant_slug}, using default")
                response = await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        client = GreenAPIClient(tenant_config)
        logger.info(f"üì§ [SEND_MESSAGE] Sending response to {chat_id}: {response[:100]}...")
        await client.send_message(chat_id, response)
        logger.info(f"‚úÖ [SEND_MESSAGE] Successfully sent response to {sender_name}")

    except Exception as e:
        logger.error(f"‚ùå Error handling incoming message: {e}", exc_info=True)


def is_greeting(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.

    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        True –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    greetings = [
        "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é",
        "hello", "hi", "hey", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
        "–¥–æ–±—Ä–æ–π –Ω–æ—á–∏", "—Ö–∞–π", "—Ö–µ–π", "—Å–∞–ª–∞–º", "—Å”ô–ª–µ–º"
    ]
    text_lower = text.lower().strip()
    return any(greeting in text_lower for greeting in greetings)


def is_ivr_command(text: str, state: WhatsAppState) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π IVR-–∫–æ–º–∞–Ω–¥–æ–π
    –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    Returns:
        True –µ—Å–ª–∏ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è IVR-–∫–æ–º–∞–Ω–¥–∞, False –µ—Å–ª–∏ —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è AI
    """
    text = text.strip()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –æ–∂–∏–¥–∞–µ–º —Ü–∏—Ñ—Ä—ã 1-5
    if state == WhatsAppState.MAIN_MENU:
        return text in ["1", "2", "3", "4", "5"]

    # EVA: –æ–∂–∏–¥–∞–Ω–∏–µ –º–∞—Ä–∫–∏ - —Ü–∏—Ñ—Ä—ã 1-8, –ø–∞–≥–∏–Ω–∞—Ü–∏—è 00/99, –∏–ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ä–∫–∏
    elif state == WhatsAppState.EVA_WAITING_BRAND:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if text in ["00", "99"]:
            return True
        # –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ (1-8)
        if text.isdigit() and 1 <= int(text) <= 8:
            return True
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –º–∞—Ä–∫–∏ - —Å—á–∏—Ç–∞–µ–º IVR-–∫–æ–º–∞–Ω–¥–æ–π (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
        return True

    # EVA: –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ - —Ü–∏—Ñ—Ä—ã 1-8, –ø–∞–≥–∏–Ω–∞—Ü–∏—è 00/99, –∏–ª–∏ —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏
    elif state == WhatsAppState.EVA_WAITING_MODEL:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if text in ["00", "99"]:
            return True
        # –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ (1-8)
        if text.isdigit() and 1 <= int(text) <= 8:
            return True
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ fuzzy suggestion (1 –∏–ª–∏ 2)
        if text in ["1", "2"]:
            return True
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –º–æ–¥–µ–ª–∏ - —Å—á–∏—Ç–∞–µ–º IVR-–∫–æ–º–∞–Ω–¥–æ–π
        return True

    # EVA: –≤—ã–±–æ—Ä –æ–ø—Ü–∏–π - –æ–∂–∏–¥–∞–µ–º —Ü–∏—Ñ—Ä—ã 1-3
    elif state == WhatsAppState.EVA_SELECTING_OPTIONS:
        return text in ["1", "2", "3"]

    # EVA: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - –æ–∂–∏–¥–∞–µ–º "1" –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    elif state == WhatsAppState.EVA_CONFIRMING_ORDER:
        positive_answers = ["1", "–¥–∞", "yes", "–æ–∫", "ok", "+", "–∫–æ–Ω–µ—á–Ω–æ", "–¥–∞–≤–∞–π", "–¥–∞–≤–∞–π—Ç–µ"]
        return text.lower() in positive_answers

    # –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–∂–∏–¥–∞–µ–º—ã–º –≤–≤–æ–¥–æ–º
    elif state == WhatsAppState.WAITING_FOR_NAME:
        return True

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π - –Ω–µ IVR-–∫–æ–º–∞–Ω–¥–∞
    return False


async def route_message_by_state(
    chat_id: str,
    text: str,
    tenant_config: TenantConfig,
    tenant_slug: str,
    session: AsyncSession
) -> str:
    """
    –†–æ—É—Ç–∏—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –£–ú–ù–´–ô –†–û–£–¢–ò–ù–ì:
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ IDLE –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è IVR-–∫–æ–º–∞–Ω–¥–æ–π -> AI Assistant
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º -> IVR-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        tenant_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
        tenant_slug: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä tenant (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ AssistantManager)
        session: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    
    # –ü–æ–ª—É—á–∞–µ–º AssistantManager –¥–ª—è —ç—Ç–æ–≥–æ tenant
    assistant_manager = tenant_assistant_managers.get(tenant_slug)
    current_state = get_state(chat_id)
    logger.info(f"üîÄ [ROUTE] User {chat_id} in state: {current_state}, message: '{text}'")

    # IDLE –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI Assistant –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    if current_state == WhatsAppState.IDLE:
        logger.info(f"ü§ñ IDLE state - using AI Assistant for message: {text}")
        logger.info("=" * 60)
        logger.info("ü§ñ *** AI HANDLER TRIGGERED *** ü§ñ")
        logger.info("=" * 60)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        thread_id = get_or_create_thread(chat_id, assistant_manager)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π chat_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            response = await assistant_manager.get_response(thread_id, text, chat_id=chat_id)
            logger.info(f"üì® [AI_RESPONSE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: {response}")
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
            response_type, parsed_data = detect_response_type(response)
            logger.info(f"üîç [AI_RESPONSE] –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_type}, Parsed data: {parsed_data}")

            if response_type == "json" and parsed_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è
                intent = parsed_data.get("intent", "order").upper()
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º: {intent}")

                # ============================================================
                # –°–¶–ï–ù–ê–†–ò–ô: SHOW_CATALOG / SHOW_MAIN_MENU (–ü–æ–∫–∞–∑ –º–µ–Ω—é)
                # ============================================================
                if intent in ["SHOW_CATALOG", "SHOW_MAIN_MENU"]:
                    logger.info(f"üìã [{intent}] AI –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∫–∞–∑ –º–µ–Ω—é")

                    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ tenant
                    menu_handler = TENANT_MENU_HANDLERS.get(tenant_slug)

                    if menu_handler:
                        logger.info(f"‚úÖ [{intent}] –í—ã–∑—ã–≤–∞–µ–º menu handler –¥–ª—è {tenant_slug}")
                        menu_data = await menu_handler(chat_id, tenant_config, "–ì–æ—Å—Ç—å")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
                        client = GreenAPIClient(tenant_config)
                        await client.send_menu_response(chat_id, menu_data)

                        # –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        set_state(chat_id, WhatsAppState.WAITING_FOR_CATEGORY_CHOICE)
                        logger.info(f"üîÑ [STATE] User {chat_id} state ‚Üí WAITING_FOR_CATEGORY_CHOICE")

                        return ""  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —Ç.–∫. –º–µ–Ω—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    else:
                        logger.error(f"‚ùå [{intent}] Menu handler –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {tenant_slug}")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '–ú–µ–Ω—é'."

                # ============================================================
                # –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô: CALLBACK_REQUEST (–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫)
                # ============================================================
                elif intent == "CALLBACK_REQUEST":
                    logger.info(f"üìû [CALLBACK_REQUEST] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
                    callback_details = parsed_data.get("details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                    logger.info(f"üìù [CALLBACK_REQUEST] –î–µ—Ç–∞–ª–∏: {callback_details}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ user_data
                    update_user_data(chat_id, {
                        "callback_details": callback_details,
                        "request_type": "callback"
                    })

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    set_state(chat_id, WhatsAppState.WAITING_FOR_NAME)

                    return (
                        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
                        "üìù –®–∞–≥ 1/2: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                    )

                # ============================================================
                # –°–¶–ï–ù–ê–†–ò–ô: ORDER (AI –∫–∞–∫ —É–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –≤ –≤–æ—Ä–æ–Ω–∫—É)
                # ============================================================
                elif intent == "ORDER":
                    logger.info(f"üõí [AI_ROUTER] –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º ORDER")

                    order_data = extract_order_data(parsed_data)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å AI
                    category = order_data.get("category")
                    brand = order_data.get("brand")
                    model = order_data.get("model")

                    logger.info(f"üß† [AI_ROUTER] AI –∏–∑–≤–ª–µ–∫: category={category}, brand={brand}, model={model}")

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # –£–ú–ù–ê–Ø –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É —Å –Ω—É–∂–Ω–æ–≥–æ —à–∞–≥–∞
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                    # –°–¶–ï–ù–ê–†–ò–ô 4: AI –Ω–µ –ø–æ–Ω—è–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if not category:
                        logger.info("üéØ [AI_ROUTER] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

                    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_name = get_category_name(category, tenant_config.i18n)
                    logger.info(f"üè∑Ô∏è  [AI_ROUTER] category={category} ‚Üí category_name={category_name}")

                    # –°–¶–ï–ù–ê–†–ò–ô 3: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª category + brand + model ‚Üí –ò—â–µ–º –ª–µ–∫–∞–ª–∞
                    if brand and model:
                        logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 3: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –ü–æ–∏—Å–∫ –ª–µ–∫–∞–ª –¥–ª—è {brand} {model}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
                        update_user_data(chat_id, {
                            "category": category,
                            "category_name": category_name,
                            "brand_name": brand,
                            "model_name": model
                        })

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ª–µ–∫–∞–ª (–≤–æ—Ä–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —à–∞–≥–∞ 3)
                        logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ search_patterns_for_model")
                        return await whatsapp_handlers.search_patterns_for_model(
                            chat_id, model, brand, category, tenant_config, session
                        )

                    # –°–¶–ï–ù–ê–†–ò–ô 2: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª category + brand ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏
                    elif brand:
                        logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 2: –ï—Å—Ç—å –º–∞—Ä–∫–∞ '{brand}' ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
                        update_user_data(chat_id, {
                            "category": category,
                            "category_name": category_name,
                            "brand_name": brand
                        })

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ (–≤–æ—Ä–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —à–∞–≥–∞ 2)
                        logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ show_models_page –¥–ª—è {brand}")
                        return await whatsapp_handlers.show_models_page(chat_id, 1, brand, tenant_config, session)

                    # –°–¶–ï–ù–ê–†–ò–ô 1: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–æ–ª—å–∫–æ category ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏
                    else:
                        logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 1: –ï—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
                        update_user_data(chat_id, {
                            "category": category,
                            "category_name": category_name,
                            "brands_page": 1
                        })

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        set_state(chat_id, WhatsAppState.EVA_WAITING_BRAND)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏ (–≤–æ—Ä–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —à–∞–≥–∞ 1)
                        logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ show_brands_page")
                        return await whatsapp_handlers.show_brands_page(chat_id, 1, tenant_config, session)

            else:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ) - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è WhatsApp –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                logger.info("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ)")
                formatted_response = format_response_for_platform(response, "whatsapp")
                return formatted_response

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}")

            # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ IVR-–∫–æ–º–∞–Ω–¥–æ–π
    elif current_state == WhatsAppState.MAIN_MENU:
        if is_ivr_command(text, current_state):
            # –û–∂–∏–¥–∞–µ–º–∞—è —Ü–∏—Ñ—Ä–∞ 1-5 - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ IVR
            return await whatsapp_handlers.handle_main_menu_choice(chat_id, text, tenant_config, session)
        else:
            # –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫—Ç–æ —Ç—ã?", "–∫–∞–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è?") - –ø–µ—Ä–µ–¥–∞–µ–º –≤ AI
            logger.info(f"ü§ñ Main menu: unexpected text '{text}' - routing to AI Assistant")
            logger.info("=" * 60)
            logger.info("ü§ñ *** AI HANDLER TRIGGERED *** ü§ñ")
            logger.info("=" * 60)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            thread_id = get_or_create_thread(chat_id, assistant_manager)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π chat_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
                response = await assistant_manager.get_response(thread_id, text, chat_id=chat_id)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                response_type, parsed_data = detect_response_type(response)

                if response_type == "json" and parsed_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è
                    intent = parsed_data.get("intent", "order").upper()
                    logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º: {intent}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ SHOW_CATALOG / SHOW_MAIN_MENU
                    if intent in ["SHOW_CATALOG", "SHOW_MAIN_MENU"]:
                        logger.info(f"üìã [{intent}] AI –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∫–∞–∑ –º–µ–Ω—é")

                        menu_handler = TENANT_MENU_HANDLERS.get(tenant_slug)
                        if menu_handler:
                            menu_data = await menu_handler(chat_id, tenant_config, "–ì–æ—Å—Ç—å")
                            client = GreenAPIClient(tenant_config)
                            await client.send_menu_response(chat_id, menu_data)
                            set_state(chat_id, WhatsAppState.WAITING_FOR_CATEGORY_CHOICE)
                            logger.info(f"üîÑ [STATE] User {chat_id} state ‚Üí WAITING_FOR_CATEGORY_CHOICE")
                            return ""
                        else:
                            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '–ú–µ–Ω—é'."

                    # JSON –æ—Ç–≤–µ—Ç —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
                    logger.info(f"üõí [AI_ROUTER] –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º ORDER: {parsed_data}")

                    order_data = extract_order_data(parsed_data)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å AI
                    category = order_data.get("category")
                    brand = order_data.get("brand")
                    model = order_data.get("model")

                    logger.info(f"üß† [AI_ROUTER] AI –∏–∑–≤–ª–µ–∫: category={category}, brand={brand}, model={model}")

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # –£–ú–ù–ê–Ø –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É —Å –Ω—É–∂–Ω–æ–≥–æ —à–∞–≥–∞
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                    # –°–¶–ï–ù–ê–†–ò–ô 4: AI –Ω–µ –ø–æ–Ω—è–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if not category:
                        logger.info("üéØ [AI_ROUTER] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

                    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_name = get_category_name(category, tenant_config.i18n)
                    logger.info(f"üè∑Ô∏è  [AI_ROUTER] category={category} ‚Üí category_name={category_name}")

                    # –°–¶–ï–ù–ê–†–ò–ô 3: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª category + brand + model ‚Üí –ò—â–µ–º –ª–µ–∫–∞–ª–∞
                    if brand and model:
                        logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 3: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –ü–æ–∏—Å–∫ –ª–µ–∫–∞–ª –¥–ª—è {brand} {model}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
                        update_user_data(chat_id, {
                            "category": category,
                            "category_name": category_name,
                            "brand_name": brand,
                            "model_name": model
                        })

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ª–µ–∫–∞–ª (–≤–æ—Ä–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —à–∞–≥–∞ 3)
                        logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ search_patterns_for_model")
                        return await whatsapp_handlers.search_patterns_for_model(
                            chat_id, model, brand, category, tenant_config, session
                        )

                    # –°–¶–ï–ù–ê–†–ò–ô 2: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª category + brand ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏
                    elif brand:
                        logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 2: –ï—Å—Ç—å –º–∞—Ä–∫–∞ '{brand}' ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
                        update_user_data(chat_id, {
                            "category": category,
                            "category_name": category_name,
                            "brand_name": brand
                        })

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ (–≤–æ—Ä–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —à–∞–≥–∞ 2)
                        logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ show_models_page –¥–ª—è {brand}")
                        return await whatsapp_handlers.show_models_page(chat_id, 1, brand, tenant_config, session)

                    # –°–¶–ï–ù–ê–†–ò–ô 1: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–æ–ª—å–∫–æ category ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏
                    else:
                        logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 1: –ï—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
                        update_user_data(chat_id, {
                            "category": category,
                            "category_name": category_name,
                            "brands_page": 1
                        })

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        set_state(chat_id, WhatsAppState.EVA_WAITING_BRAND)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏ (–≤–æ—Ä–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —à–∞–≥–∞ 1)
                        logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ show_brands_page")
                        return await whatsapp_handlers.show_brands_page(chat_id, 1, tenant_config, session)

                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ) - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è WhatsApp –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    logger.info("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ)")
                    formatted_response = format_response_for_platform(response, "whatsapp")
                    return formatted_response

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}")

                # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–µ–Ω—é
    elif current_state == WhatsAppState.WAITING_FOR_CATEGORY_CHOICE:
        logger.info(f"üéØ [ROUTE] WAITING_FOR_CATEGORY_CHOICE state - processing menu selection: '{text}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ü–∏—Ñ—Ä–æ–π (–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–µ–Ω—é)
        if text.strip().isdigit():
            # –≠—Ç–æ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ IVR
            logger.info(f"‚úÖ [ROUTE] User selected category number: {text}")
            return await whatsapp_handlers.handle_main_menu_choice(chat_id, text, tenant_config, session)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI Assistant –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            logger.info(f"ü§ñ [ROUTE] Non-numeric input in category selection - routing to AI: '{text}'")
            logger.info("=" * 60)
            logger.info("ü§ñ *** AI HANDLER TRIGGERED *** ü§ñ")
            logger.info("=" * 60)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            thread_id = get_or_create_thread(chat_id, assistant_manager)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π chat_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
                response = await assistant_manager.get_response(thread_id, text, chat_id=chat_id)
                logger.info(f"üì® [AI_RESPONSE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: {response}")
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")

                # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON-–∫–æ–º–∞–Ω–¥–æ–π
                # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                response_type, parsed_data = detect_response_type(response)
                logger.info(f"üîç [AI_RESPONSE] –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_type}, Parsed data: {parsed_data}")

                if response_type == "json" and parsed_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è
                    intent = parsed_data.get("intent", "order").upper()
                    logger.info(f"üéØ [WAITING_FOR_CATEGORY] –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º: {intent}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ SHOW_CATALOG / SHOW_MAIN_MENU
                    if intent in ["SHOW_CATALOG", "SHOW_MAIN_MENU"]:
                        logger.info(f"üìã [{intent}] AI –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∫–∞–∑ –º–µ–Ω—é")
                        menu_handler = TENANT_MENU_HANDLERS.get(tenant_slug)
                        if menu_handler:
                            menu_data = await menu_handler(chat_id, tenant_config, "–ì–æ—Å—Ç—å")
                            client = GreenAPIClient(tenant_config)
                            await client.send_menu_response(chat_id, menu_data)
                            set_state(chat_id, WhatsAppState.WAITING_FOR_CATEGORY_CHOICE)
                            logger.info(f"üîÑ [STATE] User {chat_id} state ‚Üí WAITING_FOR_CATEGORY_CHOICE")
                            return ""
                        else:
                            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '–ú–µ–Ω—é'."

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ORDER - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
                    elif intent == "ORDER":
                        logger.info(f"üõí [AI_ROUTER] –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º ORDER")

                        order_data = extract_order_data(parsed_data)

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å AI
                        category = order_data.get("category")
                        brand = order_data.get("brand")
                        model = order_data.get("model")

                        logger.info(f"üß† [AI_ROUTER] AI –∏–∑–≤–ª–µ–∫: category={category}, brand={brand}, model={model}")

                        # –°–¶–ï–ù–ê–†–ò–ô 4: AI –Ω–µ –ø–æ–Ω—è–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        if not category:
                            logger.info("üéØ [AI_ROUTER] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                            return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

                        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        category_name = get_category_name(category, tenant_config.i18n)
                        logger.info(f"üè∑Ô∏è  [AI_ROUTER] category={category} ‚Üí category_name={category_name}")

                        # –°–¶–ï–ù–ê–†–ò–ô 3: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª category + brand + model ‚Üí –ò—â–µ–º –ª–µ–∫–∞–ª–∞
                        if brand and model:
                            logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 3: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –ü–æ–∏—Å–∫ –ª–µ–∫–∞–ª –¥–ª—è {brand} {model}")

                            update_user_data(chat_id, {
                                "category": category,
                                "category_name": category_name,
                                "brand_name": brand,
                                "model_name": model
                            })

                            set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)

                            logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ search_patterns_for_model")
                            return await whatsapp_handlers.search_patterns_for_model(
                                chat_id, model, brand, category, tenant_config, session
                            )

                        # –°–¶–ï–ù–ê–†–ò–ô 2: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª category + brand ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏
                        elif brand:
                            logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 2: –ï—Å—Ç—å –º–∞—Ä–∫–∞ '{brand}' ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏")

                            update_user_data(chat_id, {
                                "category": category,
                                "category_name": category_name,
                                "brand_name": brand
                            })

                            set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)

                            logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ show_models_page –¥–ª—è {brand}")
                            return await whatsapp_handlers.show_models_page(chat_id, 1, brand, tenant_config, session)

                        # –°–¶–ï–ù–ê–†–ò–ô 1: AI —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–æ–ª—å–∫–æ category ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏
                        else:
                            logger.info(f"üéØ [AI_ROUTER] –®–ê–ì 1: –ï—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–∏")

                            update_user_data(chat_id, {
                                "category": category,
                                "category_name": category_name,
                                "brands_page": 1
                            })

                            set_state(chat_id, WhatsAppState.EVA_WAITING_BRAND)

                            logger.info(f"üöÄ [AI_ROUTER] –ó–∞–ø—É—Å–∫ show_brands_page")
                            return await whatsapp_handlers.show_brands_page(chat_id, 1, tenant_config, session)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CALLBACK_REQUEST
                    elif intent == "CALLBACK_REQUEST":
                        logger.info(f"üìû [CALLBACK_REQUEST] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
                        callback_details = parsed_data.get("details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                        update_user_data(chat_id, {
                            "callback_details": callback_details,
                            "request_type": "callback"
                        })
                        set_state(chat_id, WhatsAppState.WAITING_FOR_NAME)
                        return (
                            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
                            "üìù –®–∞–≥ 1/2: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                        )

                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ)
                logger.info("üìù [AI_RESPONSE] –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (FAQ)")
                formatted_response = format_response_for_platform(response, "whatsapp")
                return formatted_response

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}")

                # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

    # EVA-–∫–æ–≤—Ä–∏–∫–∏: –æ–∂–∏–¥–∞–Ω–∏–µ –º–∞—Ä–∫–∏
    elif current_state == WhatsAppState.EVA_WAITING_BRAND:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ fuzzy suggestion –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
        user_data = get_user_data(chat_id)

        if "suggested_brand" in user_data and text in ["1", "2"]:
            if text == "1":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –º–∞—Ä–∫—É
                suggested_brand = user_data["suggested_brand"]
                # –û—á–∏—â–∞–µ–º suggestion –∏–∑ user_data
                update_user_data(chat_id, {"suggested_brand": None})
                return await whatsapp_handlers.handle_eva_brand_input(chat_id, suggested_brand, tenant_config, session)
            else:
                # –û—á–∏—â–∞–µ–º suggestion –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–Ω–æ–≤–æ
                update_user_data(chat_id, {"suggested_brand": None})
                current_page = user_data.get("brands_page", 1)
                return await whatsapp_handlers.show_brands_page(chat_id, current_page, tenant_config, session)
        else:
            # –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –º–∞—Ä–∫–∏
            return await whatsapp_handlers.handle_eva_brand_input(chat_id, text, tenant_config, session)

    # EVA-–∫–æ–≤—Ä–∏–∫–∏: –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    elif current_state == WhatsAppState.EVA_WAITING_MODEL:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ fuzzy suggestion –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
        user_data = get_user_data(chat_id)

        if "suggested_model" in user_data and text in ["1", "2"]:
            if text == "1":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                suggested_model = user_data["suggested_model"]
                # –û—á–∏—â–∞–µ–º suggestion –∏–∑ user_data
                update_user_data(chat_id, {"suggested_model": None})
                return await whatsapp_handlers.handle_eva_model_input(chat_id, suggested_model, tenant_config, session)
            else:
                # –û—á–∏—â–∞–µ–º suggestion –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–Ω–æ–≤–æ
                update_user_data(chat_id, {"suggested_model": None})
                brand_name = user_data.get("brand_name", "")
                current_page = user_data.get("models_page", 1)
                return await whatsapp_handlers.show_models_page(chat_id, current_page, brand_name, tenant_config, session)
        else:
            # –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –º–æ–¥–µ–ª–∏
            return await whatsapp_handlers.handle_eva_model_input(chat_id, text, tenant_config, session)

    # EVA-–∫–æ–≤—Ä–∏–∫–∏: –≤—ã–±–æ—Ä –æ–ø—Ü–∏–π (–° –±–æ—Ä—Ç–∞–º–∏ / –ë–µ–∑ –±–æ—Ä—Ç–æ–≤)
    elif current_state == WhatsAppState.EVA_SELECTING_OPTIONS:
        return await whatsapp_handlers.handle_option_selection(chat_id, text, tenant_config, session)

    # EVA-–∫–æ–≤—Ä–∏–∫–∏: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif current_state == WhatsAppState.EVA_CONFIRMING_ORDER:
        logger.info(f"üéØ [ROUTE] EVA_CONFIRMING_ORDER state - calling handle_order_confirmation with text: '{text}'")
        return await whatsapp_handlers.handle_order_confirmation(chat_id, text, tenant_config)

    # –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: –æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    # –¢–µ–ª–µ—Ñ–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ chat_id –≤–Ω—É—Ç—Ä–∏ handle_name_input
    elif current_state == WhatsAppState.WAITING_FOR_NAME:
        return await whatsapp_handlers.handle_name_input(chat_id, text, tenant_config, session)  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º session!

    # –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    elif current_state == WhatsAppState.CONTACT_MANAGER:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        logger.warning(f"Unknown state: {current_state}, resetting to main menu")
        return await whatsapp_handlers.handle_start_message(chat_id, tenant_config)


# ============================================================================
# HEALTH CHECK & STARTUP
# ============================================================================

@app.get("/")
async def root():
    """Health check endpoint."""
    return {
        "status": "ok",
        "service": "WhatsApp Gateway",
        "version": "1.0.0",
        "active_tenants": len(TENANT_INSTANCES)
    }





# ============================================================================
# MAIN
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("WHATSAPP_GATEWAY_PORT", "8000"))

    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=True,  # Auto-reload –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        log_level="info"
    )
