"""
WhatsApp Gateway - FastAPI –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç GreenAPI.

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WhatsApp –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö,
–∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â–µ–µ —è–¥—Ä–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Config, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional
import logging
import asyncio
from contextlib import asynccontextmanager

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ core (–í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–µ—Ä–≤—ã–º!)
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.responses import JSONResponse
import httpx
from dotenv import load_dotenv

from sqlalchemy.ext.asyncio import AsyncSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª—ã –∏–∑ tenant-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
# –í production (Railway) –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ UI
apps_dir = project_root / "apps"
for tenant_dir in ["telegram/evopoliki", "telegram/five_deluxe"]:
    env_path = apps_dir / tenant_dir / ".env"
    if env_path.exists():
        load_dotenv(env_path)
        logger.info(f"Loaded .env from {env_path}")
    else:
        logger.info(f".env file not found at {env_path}, using environment variables")

from packages.core.config import Config
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession as SQLAsyncSession
from sqlalchemy import text
from packages.core.memory import init_memory, get_memory
from packages.core.ai.assistant import AssistantManager
from packages.core.ai.response_parser import clean_text_for_whatsapp

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from .state_manager import (
    get_state,
    set_state,
    WhatsAppState,
    clear_thread_id,
    get_user_data,
    update_user_data,
    clear_state
)
import json
import asyncio as async_lib  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å asyncio –∏–∑ contextlib

from . import whatsapp_handlers  # IVR-–≤–æ—Ä–æ–Ω–∫–∞
from .tenant_handlers import evopoliki_handler, five_deluxe_handler  # Tenant-specific –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å AssistantManager –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tenant
# –§–æ—Ä–º–∞—Ç: {tenant_slug: AssistantManager}
tenant_assistant_managers: Dict[str, AssistantManager] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ë–î (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ lifespan)
db_engine = None
db_session_factory = None

# ============================================================================
# RACE CONDITION PROTECTION - –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# ============================================================================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
# –§–æ—Ä–º–∞—Ç: {chat_id: asyncio.Lock}
USER_LOCKS: Dict[str, asyncio.Lock] = {}


# ============================================================================
# LIFESPAN MANAGER
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.
    """
    global db_engine, db_session_factory

    # Startup
    logger.info("üöÄ Starting WhatsApp Gateway...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ DATABASE_URL
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º postgresql:// –≤ postgresql+asyncpg:// –¥–ª—è async engine
    if database_url.startswith("postgresql://"):
        database_url = database_url.replace("postgresql://", "postgresql+asyncpg://", 1)

    # –°–æ–∑–¥–∞–µ–º async engine
    db_engine = create_async_engine(
        database_url,
        echo=False,  # –û—Ç–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è production
        pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        pool_size=5,
        max_overflow=10
    )

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
    db_session_factory = async_sessionmaker(
        db_engine,
        class_=SQLAsyncSession,
        expire_on_commit=False
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        async with db_engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DialogMemory (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö tenant)
    dialog_memory = init_memory(max_messages=6)
    logger.info("‚úÖ DialogMemory initialized")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ tenant –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö AssistantManager
    load_tenant_configs()
    logger.info("‚úÖ WhatsApp Gateway is ready!")

    yield

    # Shutdown
    logger.info("üõë Shutting down WhatsApp Gateway...")
    if db_engine:
        await db_engine.dispose()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title="WhatsApp Gateway",
    description="Multi-tenant WhatsApp bot gateway using GreenAPI",
    version="1.0.0",
    lifespan=lifespan
)


# ============================================================================
# DATABASE SESSION DEPENDENCY
# ============================================================================

async def get_session():
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ FastAPI endpoints —á–µ—Ä–µ–∑ Depends(get_session).
    """
    if db_session_factory is None:
        raise RuntimeError(
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. "
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ."
        )

    async with db_session_factory() as session:
        yield session


# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–ù–ê–ù–¢–û–í
# ============================================================================

class TenantConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WhatsApp –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ tenant."""

    def __init__(self, tenant_slug: str):
        self.tenant_slug = tenant_slug

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å –∑–∞–º–µ–Ω–æ–π –¥–µ—Ñ–∏—Å–∞ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        tenant_prefix = tenant_slug.upper().replace("-", "_")

        # WhatsApp –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.instance_id = os.getenv(f"{tenant_prefix}_WHATSAPP_INSTANCE_ID")
        self.api_token = os.getenv(f"{tenant_prefix}_WHATSAPP_API_TOKEN")
        self.phone_number = os.getenv(f"{tenant_prefix}_WHATSAPP_PHONE_NUMBER")
        self.api_url = os.getenv(f"{tenant_prefix}_WHATSAPP_API_URL", "https://7107.api.green-api.com")

        # OpenAI credentials –¥–ª—è —ç—Ç–æ–≥–æ tenant
        self.openai_api_key = (
            os.getenv(f"{tenant_prefix}_OPENAI_API_KEY") or
            os.getenv("OPENAI_API_KEY")
        )
        self.openai_assistant_id = (
            os.getenv(f"{tenant_prefix}_OPENAI_ASSISTANT_ID") or
            os.getenv("OPENAI_ASSISTANT_ID")
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Telegram Config)
        enable_dialog_mode_str = (
            os.getenv(f"{tenant_prefix}_ENABLE_DIALOG_MODE") or
            os.getenv("ENABLE_DIALOG_MODE") or
            "false"
        )
        self.enable_dialog_mode = str(enable_dialog_mode_str).strip().lower() in ("true", "1", "yes")

        # –°–æ–∑–¥–∞–µ–º i18n —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        from packages.core.config import I18nInstance
        try:
            self.i18n = I18nInstance(tenant_slug=tenant_slug, language="ru")
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è  Localization file not found for {tenant_slug}, using default")
            self.i18n = None

    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã."""
        # phone_number –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π - GreenAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–µ–≥–æ
        return all([self.instance_id, self.api_token])


# –ú–∞–ø–ø–∏–Ω–≥ instance_id -> tenant_slug
TENANT_INSTANCES: Dict[str, str] = {}


def load_tenant_configs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–µ–Ω–∞–Ω—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    tenants = ["evopoliki", "five_deluxe"]  

    for tenant_slug in tenants:
        try:
            tenant_config = TenantConfig(tenant_slug)

            if tenant_config.is_valid():
                TENANT_INSTANCES[tenant_config.instance_id] = tenant_slug
                logger.info(f"‚úÖ Loaded WhatsApp config for {tenant_slug} (instance: {tenant_config.instance_id})")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ phone_number –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è GreenAPI)
                if not tenant_config.phone_number:
                    logger.warning(f"‚ö†Ô∏è  {tenant_slug}: WHATSAPP_PHONE_NUMBER not set (optional)")
                
                # –°–æ–∑–¥–∞–µ–º AssistantManager –¥–ª—è —ç—Ç–æ–≥–æ tenant
                if tenant_config.openai_api_key and tenant_config.openai_assistant_id:
                    try:
                        memory = get_memory()
                        assistant_manager = AssistantManager(
                            api_key=tenant_config.openai_api_key,
                            assistant_id=tenant_config.openai_assistant_id,
                            memory=memory
                        )
                        tenant_assistant_managers[tenant_slug] = assistant_manager
                        logger.info(f"‚úÖ AssistantManager initialized for {tenant_slug} (Assistant ID: {tenant_config.openai_assistant_id})")
                    except Exception as e:
                        logger.error(f"‚ùå Failed to initialize AssistantManager for {tenant_slug}: {e}")
                else:
                    logger.warning(f"‚ö†Ô∏è  Missing OpenAI credentials for {tenant_slug}")
            else:
                logger.warning(f"‚ö†Ô∏è  Missing WhatsApp config for {tenant_slug}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {tenant_slug}: {e}")

    logger.info(f"üì± Total active WhatsApp instances: {len(TENANT_INSTANCES)}")
    logger.info(f"ü§ñ Total active AI Assistants: {len(tenant_assistant_managers)}")


# ============================================================================
# GREENAPI CLIENT
# ============================================================================

class GreenAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GreenAPI."""

    def __init__(self, tenant_config: TenantConfig):
        self.tenant_config = tenant_config
        self.base_url = f"{tenant_config.api_url}/waInstance{tenant_config.instance_id}"

    async def send_message(self, chat_id: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp.

        –í–ê–ñ–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç HTML-—Ç–µ–≥–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ WhatsApp Markdown.

        Args:
            chat_id: ID —á–∞—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001234567@c.us)
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        # üîí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô "–¢–ê–ú–û–ñ–ï–ù–ù–´–ô –ö–û–ù–¢–†–û–õ–¨":
        # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ—á–∏—Å—Ç–∫—É HTML ‚Üí WhatsApp Markdown
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –¥–ª—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
        cleaned_message = clean_text_for_whatsapp(message)

        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ HTML-—Ç–µ–≥–∏
        if cleaned_message != message:
            logger.debug(f"[HTML_CLEANUP] Original: {message[:100]}...")
            logger.debug(f"[HTML_CLEANUP] Cleaned:  {cleaned_message[:100]}...")

        url = f"{self.base_url}/sendMessage/{self.tenant_config.api_token}"

        payload = {
            "chatId": chat_id,
            "message": cleaned_message  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
        }

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=payload, timeout=10.0)

                if response.status_code == 200:
                    logger.info(f"‚úÖ Message sent to {chat_id}: {message[:50]}...")
                    return True
                else:
                    logger.error(f"‚ùå Failed to send message: {response.status_code} - {response.text}")
                    return False

        except Exception as e:
            logger.error(f"‚ùå Exception while sending message: {e}")
            return False

    async def send_interactive_list(
        self,
        chat_id: str,
        header: str,
        body: str,
        footer: str,
        button_text: str,
        sections: list
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ WhatsApp —á–µ—Ä–µ–∑ GreenAPI.

        Args:
            chat_id: ID —á–∞—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001234567@c.us)
            header: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            body: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            footer: –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç (footer)
            button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
            sections: –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ [{"title": "...", "rows": [...]}]

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        url = f"{self.base_url}/sendMessage/{self.tenant_config.api_token}"

        payload = {
            "chatId": chat_id,
            "message": {
                "text": body
            },
            "quotedMessageId": None,
            "linkPreview": False
        }

        # GreenAPI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ (buttons) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sections –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        # –¢–∞–∫ –∫–∞–∫ GreenAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç interactive lists –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        message_parts = [f"*{header}*", "", body, ""]

        for section in sections:
            section_title = section.get("title", "")
            rows = section.get("rows", [])

            message_parts.append(f"*{section_title}*")

            for idx, row in enumerate(rows, 1):
                title = row.get("title", "")
                description = row.get("description", "")
                message_parts.append(f"{idx}Ô∏è‚É£ {title}")
                if description:
                    message_parts.append(f"   _{description}_")

            message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏

        if footer:
            message_parts.append(f"_{footer}_")

        formatted_message = "\n".join(message_parts)

        payload["message"]["text"] = formatted_message

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=payload, timeout=10.0)

                if response.status_code == 200:
                    logger.info(f"‚úÖ Interactive list sent to {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to send interactive list: {response.status_code} - {response.text}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return await self.send_message(chat_id, formatted_message)

        except Exception as e:
            logger.error(f"‚ùå Exception while sending interactive list: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.send_message(chat_id, formatted_message)

    async def send_menu_response(self, chat_id: str, menu_data: Dict[str, Any]) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –º–µ–Ω—é.

        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥.

        Args:
            chat_id: ID —á–∞—Ç–∞ WhatsApp
            menu_data: –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (dict —Å type –∏ –¥–∞–Ω–Ω—ã–º–∏)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        message_type = menu_data.get("type", "text")

        if message_type == "interactive_list":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
            return await self.send_interactive_list(
                chat_id=chat_id,
                header=menu_data.get("header", ""),
                body=menu_data.get("body", ""),
                footer=menu_data.get("footer", ""),
                button_text=menu_data.get("button_text", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
                sections=menu_data.get("sections", [])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.send_message(chat_id, menu_data.get("message", ""))


# ============================================================================
# WEBHOOK HANDLERS
# ============================================================================

@app.post("/webhook")
async def webhook_handler(
    request: Request,
    session: AsyncSession = Depends(get_session)
):
    """
    –ì–ª–∞–≤–Ω—ã–π endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç GreenAPI.

    GreenAPI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()

        logger.info(f"üì® Received webhook: {body}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±—Ö—É–∫–∞
        webhook_type = body.get("typeWebhook")
        instance_data = body.get("instanceData", {})
        message_data = body.get("messageData")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º instance_id
        instance_id = instance_data.get("idInstance")

        if not instance_id:
            logger.warning("‚ö†Ô∏è  No instance_id in webhook")
            return JSONResponse({"status": "error", "message": "No instance_id"}, status_code=400)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º tenant –ø–æ instance_id
        tenant_slug = TENANT_INSTANCES.get(str(instance_id))

        if not tenant_slug:
            logger.warning(f"‚ö†Ô∏è  Unknown instance_id: {instance_id}")
            return JSONResponse({"status": "error", "message": "Unknown instance"}, status_code=400)

        logger.info(f"üè¢ Tenant identified: {tenant_slug}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if webhook_type == "incomingMessageReceived":
            sender_data = body.get("senderData", {})
            await handle_incoming_message(tenant_slug, message_data, sender_data, session)

        return JSONResponse({"status": "ok"})

    except Exception as e:
        logger.error(f"‚ùå Error in webhook handler: {e}", exc_info=True)
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)


# ============================================================================
# –ü–†–ò–í–ê–¢–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–´ –° AI
# ============================================================================

async def _get_ai_response(
    chat_id: str,
    text: str,
    assistant_manager: AssistantManager
) -> str:
    """
    –ü–†–ò–í–ê–¢–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI Assistant.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ JSON —Å –∫–æ–º–∞–Ω–¥–æ–π, –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assistant_manager: AssistantManager —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ assistant_id

    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç AI (JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    """
    from .state_manager import get_thread_id, set_thread_id

    logger.info(f"ü§ñ [AI] –ó–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è")
    logger.info(f"ü§ñ [AI] Message: '{text}'")

    client = assistant_manager.client
    assistant_id = assistant_manager.assistant_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Thread
    thread_id = await get_thread_id(chat_id)

    if not thread_id:
        logger.info(f"üßµ [AI] –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π Thread...")
        thread = client.beta.threads.create()
        thread_id = thread.id
        await set_thread_id(chat_id, thread_id)
        logger.info(f"üßµ [AI] ‚úÖ Thread —Å–æ–∑–¥–∞–Ω: {thread_id}")
    else:
        logger.info(f"üßµ [AI] –ò—Å–ø–æ–ª—å–∑—É–µ–º Thread: {thread_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=text
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º Assistant
    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=assistant_id
    )
    logger.info(f"üèÉ [AI] Run —Å–æ–∑–¥–∞–Ω: {run.id}")

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    max_wait_time = 30
    elapsed_time = 0

    while run.status in ["queued", "in_progress"]:
        if elapsed_time >= max_wait_time:
            logger.error(f"‚ùå [AI] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        await async_lib.sleep(1)
        elapsed_time += 1

        run = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id
        )

    logger.info(f"üèÅ [AI] Run –∑–∞–≤–µ—Ä—à–µ–Ω: {run.status}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if run.status == "completed":
        messages = client.beta.threads.messages.list(
            thread_id=thread_id,
            limit=1,
            order="desc"
        )

        if messages.data and len(messages.data) > 0:
            response = messages.data[0].content[0].text.value
            logger.info(f"‚úÖ [AI] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: '{response[:100]}...'")
            return response
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

    elif run.status == "failed":
        error_msg = run.last_error.message if run.last_error else "Unknown"
        logger.error(f"‚ùå [AI] Run failed: {error_msg}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞."

    else:
        logger.error(f"‚ùå [AI] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {run.status}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# ============================================================================
# HELPER FUNCTIONS - IVR Routing and AI Command Handling
# ============================================================================

async def route_message_by_state(
    chat_id: str,
    text: str,
    tenant_config,
    session: AsyncSession
) -> Optional[str]:
    """
    === –ù–ê–î–ï–ñ–ù–ê–Ø IVR-–í–û–†–û–ù–ö–ê ===

    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    Returns:
        str: –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        None: –ï—Å–ª–∏ IVR –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å AI)
    """
    current_state = get_state(chat_id)
    logger.info(f"üîÄ [IVR] State: {current_state}, Text: '{text}'")

    try:
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ whatsapp_handlers.route_by_state
        response = await whatsapp_handlers.route_by_state(
            chat_id=chat_id,
            text=text,
            state=current_state,
            tenant_config=tenant_config,
            session=session
        )
        return response
    except Exception as e:
        logger.error(f"‚ùå [IVR] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ '–ú–µ–Ω—é' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."


async def handle_ai_command(
    chat_id: str,
    command_data: Dict[str, Any],
    tenant_config,
    session: AsyncSession,
    client: GreenAPIClient
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç AI –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç IVR-–≤–æ—Ä–æ–Ω–∫—É.

    –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!
    """
    intent = command_data.get("intent", "").upper()
    logger.info(f"üöÄ [AI_ROUTER] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '{intent}'")

    if intent == "ORDER":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        category = command_data.get("category")
        brand = command_data.get("brand")
        model = command_data.get("model")

        logger.info(f"üì¶ [ORDER] category={category}, brand={brand}, model={model}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
        if category:
            update_user_data(chat_id, "category", category)
        if brand:
            update_user_data(chat_id, "brand", brand)
        if model:
            update_user_data(chat_id, "model", model)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ IVR
        response = None

        if category and brand and model:
            # –í—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Üí –∫ –æ–ø—Ü–∏—è–º
            set_state(chat_id, WhatsAppState.EVA_SELECTING_OPTIONS)
            response = await whatsapp_handlers.handle_options_selection(
                chat_id, tenant_config, session
            )
        elif category and brand:
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è + –º–∞—Ä–∫–∞ ‚Üí —Å–ø—Ä–æ—Å–∏—Ç—å –º–æ–¥–µ–ª—å
            set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)
            response = await whatsapp_handlers.handle_brand_selection(
                chat_id, brand, tenant_config, session
            )
        elif category:
            # –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí —Å–ø—Ä–æ—Å–∏—Ç—å –º–∞—Ä–∫—É
            set_state(chat_id, WhatsAppState.EVA_WAITING_BRAND)
            response = await whatsapp_handlers.handle_category_selection(
                chat_id, category, tenant_config, session
            )
        else:
            # –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Üí –∫–∞—Ç–∞–ª–æ–≥
            set_state(chat_id, WhatsAppState.MAIN_MENU)
            response = await whatsapp_handlers.show_categories(
                chat_id, tenant_config, session
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if response:
            await client.send_message(chat_id, response)

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π intent
        await client.send_message(
            chat_id,
            "–Ø –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å, –Ω–æ –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ '–ú–µ–Ω—é'."
        )


async def handle_incoming_message(
    tenant_slug: str,
    message_data: Dict[str, Any],
    sender_data: Dict[str, Any],
    session: AsyncSession
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WhatsApp.

    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê (AI –∫–∞–∫ —Ä–æ—É—Ç–µ—Ä + IVR-–≤–æ—Ä–æ–Ω–∫–∞):
    - AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è (state == IDLE)
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–æ—Ä–æ–Ω–∫–µ (state != IDLE), AI –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    - –í—Å—è –ø–æ—à–∞–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è IVR-–≤–æ—Ä–æ–Ω–∫–æ–π –ë–ï–ó –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ AI
    - –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Rate Limits

    Args:
        tenant_slug: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä tenant (evopoliki, five_deluxe)
        message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–µ–±—Ö—É–∫–∞
        sender_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –≤–µ–±—Ö—É–∫–∞
        session: AsyncSession –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    """
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –®–ê–ì 0: –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    chat_id = sender_data.get("chatId")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in USER_LOCKS and USER_LOCKS[chat_id].locked():
        logger.warning(f"‚ö†Ô∏è [LOCK] –ó–∞–ø—Ä–æ—Å –¥–ª—è {chat_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        return  # –ë—ã—Å—Ç—Ä–æ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å webhook

    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if chat_id not in USER_LOCKS:
        USER_LOCKS[chat_id] = asyncio.Lock()

    lock = USER_LOCKS[chat_id]

    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    await lock.acquire()
    logger.info(f"üîí [LOCK] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è {chat_id} –∑–∞—Ö–≤–∞—á–µ–Ω–∞")

    try:
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –®–ê–ì 1: –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±—Ö—É–∫–∞
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        text_message = message_data.get("textMessageData", {}).get("textMessage", "")
        sender_name = sender_data.get("senderName", "–ì–æ—Å—Ç—å")

        logger.info(f"üí¨ [INCOMING] Message from {sender_name} ({chat_id}): '{text_message}'")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é tenant
        tenant_config = TenantConfig(tenant_slug)

        if not tenant_config.is_valid():
            logger.error(f"‚ùå [INCOMING] Invalid tenant config for {tenant_slug}")
            return

        # –ü–æ–ª—É—á–∞–µ–º AssistantManager –¥–ª—è —ç—Ç–æ–≥–æ tenant
        assistant_manager = tenant_assistant_managers.get(tenant_slug)
        if not assistant_manager:
            logger.error(f"‚ùå [INCOMING] No AssistantManager for {tenant_slug}")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º tenant_id (1 –¥–ª—è evopoliki, 2 –¥–ª—è five_deluxe)
        tenant_id = 1 if tenant_slug == "evopoliki" else 2

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –®–ê–ì 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–µ–Ω—é" - —Å–±—Ä–æ—Å State –∏ Thread
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        if text_message.lower() in ["–º–µ–Ω—é", "menu", "/start", "start"]:
            logger.info(f"üîÑ [MENU] –ö–æ–º–∞–Ω–¥–∞ '–ú–µ–Ω—é' - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–ª—è {chat_id}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º state
            clear_state(chat_id)
            set_state(chat_id, WhatsAppState.IDLE)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º thread
            clear_thread_id(chat_id)

            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ memory
            try:
                memory = get_memory()
                memory.clear_history(chat_id)
                logger.info(f"üóëÔ∏è [MEMORY] –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è {chat_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [MEMORY] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –®–ê–ì 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        current_state = get_state(chat_id)
        logger.info(f"üîç [STATE_CHECK] User state: {current_state}")

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        response_text = None
        client = GreenAPIClient(tenant_config)

        # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –£–ñ–ï –≤ –≤–æ—Ä–æ–Ω–∫–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û IVR
        if current_state != WhatsAppState.IDLE:
            logger.info(f"üîÄ [IVR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–æ—Ä–æ–Ω–∫–µ -> IVR")
            response_text = await route_message_by_state(
                chat_id, text_message, tenant_config, session
            )

        # 2. –ï—Å–ª–∏ IVR –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ IDLE, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ AI
        if response_text is None:
            logger.info("ü§ñ [ROUTER] –ü–µ—Ä–µ–¥–∞—é –≤ AI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
            ai_response = await _get_ai_response(chat_id, text_message, assistant_manager)

            # 3. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ö–û–ú–ê–ù–î–£ –≤ –æ—Ç–≤–µ—Ç–µ AI
            try:
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown
                cleaned = ai_response
                if '```json' in ai_response:
                    logger.info("üìÑ [JSON] –û—á–∏—â–∞—é markdown...")
                    cleaned = ai_response.split('```json')[1].split('```')[0].strip()

                command_data = json.loads(cleaned)

                if "intent" in command_data:
                    # –ó–ê–ü–£–°–ö–ê–ï–ú IVR-–í–û–†–û–ù–ö–£ –ß–ï–†–ï–ó AI
                    logger.info(f"üìã [JSON] Intent: {command_data['intent']}")
                    await handle_ai_command(
                        chat_id, command_data, tenant_config, session, client
                    )
                    # –û—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ handle_ai_command
                    return

                else:
                    # JSON –±–µ–∑ intent
                    response_text = cleaned

            except (json.JSONDecodeError, TypeError, IndexError):
                # AI –≤–µ—Ä–Ω—É–ª –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                response_text = ai_response

        # 4. –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–æ—Ç IVR –∏–ª–∏ AI), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if response_text:
            await client.send_message(chat_id, response_text)
            logger.info(f"‚úÖ [SEND] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå [INCOMING] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            tenant_config = TenantConfig(tenant_slug)
            if tenant_config.is_valid():
                client = GreenAPIClient(tenant_config)
                await client.send_message(
                    chat_id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ú–µ–Ω—é'."
                )
        except Exception as fallback_error:
            logger.error(f"‚ùå [INCOMING] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback-—Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")

    finally:
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –õ–Æ–ë–û–ú —Å–ª—É—á–∞–µ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞)
        if 'lock' in locals() and lock.locked():
            lock.release()
            logger.info(f"üîì [LOCK] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è {chat_id} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")


@app.get("/")
async def root():
    """Health check endpoint."""
    return {
        "status": "ok",
        "service": "WhatsApp Gateway",
        "version": "1.0.0",
        "active_tenants": len(TENANT_INSTANCES)
    }


@app.get("/debug/tenants")
async def debug_tenants():
    """Debug endpoint to show tenant instance mapping."""
    return {
        "status": "ok",
        "tenant_instances": TENANT_INSTANCES,
        "note": "instance_id -> tenant_slug mapping"
    }





# ============================================================================
# MAIN
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("WHATSAPP_GATEWAY_PORT", "8000"))

    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=True,  # Auto-reload –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        log_level="info"
    )
