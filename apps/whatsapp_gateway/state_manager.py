"""
State Manager –¥–ª—è WhatsApp Gateway.

–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (FSM –∞–Ω–∞–ª–æ–≥ –∏–∑ Telegram).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (dict) –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
"""

from typing import Dict, Any, Optional
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)


# In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {chat_id: {"state": str, "data": dict, "updated_at": datetime}}
user_states: Dict[str, Dict[str, Any]] = {}

# In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è OpenAI Thread IDs: {chat_id: thread_id}
thread_ids: Dict[str, str] = {}

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (15 –º–∏–Ω—É—Ç)
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç, –µ–≥–æ —Å–µ—Å—Å–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
STATE_TTL = timedelta(minutes=15)


class WhatsAppState:
    """–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WhatsApp –±–æ—Ç–µ."""

    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    IDLE = "idle"

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    MAIN_MENU = "main_menu"
    WAITING_FOR_CATEGORY_CHOICE = "waiting_for_category_choice"

    # –°—Ü–µ–Ω–∞—Ä–∏–π EVA-–∫–æ–≤—Ä–∏–∫–∏
    EVA_WAITING_BRAND = "eva_waiting_brand"
    EVA_WAITING_MODEL = "eva_waiting_model"
    EVA_SELECTING_OPTIONS = "eva_selecting_options"
    EVA_CONFIRMING_ORDER = "eva_confirming_order"

    # AI-—Ä–µ–∂–∏–º: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    AI_CONFIRMING_ORDER = "ai_confirming_order"

    # –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    WAITING_FOR_NAME = "waiting_for_name"

    # –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    CONTACT_MANAGER = "contact_manager"


def set_state(chat_id: str, state: str, data: Optional[Dict[str, Any]] = None):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    old_state = user_states.get(chat_id, {}).get("state", "NO_STATE")

    if chat_id not in user_states:
        user_states[chat_id] = {
            "state": state,
            "data": data or {},
            "updated_at": datetime.now()
        }
        logger.info(f"üîÑ [STATE_MACHINE] {chat_id[:15]}... | NEW STATE: {state}")
    else:
        user_states[chat_id]["state"] = state
        user_states[chat_id]["updated_at"] = datetime.now()
        logger.info(f"üîÑ [STATE_MACHINE] {chat_id[:15]}... | {old_state} ‚Üí {state}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (merge)
        if data:
            user_states[chat_id]["data"].update(data)
            logger.debug(f"üìù [STATE_MACHINE] –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {list(data.keys())}")


def get_state(chat_id: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ IDLE –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    if chat_id not in user_states:
        logger.debug(f"üîç [STATE_MACHINE] {chat_id[:15]}... | NO STATE FOUND ‚Üí returning IDLE")
        return WhatsAppState.IDLE

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    user_data = user_states[chat_id]
    elapsed_time = datetime.now() - user_data["updated_at"]

    if elapsed_time > STATE_TTL:
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ - –æ—á–∏—â–∞–µ–º
        logger.info(
            f"‚è±Ô∏è  [STATE_MACHINE] –°–µ—Å—Å–∏—è –¥–ª—è {chat_id[:15]}... —Å–±—Ä–æ—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É "
            f"({int(elapsed_time.total_seconds())}s –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)"
        )
        clear_state(chat_id)
        return WhatsAppState.IDLE

    current_state = user_data["state"]
    logger.debug(f"üîç [STATE_MACHINE] {chat_id[:15]}... | Current state: {current_state}")
    return current_state


def get_user_data(chat_id: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if chat_id not in user_states:
        return {}

    return user_states[chat_id].get("data", {})


def update_user_data(chat_id: str, data: Dict[str, Any]):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (merge).

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    if chat_id not in user_states:
        user_states[chat_id] = {
            "state": WhatsAppState.IDLE,
            "data": data,
            "updated_at": datetime.now()
        }
    else:
        user_states[chat_id]["data"].update(data)
        user_states[chat_id]["updated_at"] = datetime.now()


def clear_state(chat_id: str):
    """
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if chat_id in user_states:
        del user_states[chat_id]


def cleanup_expired_states():
    """
    –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç–∞—Ä—à–µ STATE_TTL).

    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–π —á–∞—Å).
    """
    now = datetime.now()
    expired_chats = [
        chat_id
        for chat_id, data in user_states.items()
        if now - data["updated_at"] > STATE_TTL
    ]

    for chat_id in expired_chats:
        del user_states[chat_id]

    return len(expired_chats)


# ==============================================================================
# THREAD MANAGEMENT –¥–ª—è OpenAI Assistants API
# ==============================================================================

async def get_thread_id(chat_id: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç thread_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        thread_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    return thread_ids.get(chat_id)


async def set_thread_id(chat_id: str, thread_id: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç thread_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        thread_id: OpenAI Thread ID
    """
    thread_ids[chat_id] = thread_id
    logger.info(f"üßµ [THREAD_MANAGER] –°–æ—Ö—Ä–∞–Ω–µ–Ω thread_id={thread_id} –¥–ª—è chat_id={chat_id[:15]}...")


def clear_thread_id(chat_id: str):
    """
    –£–¥–∞–ª—è–µ—Ç thread_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if chat_id in thread_ids:
        del thread_ids[chat_id]
        logger.info(f"üóëÔ∏è [THREAD_MANAGER] –£–¥–∞–ª–µ–Ω thread_id –¥–ª—è chat_id={chat_id[:15]}...")
