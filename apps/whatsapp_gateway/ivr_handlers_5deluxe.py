"""
IVR Handlers –¥–ª—è 5deluxe - –ø—Ä–æ—Å—Ç–æ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –º–µ–Ω—é –±–µ–∑ AI.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö
–≤ –≤—ã–∑–æ–≤—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –∏–∑ packages/core/.
"""

import sys
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ packages
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "packages"))

from typing import Optional

from sqlalchemy.ext.asyncio import AsyncSession

from core.config import Config
from core.ai.assistant import AssistantManager, get_or_create_thread
from core.ai.response_parser import detect_response_type, extract_order_data
from smart_input_handler import (
    handle_text_or_digit_input,
    apply_two_level_fuzzy,
    generate_confirmation_message,
    generate_not_found_message
)
from core.keyboards.whatsapp_ui import (
    get_whatsapp_main_menu,
    get_whatsapp_options_menu,
    get_whatsapp_confirmation_menu,
    get_whatsapp_brand_selection_text,
    get_whatsapp_model_selection_text,
    get_whatsapp_fuzzy_suggestion_text,
    format_whatsapp_message
)
from core.db.queries import (
    get_tenant_by_slug,
    get_unique_brands_from_db,
    get_models_for_brand_from_db,
    search_patterns,
    fuzzy_search_model,
    get_brand_by_name
)

from state_manager import (
    WhatsAppState,
    get_state,
    set_state,
    get_user_data,
    update_user_data,
    clear_state
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
BRANDS_PER_PAGE = 8
MODELS_PER_PAGE = 8


async def handle_5deluxe_message(
    chat_id: str,
    text: str,
    config: Config,
    session: AsyncSession,
    sender_name: str = "–ì–æ—Å—Ç—å"
) -> str:
    """
    –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç 5deluxe.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
        session: –°–µ—Å—Å–∏—è –ë–î
        sender_name: –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –≤–µ–±—Ö—É–∫–∞ WhatsApp

    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º sender_name –≤ user_data –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ
    user_data = get_user_data(chat_id)
    if not user_data.get("sender_name"):
        update_user_data(chat_id, {"sender_name": sender_name})
    # üîç –°–ï–ö–†–ï–¢–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ö–û–ú–ê–ù–î–ê: ask_ai: (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if text.lower().startswith("ask_ai:"):
        return await handle_ask_ai_whatsapp(chat_id, text, config)
    
    current_state = get_state(chat_id)
    logger.info(f"[5DELUXE_IVR] User {chat_id} in state: {current_state}, message: '{text}'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã RESET (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if text.lower() in ["reset_dialog", "/reset", "reset"]:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ chat_id)
        # –§–æ—Ä–º–∞—Ç chat_id: "996XXXXXXXXX@c.us"
        phone_number = chat_id.split("@")[0] if "@" in chat_id else chat_id
        admin_phones = [str(admin_id) for admin_id in []]
        
        if phone_number not in admin_phones:
            logger.warning(f"[RESET] Unauthorized access attempt from {chat_id}")
            return "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        
        logger.info(f"[RESET] Admin {chat_id} requested dialog reset")
        clear_state(chat_id)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é AI (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        try:
            from core.ai.memory import get_memory
            memory = get_memory()
            memory.clear_history(chat_id)
            logger.info(f"[RESET] AI memory cleared for {chat_id}")
        except Exception as e:
            logger.debug(f"[RESET] AI memory not available: {e}")
        
        reset_message = (
            "üîÑ *–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω!*\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
        )
        return reset_message + "\n" + (await show_main_menu(chat_id, config))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ "–ú–µ–Ω—é" / "Start" - –∫–æ—Ä–æ—Ç–∫–æ–µ –º–µ–Ω—é
    if text.lower() in ["–º–µ–Ω—é", "menu", "/start", "start"]:
        clear_state(chat_id)
        return await show_main_menu(chat_id, config, is_return=True)

    # UX FIX: –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (IDLE) - –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if current_state == WhatsAppState.IDLE:
        logger.info(f"[5DELUXE_IVR] New user detected, showing first contact welcome")
        return await show_main_menu(chat_id, config, is_first_contact=True)

    # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if current_state == WhatsAppState.MAIN_MENU:
        return await handle_main_menu_input(chat_id, text, config, session)

    elif current_state == WhatsAppState.EVA_WAITING_BRAND:
        return await handle_brand_selection(chat_id, text, config, session)

    elif current_state == WhatsAppState.EVA_WAITING_MODEL:
        return await handle_model_selection(chat_id, text, config, session)

    elif current_state == WhatsAppState.EVA_SELECTING_OPTIONS:
        return await handle_options_selection(chat_id, text, config, session)

    elif current_state == WhatsAppState.EVA_CONFIRMING_ORDER:
        return await handle_order_confirmation(chat_id, text, config)

    # –£–î–ê–õ–ï–ù–û: WAITING_FOR_NAME –∏ WAITING_FOR_PHONE - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ WhatsApp

    elif current_state == WhatsAppState.CONTACT_MANAGER:
        return await handle_contact_manager(chat_id, text, config)

    else:
        logger.warning(f"[5DELUXE_IVR] Unknown state: {current_state}")
        return await show_main_menu(chat_id, config)


async def show_main_menu(chat_id: str, config: Config, is_first_contact: bool = False, is_return: bool = False) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
        is_first_contact: True –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç)
        is_return: True –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –º–µ–Ω—é (–∫–æ–º–∞–Ω–¥–∞ "–ú–µ–Ω—é")

    Returns:
        str: –¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    i18n = config.i18n
    set_state(chat_id, WhatsAppState.MAIN_MENU)

    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    if is_first_contact:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –í–°–¢–†–û–ï–ù–ù–´–ú –º–µ–Ω—é - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º menu_text!
        return i18n.get('start.first_contact_welcome')
    elif is_return:
        # –ö–æ—Ä–æ—Ç–∫–æ–µ –º–µ–Ω—é –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        welcome_text = f"{i18n.get('start.main_menu')}\n"
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
        welcome_text = f"{i18n.get('start.main_menu')}\n"

    menu_text, _ = get_whatsapp_main_menu(i18n)
    return format_whatsapp_message(welcome_text, menu_text)


async def handle_main_menu_input(
    chat_id: str,
    text: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –í–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    """
    i18n = config.i18n
    _, callback_mapping = get_whatsapp_main_menu(i18n)

    if text not in callback_mapping:
        return f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ {len(callback_mapping)}."

    callback_data = callback_mapping[text]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_data
    if callback_data.startswith("category:"):
        category = callback_data.split(":")[1]
        return await start_category_flow(chat_id, category, config, session)

    elif callback_data == "action:contact_manager":
        return await handle_contact_manager_request(chat_id, config)

    else:
        return "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."


async def start_category_flow(
    chat_id: str,
    category: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    –î–ª—è 5deluxe –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—ã–π flow:
    1. –í—ã–±–æ—Ä –º–∞—Ä–∫–∏
    2. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    3. –ü–æ–∏—Å–∫ –ª–µ–∫–∞–ª
    4. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        category: –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫—É
    """
    i18n = config.i18n

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category_names = {
        "5d_mats": i18n.get("buttons.categories.5d_mats"),
        "premium_covers": i18n.get("buttons.categories.premium_covers"),
        "alcantara_dash": i18n.get("buttons.categories.alcantara_dash"),
        "eva_mats": i18n.get("buttons.categories.eva_mats")
    }

    category_name = category_names.get(category, category)

    update_user_data(chat_id, {
        "category": category,
        "category_name": category_name
    })

    tenant = await get_tenant_by_slug(session, config.tenant_slug)

    if not tenant:
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    brands_list = await get_unique_brands_from_db(tenant.id, session)

    if not brands_list:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–∑–∞ –º–∞—Ä–æ–∫ –ø—É—Å—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ä–æ–∫
    return await show_brands_page(chat_id, 1, brands_list, config)


async def show_brands_page(chat_id: str, page: int, brands_list: list, config: Config) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        brands_list: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç —Å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –º–∞—Ä–æ–∫
    """
    i18n = config.i18n

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_brands = len(brands_list)
    total_pages = (total_brands + BRANDS_PER_PAGE - 1) // BRANDS_PER_PAGE

    start_idx = (page - 1) * BRANDS_PER_PAGE
    end_idx = start_idx + BRANDS_PER_PAGE
    brands_on_page = brands_list[start_idx:end_idx]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
    menu_text, callback_mapping = get_whatsapp_brand_selection_text(
        brands_on_page, page, total_pages, i18n
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    set_state(chat_id, WhatsAppState.EVA_WAITING_BRAND)
    update_user_data(chat_id, {
        "brands_page": page,
        "brands_list": brands_list,
        "brands_callback_mapping": callback_mapping
    })

    user_data = get_user_data(chat_id)
    category_name = user_data.get("category_name", "–ø—Ä–æ–¥—É–∫—Ç–∞")

    intro = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_name}"
    return format_whatsapp_message(intro, menu_text)


async def handle_jump_with_model(
    chat_id: str,
    brand_name: str,
    model_input: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç "–ü–†–´–ñ–û–ö –ß–ï–†–ï–ó –®–ê–ì–ò" –∫–æ–≥–¥–∞ AI –∏–∑–≤–ª–µ–∫ –º–∞—Ä–∫—É –ò –º–æ–¥–µ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        brand_name: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∞ (—É–∂–µ –ø—Ä–æ—à–ª–∞ fuzzy >70%)
        model_input: –ú–æ–¥–µ–ª—å –æ—Ç AI (–Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ fuzzy)
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        session: –°–µ—Å—Å–∏—è –ë–î
        
    Returns:
        str: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    logger.info(f"[üöÄ JUMP] Processing jump: {brand_name} + {model_input}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
    tenant = await get_tenant_by_slug(session, config.tenant_slug)
    if not tenant:
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    models_list = await get_models_for_brand_from_db(brand_name, tenant.id, session)
    
    if not models_list:
        logger.warning(f"[üöÄ JUMP] No models for {brand_name} - fallback to normal flow")
        # –ù–µ—Ç –º–æ–¥–µ–ª–µ–π - –æ–±—ã—á–Ω—ã–π —Ñ–ª–æ—É
        return await process_brand(chat_id, brand_name, config, session)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π fuzzy –∫ –º–æ–¥–µ–ª–∏
    model_fuzzy = apply_two_level_fuzzy(model_input, models_list, 70.0, 60.0)
    
    if model_fuzzy["action"] == "apply":
        # >70% - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º, –ü–†–´–ñ–û–ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!
        model_name = model_fuzzy["value"]
        logger.info(
            f"[üöÄ JUMP] ‚úÖ Success! Auto-matched model: '{model_input}' ‚Üí '{model_name}' "
            f"({model_fuzzy['similarity']:.1f}%)"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        update_user_data(chat_id, {
            "brand_name": brand_name,
            "model_name": model_name
        })
        
        # –ü–†–´–ñ–û–ö - —Å—Ä–∞–∑—É –∫ –ø–æ–∏—Å–∫—É –ª–µ–∫–∞–ª
        return await process_model(chat_id, model_name, config, session)
        
    elif model_fuzzy["action"] == "ask":
        # 60-70% - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª–∏
        logger.info(
            f"[üöÄ JUMP] Need model confirmation: '{model_input}' ‚Üí '{model_fuzzy['value']}' "
            f"({model_fuzzy['similarity']:.1f}%)"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫—É, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –º–æ–¥–µ–ª—å
        update_user_data(chat_id, {
            "brand_name": brand_name,
            "suggested_model": model_fuzzy["value"],
            "original_model_input": model_input
        })
        set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)
        
        return (
            f"‚úÖ –ú–∞—Ä–∫–∞: {brand_name}\n"
            f"{generate_confirmation_message('model', model_input, model_fuzzy['value'], model_fuzzy['similarity'])}"
        )
        
    else:
        # <60% - –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
        logger.warning(f"[üöÄ JUMP] Model not found: '{model_input}' - showing models list")
        update_user_data(chat_id, {"brand_name": brand_name})
        return await process_brand(chat_id, brand_name, config, session)


async def handle_brand_selection(
    chat_id: str,
    text: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–£–Æ "—É–º–Ω—É—é" –ª–æ–≥–∏–∫—É.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –í–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
        session: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    """
    i18n = config.i18n
    user_data = get_user_data(chat_id)
    callback_mapping = user_data.get("brands_callback_mapping", {})
    brands_list = user_data.get("brands_list", [])
    category_name = user_data.get("category_name", "–∞–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø (–¥–ª—è —Å—Ö–æ–∂–µ—Å—Ç–∏ 60-70%) ===
    suggested_brand = user_data.get("suggested_brand")
    if suggested_brand and text in ["1", "2"]:
        if text == "1":
            # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
            update_user_data(chat_id, {"suggested_brand": None, "original_input": None})
            return await process_brand(chat_id, suggested_brand, config, session)
        elif text == "2":
            # –û—Ç–∫–∞–∑–∞–ª—Å—è
            update_user_data(chat_id, {"suggested_brand": None, "original_input": None})
            return "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –µ—â–µ —Ä–∞–∑:"
    
    # === –ü–†–û–í–ï–†–ö–ê: –¶–ò–§–†–û–í–û–ô –í–í–û–î (–¥–æ AI) ===
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã –î–û –≤—ã–∑–æ–≤–∞ AI!
    if text.strip() in callback_mapping:
        logger.info(f"[BRAND_SELECT] Digit input: '{text}' -> processing directly without AI")
        callback_data = callback_mapping[text.strip()]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if callback_data.startswith("brands_page:"):
            page = int(callback_data.split(":")[1])
            return await show_brands_page(chat_id, page, brands_list, config)
        
        # –í—ã–±–æ—Ä –º–∞—Ä–∫–∏
        elif callback_data.startswith("brand:"):
            brand_name = callback_data.split(":", 1)[1]
            return await process_brand(chat_id, brand_name, config, session)
    
    # === –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê —á–µ—Ä–µ–∑ handle_text_or_digit_input (ONLY for text) ===
    logger.info(f"[BRAND_SELECT] Text input detected: '{text}' -> using AI+Fuzzy")
    result = await handle_text_or_digit_input(
        user_input=text.strip(),
        context="brand",
        chat_id=chat_id,
        callback_mapping=callback_mapping,
        database_list=brands_list,
        category_name=category_name,
        brand_name=None,
        session=session,
        config=config  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫
    )
    
    result_type = result.get("type")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê "–ü–†–´–ñ–ö–ê –ß–ï–†–ï–ó –®–ê–ì–ò" (–º–∞—Ä–∫–∞+–º–æ–¥–µ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ) ===
    if result_type == "jump":
        brand_ai = result.get("brand")
        model_ai = result.get("model")
        
        logger.info(f"[üöÄ JUMP] Detected both: '{brand_ai}' + '{model_ai}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫—É —á–µ—Ä–µ–∑ fuzzy
        brand_fuzzy = apply_two_level_fuzzy(brand_ai, brands_list, 70.0, 60.0)
        
        if brand_fuzzy["action"] == "apply":
            # –ú–∞—Ä–∫–∞ >70% - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ–ª–∏
            brand_name = brand_fuzzy["value"]
            return await handle_jump_with_model(
                chat_id, brand_name, model_ai, config, session
            )
        elif brand_fuzzy["action"] == "ask":
            # –ú–∞—Ä–∫–∞ 60-70% - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            update_user_data(chat_id, {
                "suggested_brand": brand_fuzzy["value"],
                "pending_model": model_ai  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä—ã–∂–∫–∞
            })
            set_state(chat_id, WhatsAppState.EVA_WAITING_BRAND)
            return generate_confirmation_message(
                "brand", text, brand_fuzzy["value"], brand_fuzzy["similarity"]
            )
        else:
            # –ú–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            return generate_not_found_message("brand", text)
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê (>70%) ===
    elif result_type == "text_auto":
        brand_name = result.get("value")
        logger.info(f"[BRAND_AUTO] Auto-apply: '{brand_name}' ({result.get('similarity'):.1f}%)")
        return await process_brand(chat_id, brand_name, config, session)
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê (60-70%) ===
    elif result_type == "text_ask":
        suggested_value = result.get("value")
        similarity = result.get("similarity")
        
        logger.info(f"[BRAND_ASK] Need confirmation: '{suggested_value}' ({similarity:.1f}%)")
        
        update_user_data(chat_id, {
            "suggested_brand": suggested_value,
            "original_input": text.strip()
        })
        set_state(chat_id, WhatsAppState.EVA_WAITING_BRAND)
        
        return generate_confirmation_message("brand", text, suggested_value, similarity)
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê: –ù–ï –ù–ê–ô–î–ï–ù–û (<60%) ===
    else:  # text_not_found
        logger.warning(f"[BRAND_NOT_FOUND] '{text}' similarity <60%")
        return generate_not_found_message("brand", text)


async def process_brand(
    chat_id: str,
    brand_name: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—Ä–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        brand_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç —Å –º–æ–¥–µ–ª—è–º–∏
    """
    i18n = config.i18n

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫—É
    update_user_data(chat_id, {"brand_name": brand_name})

    tenant = await get_tenant_by_slug(session, config.tenant_slug)

    if not tenant:
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    models_list = await get_models_for_brand_from_db(brand_name, tenant.id, session)

    if not models_list:
        # –ù–µ—Ç –ª–µ–∫–∞–ª –¥–ª—è —ç—Ç–æ–π –º–∞—Ä–∫–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä
        return (
            f"–ü–æ—Ö–æ–∂–µ, –≥–æ—Ç–æ–≤—ã—Ö –ª–µ–∫–∞–ª –¥–ª—è –º–∞—Ä–∫–∏ {brand_name} —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç. "
            f"–ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞! üëç\n\n"
            f"–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–≤—Ä–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n"
            f"‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            f"‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞ –ø–æ–¥ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n"
            f"‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å–∞–ª–æ–Ω–∞\n"
            f"‚Ä¢ –í—ã–µ–∑–¥ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ—Ä–æ–≤\n\n"
            f"–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?\n"
            f"1 - –ó–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä\n"
            f"2 - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥–µ–ª–µ–π
    return await show_models_page(chat_id, 1, models_list, brand_name, config)


async def show_models_page(chat_id: str, page: int, models_list: list, brand_name: str, config: Config) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–æ–¥–µ–ª—è–º–∏.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        models_list: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        brand_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç —Å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π
    """
    i18n = config.i18n

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_models = len(models_list)
    total_pages = (total_models + MODELS_PER_PAGE - 1) // MODELS_PER_PAGE

    start_idx = (page - 1) * MODELS_PER_PAGE
    end_idx = start_idx + MODELS_PER_PAGE
    models_on_page = models_list[start_idx:end_idx]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
    menu_text, callback_mapping = get_whatsapp_model_selection_text(
        models_on_page, page, total_pages, brand_name, i18n
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)
    update_user_data(chat_id, {
        "models_page": page,
        "models_list": models_list,
        "models_callback_mapping": callback_mapping
    })

    return menu_text


async def handle_model_selection(
    chat_id: str,
    text: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–£–Æ "—É–º–Ω—É—é" –ª–æ–≥–∏–∫—É.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –í–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
        session: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    """
    i18n = config.i18n
    user_data = get_user_data(chat_id)
    callback_mapping = user_data.get("models_callback_mapping", {})
    models_list = user_data.get("models_list", [])
    brand_name = user_data.get("brand_name", "")
    category_name = user_data.get("category_name", "–∞–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø (–¥–ª—è —Å—Ö–æ–∂–µ—Å—Ç–∏ 60-70%) ===
    suggested_model = user_data.get("suggested_model")
    if suggested_model and text in ["1", "2"]:
        if text == "1":
            # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
            update_user_data(chat_id, {"suggested_model": None, "original_input": None})
            return await process_model(chat_id, suggested_model, config, session)
        elif text == "2":
            # –û—Ç–∫–∞–∑–∞–ª—Å—è
            update_user_data(chat_id, {"suggested_model": None, "original_input": None})
            return "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –µ—â–µ —Ä–∞–∑:"
    
    # === –ü–†–û–í–ï–†–ö–ê: –¶–ò–§–†–û–í–û–ô –í–í–û–î (–¥–æ AI) ===
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã –î–û –≤—ã–∑–æ–≤–∞ AI!
    if text.strip() in callback_mapping:
        logger.info(f"[MODEL_SELECT] Digit input: '{text}' -> processing directly without AI")
        callback_data = callback_mapping[text.strip()]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if callback_data.startswith("models_page:"):
            page = int(callback_data.split(":")[1])
            return await show_models_page(chat_id, page, models_list, brand_name, config)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        elif callback_data.startswith("model:"):
            model_name = callback_data.split(":", 1)[1]
            return await process_model(chat_id, model_name, config, session)
    
    # === –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê —á–µ—Ä–µ–∑ handle_text_or_digit_input (ONLY for text) ===
    logger.info(f"[MODEL_SELECT] Text input detected: '{text}' -> using AI+Fuzzy")
    result = await handle_text_or_digit_input(
        user_input=text.strip(),
        context="model",
        chat_id=chat_id,
        callback_mapping=callback_mapping,
        database_list=models_list,
        category_name=category_name,
        brand_name=brand_name,
        session=session,
        config=config  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫
    )
    
    result_type = result.get("type")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê (>70%) ===
    if result_type == "text_auto":
        model_name = result.get("value")
        logger.info(f"[MODEL_AUTO] Auto-apply: '{model_name}' ({result.get('similarity'):.1f}%)")
        return await process_model(chat_id, model_name, config, session)
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê (60-70%) ===
    elif result_type == "text_ask":
        suggested_value = result.get("value")
        similarity = result.get("similarity")
        
        logger.info(f"[MODEL_ASK] Need confirmation: '{suggested_value}' ({similarity:.1f}%)")
        
        update_user_data(chat_id, {
            "suggested_model": suggested_value,
            "original_input": text.strip()
        })
        set_state(chat_id, WhatsAppState.EVA_WAITING_MODEL)
        
        return generate_confirmation_message("model", text, suggested_value, similarity)
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê: –ù–ï –ù–ê–ô–î–ï–ù–û (<60%) ===
    else:  # text_not_found
        logger.warning(f"[MODEL_NOT_FOUND] '{text}' similarity <60%")
        return generate_not_found_message("model", text)


async def process_model(
    chat_id: str,
    model_name: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –∏—â–µ—Ç –ª–µ–∫–∞–ª–∞.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    i18n = config.i18n
    user_data = get_user_data(chat_id)
    brand_name = user_data.get("brand_name", "")
    category = user_data.get("category", "5d_mats")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    update_user_data(chat_id, {"model_name": model_name})

    tenant = await get_tenant_by_slug(session, config.tenant_slug)

    if not tenant:
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    patterns = await search_patterns(
        session=session,
        brand_name=brand_name,
        model_name=model_name,
        tenant_id=tenant.id,
        category_code=category
    )

    if not patterns:
        # –ù–µ—Ç –ª–µ–∫–∞–ª - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
        update_user_data(chat_id, {"is_individual_order": True})
        return await show_options_menu(chat_id, config, patterns_found=False)

    # –ù–∞–π–¥–µ–Ω—ã –ª–µ–∫–∞–ª–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏
    return await show_options_menu(chat_id, config, patterns_found=True)


async def show_options_menu(chat_id: str, config: Config, patterns_found: bool = True) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
        patterns_found: True, –µ—Å–ª–∏ –ª–µ–∫–∞–ª–∞ –Ω–∞–π–¥–µ–Ω—ã

    Returns:
        str: –¢–µ–∫—Å—Ç —Å –æ–ø—Ü–∏—è–º–∏
    """
    i18n = config.i18n
    user_data = get_user_data(chat_id)
    category = user_data.get("category", "")

    # –ú–µ–Ω—é –æ–ø—Ü–∏–π —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    menu_text, callback_mapping = get_whatsapp_options_menu(i18n, category, individual_order=not patterns_found)

    set_state(chat_id, WhatsAppState.EVA_SELECTING_OPTIONS)
    update_user_data(chat_id, {"options_callback_mapping": callback_mapping})

    brand_name = user_data.get("brand_name", "")
    model_name = user_data.get("model_name", "")
    category_name = user_data.get("category_name", "")

    if patterns_found:
        intro = f"–û—Ç–ª–∏—á–Ω–æ! –î–ª—è {brand_name} {model_name} –µ—Å—Ç—å –ª–µ–∫–∞–ª–∞.\n\n{category_name}"
    else:
        intro = (
            f"–ü–æ—Ö–æ–∂–µ, –≥–æ—Ç–æ–≤—ã—Ö –ª–µ–∫–∞–ª –¥–ª—è {brand_name} {model_name} —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç. "
            f"–ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞! üëç\n\n"
            f"–ú—ã –º–æ–∂–µ–º –∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. "
            f"–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞–º –Ω—É–∂–Ω—ã –∫–æ–≤—Ä–∏–∫–∏ —Å –±–æ—Ä—Ç–∞–º–∏ –∏–ª–∏ –±–µ–∑?"
        )

    return format_whatsapp_message(intro, menu_text)


async def handle_options_selection(chat_id: str, text: str, config: Config) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø—Ü–∏–π.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –í–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """
    i18n = config.i18n
    user_data = get_user_data(chat_id)
    callback_mapping = user_data.get("options_callback_mapping", {})

    if text not in callback_mapping:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 3."

    callback_data = callback_mapping[text]

    if callback_data == "action:back_to_menu":
        clear_state(chat_id)
        return await show_main_menu(chat_id, config)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
    if callback_data.startswith("eva_option:"):
        parts = callback_data.split(":")
        option = parts[2] if len(parts) > 2 else "with_borders"

        option_names = {
            "with_borders": i18n.get("buttons.options.with_borders"),
            "without_borders": i18n.get("buttons.options.without_borders"),
            "consultation": i18n.get("buttons.options.need_consultation")
        }

        option_name = option_names.get(option, option)
        update_user_data(chat_id, {"selected_option": option, "selected_option_name": option_name})

        return await show_order_confirmation(chat_id, config)

    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."


async def show_order_confirmation(chat_id: str, config: Config) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    i18n = config.i18n
    user_data = get_user_data(chat_id)

    brand_name = user_data.get("brand_name", "")
    model_name = user_data.get("model_name", "")
    category_name = user_data.get("category_name", "")
    option_name = user_data.get("selected_option_name", "")

    summary = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {brand_name} {model_name}\n"
        f"–û–ø—Ü–∏—è: {option_name}\n"
    )

    menu_text, callback_mapping = get_whatsapp_confirmation_menu(i18n)

    set_state(chat_id, WhatsAppState.EVA_CONFIRMING_ORDER)
    update_user_data(chat_id, {"confirmation_callback_mapping": callback_mapping})

    return format_whatsapp_message(summary, menu_text)


async def handle_order_confirmation(chat_id: str, text: str, config: Config) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –í–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –¢–µ–∫—Å—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    """
    i18n = config.i18n
    user_data = get_user_data(chat_id)
    callback_mapping = user_data.get("confirmation_callback_mapping", {})
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "–ª–µ–∫–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç: 1 - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä, 2 - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
    if not callback_mapping and text in ["1", "2"]:
        if text == "1":
            # WhatsApp –í–û–†–û–ù–ö–ê: –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä
            update_user_data(chat_id, {"is_individual_order": True})
            return await send_whatsapp_order(chat_id, config)
        elif text == "2":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            clear_state(chat_id)
            return await show_main_menu(chat_id, config)

    if text not in callback_mapping:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ 2 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."

    callback_data = callback_mapping[text]

    if callback_data == "order:confirm":
        # WhatsApp –í–û–†–û–ù–ö–ê: –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        return await send_whatsapp_order(chat_id, config)

    elif callback_data == "action:back_to_menu":
        clear_state(chat_id)
        return await show_main_menu(chat_id, config)

    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."


# –£–î–ê–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ handle_name_input –∏ handle_phone_input –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
# WhatsApp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ chat_id –∏ senderName
# –°–º. —Ñ—É–Ω–∫—Ü–∏—é send_whatsapp_order() –Ω–∏–∂–µ


async def send_whatsapp_order(chat_id: str, config: Config) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∏–∑ WhatsApp, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ chat_id –∏ senderName.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp (—Ñ–æ—Ä–º–∞—Ç: "996XXXXXXXXX@c.us")
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant
        
    Returns:
        str: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
    """
    user_data = get_user_data(chat_id)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ chat_id
    customer_phone = chat_id.split("@")[0] if "@" in chat_id else chat_id
    customer_phone = f"+{customer_phone}"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sender_name –∏–∑ user_data (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ)
    customer_name = user_data.get("sender_name", "–ö–ª–∏–µ–Ω—Ç WhatsApp")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    brand_name = user_data.get("brand_name", "")
    model_name = user_data.get("model_name", "")
    category_name = user_data.get("category_name", "")
    option_name = user_data.get("selected_option_name", "")
    is_individual_order = user_data.get("is_individual_order", False)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ª–æ–≥–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    log_details = []
    msg_details = []

    if is_individual_order:
        log_details.append("  Type: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä")
        msg_details.append("‚ú® –¢–∏–ø: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä")

    if option_name:
        log_details.append(f"  Option: {option_name}")
        msg_details.append(f"‚öôÔ∏è –û–ø—Ü–∏—è: {option_name}")

    log_details_str = "\n".join(log_details)
    msg_details_str = "\n".join(msg_details) if msg_details else ""

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
    logger.info(
        f"[WHATSAPP_ORDER] New order from WhatsApp:\n"
        f"  Name: {customer_name}\n"
        f"  Phone: {customer_phone}\n"
        f"  Vehicle: {brand_name} {model_name}\n"
        f"  Category: {category_name}\n"
        f"{log_details_str}"
    )
    
    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Airtable –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    clear_state(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_message = (
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, {customer_name}!\n"
        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:\n\n"
        f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {brand_name} {model_name}\n"
    )

    if msg_details_str:
        confirmation_message += f"{msg_details_str}\n"

    confirmation_message += (
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n\n"
        f"üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n"
        f"–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ú–µ–Ω—é'"
    )
    
    return confirmation_message


async def handle_contact_manager_request(chat_id: str, config: Config) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    i18n = config.i18n
    text = i18n.get("info_sections.contacts.text")

    clear_state(chat_id)

    return f"{text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."


async def handle_contact_manager(chat_id: str, text: str, config: Config) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CONTACT_MANAGER.

    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tenant

    Returns:
        str: –û—Ç–≤–µ—Ç
    """
    if text.lower() in ["–º–µ–Ω—é", "menu"]:
        return await show_main_menu(chat_id, config)

    return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."


async def handle_ask_ai_whatsapp(chat_id: str, text: str, config: Config) -> str:
    """
    –°–µ–∫—Ä–µ—Ç–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å AI Assistant —á–µ—Ä–µ–∑ WhatsApp.
    
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç FSM –∏ –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.
    
    –§–æ—Ä–º–∞—Ç: ask_ai: <–≤–æ–ø—Ä–æ—Å>
    –ü—Ä–∏–º–µ—Ä: ask_ai: –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?
    
    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp (—Ñ–æ—Ä–º–∞—Ç: "996XXXXXXXXX@c.us")
        text: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
    
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç AI –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ chat_id
    phone_number = chat_id.split("@")[0] if "@" in chat_id else chat_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_phones = [str(admin_id) for admin_id in []]
    
    if phone_number not in admin_phones:
        logger.warning(f"[AI_DEBUG_WA] Unauthorized access attempt from {chat_id}")
        return ""  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–≤—Å—ë –ø–æ—Å–ª–µ "ask_ai: ")
    question_parts = text.split(":", 1)
    
    if len(question_parts) < 2 or not question_parts[1].strip():
        return (
            "‚ùì –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "ask_ai: –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "ask_ai: –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )
    
    question_text = question_parts[1].strip()
    
    logger.info(f"[AI_DEBUG_WA] Admin {phone_number} asking: '{question_text[:50]}...'")
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssistantManager
        from core.ai.assistant import AssistantManager
        
        assistant = AssistantManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread_id –¥–ª—è –∞–¥–º–∏–Ω–∞
        thread_id = assistant.create_thread()
        
        logger.info(f"[AI_DEBUG_WA] Created thread: {thread_id}")
        
        # –ù–ê–ü–†–Ø–ú–£–Æ –≤—ã–∑—ã–≤–∞–µ–º AI Assistant (–±–µ–∑ FSM, –±–µ–∑ state_manager)
        response, _ = await assistant.get_response(
            thread_id=thread_id,
            user_message=question_text,
            chat_id=chat_id,
            timeout=30
        )
        
        logger.info(f"[AI_DEBUG_WA] AI response received: {len(response)} chars")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
        return f"ü§ñ AI Assistant Response:\n\n{response}"
        
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        error_message = (
            f"‚ùå AI Module Error:\n\n"
            f"{type(e).__name__}: {str(e)}\n\n"
            f"Details:\n{repr(e)}"
        )
        
        logger.error(f"[AI_DEBUG_WA] Error: {e}", exc_info=True)
        
        return error_message


async def ask_ai_for_brand(
    chat_id: str,
    user_text: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ AI Assistant –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–∞—Ä–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ fuzzy matching –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    AI –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞—Ä–∫—É –¥–∞–∂–µ –∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–ê—É–¥–∏ –∫–≤–∞—Ç—Ä–æ" –∏–ª–∏ "–º–µ—Ä—Å –µ –∫–ª–∞—Å—Å".
    
    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        user_text: –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê—É–¥–∏", "–º–µ—Ä—Å–µ–¥–µ—Å –µ –∫–ª–∞—Å—Å")
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        session: –°–µ—Å—Å–∏—è –ë–î
    
    Returns:
        str: –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –ª–∏–±–æ –∑–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è)
    """
    logger.info(f"[ü§ñ AI_BRAND] Asking AI to parse brand from: '{user_text}'")
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssistantManager
        assistant = AssistantManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread
        thread_id = get_or_create_thread(chat_id, assistant)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è AI
        user_data = get_user_data(chat_id)
        category_name = user_data.get("category_name", "–∞–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")
        
        ai_prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å {category_name}. "
            f"–û–Ω –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è. "
            f"–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response, _ = await assistant.get_response(
            thread_id=thread_id,
            user_message=ai_prompt,
            chat_id=chat_id,
            timeout=20
        )
        
        logger.info(f"[ü§ñ AI_BRAND] AI response: '{response[:100]}'")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –º–∞—Ä–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
        # AI –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —á—Ç–æ-—Ç–æ —Ç–∏–ø–∞ "Audi" –∏–ª–∏ "Mercedes-Benz"
        parsed_brand = response.strip().split('\n')[0].strip()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        parsed_brand = parsed_brand.replace('"', '').replace("'", "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –º–∞—Ä–∫–∞ –≤ –±–∞–∑–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º fuzzy —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º)
        from rapidfuzz import fuzz, process
        brands_list = user_data.get("brands_list", [])
        
        if brands_list:
            best_match = process.extractOne(
                parsed_brand,
                brands_list,
                scorer=fuzz.ratio
            )
            
            if best_match and best_match[1] >= 60.0:  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è AI-—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –º–∞—Ä–æ–∫
                brand_name = best_match[0]
                logger.info(f"[ü§ñ AI_BRAND] Matched to database brand: '{brand_name}' (similarity: {best_match[1]:.1f}%)")
                return await process_brand(chat_id, brand_name, config, session)
        
        # AI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–ª–∏ –º–∞—Ä–∫–∞ –Ω–µ –≤ –±–∞–∑–µ
        logger.warning(f"[ü§ñ AI_BRAND] Could not match AI response to database brands")
        return (
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Ä–∫—É –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: '{user_text}'.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
            f"\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1-8)"
            f"\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Toyota', 'BMW')"
            f"\n‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        )
        
    except Exception as e:
        logger.error(f"[ü§ñ AI_BRAND] Error: {e}", exc_info=True)
        # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return (
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞—Ä–∫—É.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
            f"\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1-8)"
            f"\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–µ–µ"
        )


async def ask_ai_for_model(
    chat_id: str,
    user_text: str,
    brand_name: str,
    config: Config,
    session: AsyncSession
) -> str:
    """
    –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ AI Assistant –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ fuzzy matching –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    AI –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–æ–¥–µ–ª—å –¥–∞–∂–µ –∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–∫–∞–º—Ä–∏ —Ç—Ä–∏–¥—Ü–∞—Ç—å" –∏–ª–∏ "—Ö –ø—è—Ç—ã–π".
    
    Args:
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        user_text: –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–∞–º—Ä–∏", "—Ö5")
        brand_name: –£–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—Ä–∫–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        session: –°–µ—Å—Å–∏—è –ë–î
    
    Returns:
        str: –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[ü§ñ AI_MODEL] Asking AI to parse model from: '{user_text}' for brand: '{brand_name}'")
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssistantManager
        assistant = AssistantManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread
        thread_id = get_or_create_thread(chat_id, assistant)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è AI
        user_data = get_user_data(chat_id)
        category_name = user_data.get("category_name", "–∞–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")
        
        ai_prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å {category_name} –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {brand_name}. "
            f"–û–Ω –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è. "
            f"–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response, _ = await assistant.get_response(
            thread_id=thread_id,
            user_message=ai_prompt,
            chat_id=chat_id,
            timeout=20
        )
        
        logger.info(f"[ü§ñ AI_MODEL] AI response: '{response[:100]}'")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –º–æ–¥–µ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        parsed_model = response.strip().split('\n')[0].strip()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        parsed_model = parsed_model.replace('"', '').replace("'", "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å –≤ –±–∞–∑–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º fuzzy —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º)
        from rapidfuzz import fuzz, process
        models_list = user_data.get("models_list", [])
        
        if models_list:
            best_match = process.extractOne(
                parsed_model,
                models_list,
                scorer=fuzz.ratio
            )
            
            if best_match and best_match[1] >= 60.0:  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è AI-—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                model_name = best_match[0]
                logger.info(f"[ü§ñ AI_MODEL] Matched to database model: '{model_name}' (similarity: {best_match[1]:.1f}%)")
                return await process_model(chat_id, model_name, config, session)
        
        # AI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤ –±–∞–∑–µ
        logger.warning(f"[ü§ñ AI_MODEL] Could not match AI response to database models")
        return (
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: '{user_text}'.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
            f"\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1-8)"
            f"\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"
            f"\n‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"
        )
        
    except Exception as e:
        logger.error(f"[ü§ñ AI_MODEL] Error: {e}", exc_info=True)
        # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return (
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–æ–¥–µ–ª—å.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
            f"\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1-8)"
            f"\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–µ–µ"
        )
