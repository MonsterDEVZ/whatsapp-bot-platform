"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "—É–º–Ω–æ–≥–æ" –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–¥–∏–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
–¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ (–≤—ã–±–æ—Ä –º–∞—Ä–∫–∏, –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏).

–ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- handle_text_or_digit_input: –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
- apply_two_level_fuzzy: –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –ª–æ–≥–∏–∫–∞ fuzzy search
- extract_vehicle_from_ai: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä–∫–∏+–º–æ–¥–µ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
"""

import logging
import json
import re
from typing import Dict, List, Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession

from core.config import Config
from core.ai.assistant import AssistantManager, get_or_create_thread
from rapidfuzz import fuzz, process

logger = logging.getLogger(__name__)


def apply_two_level_fuzzy(
    user_input: str,
    database_list: List[str],
    threshold_auto: float = 70.0,
    threshold_min: float = 60.0
) -> Dict[str, any]:
    """
    –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –ª–æ–≥–∏–∫–∞ fuzzy search.
    
    –õ–æ–≥–∏–∫–∞:
    - –°—Ö–æ–∂–µ—Å—Ç—å > 70%: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º (–±–µ–∑ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∞)
    - –°—Ö–æ–∂–µ—Å—Ç—å 60-70%: –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –°—Ö–æ–∂–µ—Å—Ç—å < 60%: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    
    Args:
        user_input: –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ AI
        database_list: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ë–î
        threshold_auto: –ü–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 70%)
        threshold_min: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60%)
        
    Returns:
        dict: {
            "action": "apply" | "ask" | "not_found",
            "value": –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∏–ª–∏ None),
            "similarity": –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏
        }
    """
    if not database_list:
        return {"action": "not_found", "value": None, "similarity": 0}
    
    best_match = process.extractOne(
        user_input,
        database_list,
        scorer=fuzz.ratio
    )
    
    if not best_match:
        return {"action": "not_found", "value": None, "similarity": 0}
    
    matched_value = best_match[0]
    similarity = best_match[1]
    
    if similarity > threshold_auto:
        # >70% - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
        logger.info(
            f"[FUZZY_AUTO] '{user_input}' ‚Üí '{matched_value}' "
            f"({similarity:.1f}% > {threshold_auto}%) ‚Üí auto-apply"
        )
        return {
            "action": "apply",
            "value": matched_value,
            "similarity": similarity
        }
    elif similarity >= threshold_min:
        # 60-70% - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        logger.info(
            f"[FUZZY_ASK] '{user_input}' ‚Üí '{matched_value}' "
            f"({similarity:.1f}% between {threshold_min}-{threshold_auto}%) ‚Üí ask confirmation"
        )
        return {
            "action": "ask",
            "value": matched_value,
            "similarity": similarity
        }
    else:
        # <60% - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        logger.info(
            f"[FUZZY_NOT_FOUND] '{user_input}' ‚Üí '{matched_value}' "
            f"({similarity:.1f}% < {threshold_min}%) ‚Üí not found"
        )
        return {
            "action": "not_found",
            "value": None,
            "similarity": similarity
        }


def extract_vehicle_from_ai(ai_response: str) -> Dict[str, Optional[str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI.
    
    AI –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å:
    - JSON: {"brand": "BMW", "model": "X5"}
    - –¢–µ–∫—Å—Ç: "–ú–∞—Ä–∫–∞: BMW, –ú–æ–¥–µ–ª—å: X5"
    - –¢–æ–ª—å–∫–æ –º–∞—Ä–∫–∞: {"brand": "BMW", "model": null}
    
    Args:
        ai_response: –û—Ç–≤–µ—Ç –æ—Ç AI Assistant
        
    Returns:
        dict: {"brand": str | None, "model": str | None}
    """
    # –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–∞—Ä—Å–∏–Ω–≥ JSON
    try:
        data = json.loads(ai_response.strip())
        if isinstance(data, dict):
            return {
                "brand": data.get("brand"),
                "model": data.get("model")
            }
    except:
        pass
    
    # –ü–æ–ø—ã—Ç–∫–∞ 2: JSON –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
    json_match = re.search(r'\{[^{}]*"brand"[^{}]*\}', ai_response)
    if json_match:
        try:
            data = json.loads(json_match.group())
            return {
                "brand": data.get("brand"),
                "model": data.get("model")
            }
        except:
            pass
    
    # –ü–æ–ø—ã—Ç–∫–∞ 3: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
    brand_match = re.search(
        r'(?:[–ú–º]–∞—Ä–∫–∞|Brand)[:\s]+([A-Za-z–ê-–Ø–∞-—è0-9\-\s]+)',
        ai_response
    )
    model_match = re.search(
        r'(?:[–ú–º]–æ–¥–µ–ª—å|Model)[:\s]+([A-Za-z0-9–ê-–Ø–∞-—è\-\s]+)',
        ai_response
    )
    
    if brand_match or model_match:
        return {
            "brand": brand_match.group(1).strip() if brand_match else None,
            "model": model_match.group(1).strip() if model_match else None
        }
    
    # –ü–æ–ø—ã—Ç–∫–∞ 4: –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ - —Å—á–∏—Ç–∞–µ–º –º–∞—Ä–∫–æ–π
    clean_response = ai_response.strip().split('\n')[0].strip()
    clean_response = clean_response.replace('"', '').replace("'", "")
    
    if clean_response:
        return {"brand": clean_response, "model": None}
    
    return {"brand": None, "model": None}


async def ask_ai_to_parse_vehicle(
    user_text: str,
    chat_id: str,
    context: str,  # "brand" –∏–ª–∏ "model"
    category_name: str,
    brand_name: Optional[str] = None,
    config = None  # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏
) -> Dict[str, Optional[str]]:
    """
    –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ AI –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ä–∫–∏ –∏/–∏–ª–∏ –º–æ–¥–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_text: –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        context: "brand" (–∏—â–µ–º –º–∞—Ä–∫—É) –∏–ª–∏ "model" (–∏—â–µ–º –º–æ–¥–µ–ª—å)
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI)
        brand_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ (–µ—Å–ª–∏ context="model")
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏
        
    Returns:
        dict: {"brand": str | None, "model": str | None}
    """
    # –ó–∞–≥–ª—É—à–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ handle_text_or_digit_input()
    # –ó–¥–µ—Å—å –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    
    try:
        assistant = AssistantManager()
        thread_id = get_or_create_thread(chat_id, assistant)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context == "brand":
            ai_prompt = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å {category_name}. "
                f"–û–Ω –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'. "
                f"–û–ø—Ä–µ–¥–µ–ª–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å. "
                f"–í–µ—Ä–Ω–∏ JSON: {{\"brand\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏\", \"model\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏\"}}. "
                f"–ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤–µ—Ä–Ω–∏ {{\"brand\": \"...\", \"model\": null}}. "
                f"–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –≤–µ—Ä–Ω–∏ {{\"brand\": null, \"model\": null}}."
            )
        else:  # context == "model"
            ai_prompt = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è {brand_name}. "
                f"–û–Ω –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'. "
                f"–û–ø—Ä–µ–¥–µ–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è. "
                f"–í–µ—Ä–Ω–∏ JSON: {{\"brand\": \"{brand_name}\", \"model\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏\"}}. "
                f"–ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–Ω—è—Ç–Ω–∞, –≤–µ—Ä–Ω–∏ {{\"brand\": \"{brand_name}\", \"model\": null}}."
            )
        
        logger.info(f"[ü§ñ AI_PARSE] Context: {context}, Input: '{user_text}'")
        
        response, _ = await assistant.get_response(
            thread_id=thread_id,
            user_message=ai_prompt,
            chat_id=chat_id,
            timeout=20
        )

        logger.info(f"[ü§ñ AI_PARSE] AI response: {response[:200]}")
        
        return extract_vehicle_from_ai(response)
        
    except Exception as e:
        logger.error(f"[ü§ñ AI_PARSE] Error: {e}", exc_info=True)
        return {"brand": None, "model": None}


async def handle_text_or_digit_input(
    user_input: str,
    context: str,  # "brand" –∏–ª–∏ "model"
    chat_id: str,
    callback_mapping: Dict[str, str],
    database_list: List[str],
    category_name: str,
    brand_name: Optional[str] = None,
    session: Optional[AsyncSession] = None,
    config = None  # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ ask_ai_to_parse_vehicle
) -> Dict[str, any]:
    """
    –ï–¥–∏–Ω–∞—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "—É–º–Ω–æ–≥–æ" –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
    
    –õ–æ–≥–∏–∫–∞:
    1. –ï—Å–ª–∏ –≤–≤–æ–¥ - –¶–ò–§–†–ê (1-8, 00, 99): –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    2. –ï—Å–ª–∏ –≤–≤–æ–¥ - –¢–ï–ö–°–¢: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    3. –ü–æ—Å–ª–µ AI –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π fuzzy search
    
    Args:
        user_input: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context: "brand" –∏–ª–∏ "model" - —á—Ç–æ –º—ã –∏—â–µ–º
        chat_id: ID —á–∞—Ç–∞ WhatsApp
        callback_mapping: –ú–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä –Ω–∞ callback_data
        database_list: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ë–î (–º–∞—Ä–∫–∏ –∏–ª–∏ –º–æ–¥–µ–ª–∏)
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
        brand_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è context="model")
        session: –°–µ—Å—Å–∏—è –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        dict: {
            "type": "digit" | "text_auto" | "text_ask" | "text_not_found" | "jump",
            "value": –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
            "brand": –º–∞—Ä–∫–∞ (–¥–ª—è –ø—Ä—ã–∂–∫–∞),
            "model": –º–æ–¥–µ–ª—å (–¥–ª—è –ø—Ä—ã–∂–∫–∞),
            "similarity": –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏,
            "callback_data": –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        }
    """
    logger.info(
        f"[SMART_INPUT] Context: {context}, Input: '{user_input}', "
        f"DB list size: {len(database_list)}"
    )
    
    # ===== –ü–†–û–í–ï–†–ö–ê 1: –≠—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–≤–æ–¥? =====
    if user_input in callback_mapping:
        logger.info(f"[SMART_INPUT] Digit input: '{user_input}' ‚Üí using callback mapping")
        return {
            "type": "digit",
            "callback_data": callback_mapping[user_input],
            "value": None
        }
    
    # ===== –ü–†–û–í–ï–†–ö–ê 2: –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ =====
    # === –û–¢–ü–†–ê–í–ö–ê –ó–ê–ì–õ–£–®–ö–ò –ü–ï–†–ï–î –õ–Æ–ë–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –¢–ï–ö–°–¢–ê ===
    logger.info(f"[SMART_INPUT] Text input detected: '{user_input}' ‚Üí sending loading message")
    
    if config:
        try:
            from loading_messages import send_loading_message_whatsapp, get_whatsapp_credentials_from_config
            creds = get_whatsapp_credentials_from_config(config)
            if creds:
                await send_loading_message_whatsapp(
                    chat_id, 
                    creds["instance_id"], 
                    creds["api_token"], 
                    creds["api_url"]
                )
                logger.info(f"[LOADING] Loading message sent for text input: '{user_input}'")
        except Exception as e:
            logger.warning(f"[LOADING] Could not send loading message: {e}")
    
    # ===== –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (AI) =====
    logger.info(f"[SMART_INPUT] Processing text via AI: '{user_input}'")
    
    ai_result = await ask_ai_to_parse_vehicle(
        user_text=user_input,
        chat_id=chat_id,
        context=context,
        category_name=category_name,
        brand_name=brand_name,
        config=config  # –ü–µ—Ä–µ–¥–∞–µ–º config –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏
    )
    
    extracted_brand = ai_result.get("brand")
    extracted_model = ai_result.get("model")
    
    logger.info(
        f"[SMART_INPUT] AI extracted: brand='{extracted_brand}', model='{extracted_model}'"
    )
    
    # ===== –ü–†–û–í–ï–†–ö–ê 3: "–ü—Ä—ã–∂–æ–∫ —á–µ—Ä–µ–∑ —à–∞–≥–∏" (–º–∞—Ä–∫–∞+–º–æ–¥–µ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ) =====
    if context == "brand" and extracted_brand and extracted_model:
        logger.info(
            f"[SMART_INPUT] üöÄ JUMP detected: both brand and model found - "
            f"'{extracted_brand}' + '{extracted_model}'"
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ —á–µ—Ä–µ–∑ fuzzy
        # –ü–æ–∫–∞ –≤–µ—Ä–Ω–µ–º —Ñ–ª–∞–≥ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –≤ caller
        return {
            "type": "jump",
            "brand": extracted_brand,
            "model": extracted_model,
            "value": None
        }
    
    # ===== –ü–†–û–í–ï–†–ö–ê 4: –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π Fuzzy Search =====
    if context == "brand":
        search_value = extracted_brand
    else:  # context == "model"
        search_value = extracted_model
    
    if not search_value:
        logger.warning(f"[SMART_INPUT] AI did not extract {context}")
        return {
            "type": "text_not_found",
            "value": None,
            "similarity": 0
        }
    
    fuzzy_result = apply_two_level_fuzzy(
        user_input=search_value,
        database_list=database_list,
        threshold_auto=70.0,
        threshold_min=60.0
    )
    
    if fuzzy_result["action"] == "apply":
        # >70% - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
        return {
            "type": "text_auto",
            "value": fuzzy_result["value"],
            "similarity": fuzzy_result["similarity"]
        }
    elif fuzzy_result["action"] == "ask":
        # 60-70% - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        return {
            "type": "text_ask",
            "value": fuzzy_result["value"],
            "similarity": fuzzy_result["similarity"],
            "original_input": user_input
        }
    else:
        # <60% - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        return {
            "type": "text_not_found",
            "value": None,
            "similarity": fuzzy_result.get("similarity", 0)
        }


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

def generate_confirmation_message(
    context: str,
    original_input: str,
    suggested_value: str,
    similarity: float
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∫–æ–≥–¥–∞ —Å—Ö–æ–∂–µ—Å—Ç—å 60-70%).
    
    Args:
        context: "brand" –∏–ª–∏ "model"
        original_input: –ß—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        suggested_value: –ß—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º
        similarity: –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏
        
    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if context == "brand":
        entity = "–º–∞—Ä–∫—É"
    else:
        entity = "–º–æ–¥–µ–ª—å"
    
    return (
        f"‚ùì –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: '{original_input}'\n\n"
        f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É {entity} '{suggested_value}' "
        f"(—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.0f}%)?\n\n"
        f"1 - –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '{suggested_value}'\n"
        f"2 - –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
    )


def generate_not_found_message(context: str, user_input: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (<60% —Å—Ö–æ–∂–µ—Å—Ç–∏).
    
    Args:
        context: "brand" –∏–ª–∏ "model"
        user_input: –ß—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if context == "brand":
        entity = "–ú–∞—Ä–∫–∞"
        examples = "Toyota, BMW, Mercedes-Benz"
    else:
        entity = "–ú–æ–¥–µ–ª—å"
        examples = "Camry, X5, E-Class"
    
    return (
        f"‚ùå {entity} '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.\n\n"
        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1-8)\n"
        f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–æ—á–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: {examples})\n"
        f"‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )
