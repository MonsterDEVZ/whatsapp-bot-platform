"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ù–û–í–û–ô –±–∞–∑–æ–π Airtable (EVOPOLIKI).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π airtable_manager —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–æ–ª–µ–π.
"""

import asyncio
import os
import logging
from dotenv import load_dotenv
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_new_airtable():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –≤ –ù–û–í–£–Æ –±–∞–∑—É Airtable."""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_path = Path(__file__).parent / ".env"
    load_dotenv(dotenv_path=env_path)

    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è EVOPOLIKI...")

    # –ü–æ–ª—É—á–∞–µ–º credentials –¥–ª—è EVOPOLIKI
    api_token = os.getenv("EVOPOLIKI_AIRTABLE_API_TOKEN")
    base_id = os.getenv("EVOPOLIKI_AIRTABLE_BASE_ID")
    table_id = os.getenv("EVOPOLIKI_AIRTABLE_TABLE_ID")

    if not all([api_token, base_id, table_id]):
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è EVOPOLIKI Airtable!")
        logger.error(f"   EVOPOLIKI_AIRTABLE_API_TOKEN: {'‚úÖ' if api_token else '‚ùå'}")
        logger.error(f"   EVOPOLIKI_AIRTABLE_BASE_ID: {'‚úÖ' if base_id else '‚ùå'}")
        logger.error(f"   EVOPOLIKI_AIRTABLE_TABLE_ID: {'‚úÖ' if table_id else '‚ùå'}")
        return

    logger.info(f"‚úÖ API Token: {api_token[:20]}...")
    logger.info(f"‚úÖ Base ID: {base_id}")
    logger.info(f"‚úÖ Table ID: {table_id}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º airtable_manager
    from packages.core.integrations import create_lead

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_lead_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (–ù–û–í–ê–Ø –ë–ê–ó–ê)",
        "phone": "+996777888999",
        "username": "996777888999@c.us",
        "category": "üîπ EVA-–∫–æ–≤—Ä–∏–∫–∏",
        "car_brand": "Toyota",
        "car_model": "Camry 2022",
        "options": "–° –±–æ—Ä—Ç–∞–º–∏ 5 —Å–º, –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç",
        "price": 2800
    }

    logger.info("\nüì¶ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    for key, value in test_lead_data.items():
        logger.info(f"   {key}: {value}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    logger.info("\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –ù–û–í–£–Æ –±–∞–∑—É Airtable...")
    record_id = await create_lead(test_lead_data, tenant_slug="evopoliki")

    if record_id:
        logger.info("\n" + "="*70)
        logger.info("‚úÖ ‚úÖ ‚úÖ –¢–ï–°–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–ê! ‚úÖ ‚úÖ ‚úÖ")
        logger.info(f"üìã Record ID: {record_id}")
        logger.info("="*70)
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Airtable:")
        logger.info(f"   Base: {base_id}")
        logger.info(f"   Table: {table_id}")
        logger.info("   https://airtable.com/appVkpLFJbf0APDj5/tblUV3a6NRB0azN22/viwotYdoR4kSyXbih?blocks=hide")
    else:
        logger.error("\n" + "="*70)
        logger.error("‚ùå ‚ùå ‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò! ‚ùå ‚ùå ‚ùå")
        logger.error("="*70)
        logger.error("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏.")


if __name__ == "__main__":
    asyncio.run(test_new_airtable())
